
#include <vector>

#include "LLTLoader.h"

namespace
{
    struct TrackPoint
    {
        Ogre::Vector3 vert; 
        Ogre::uint32 index; 
        float weight; 
        bool isCheckpoint; 
        Ogre::Vector3 dir;
    };
}//anonymous namespace

LLTLoader::LLTLoader() : mNameGenNodes("Scene/Node/LLT/Name")
{}

void LLTLoader::load(GameState& gameState, Ogre::SceneManager* sceneMgr, bool isDebugLLT) const
{
    Ogre::DataStreamPtr fileToLoad = gameState.getPFLoaderData().getFile("data/tracks/" + gameState.getSTRPowerslide().getBaseDir(gameState.getTrackName()) + "/graphst", "laptrack.lpf");
    if(fileToLoad.get() && fileToLoad->isReadable())
    {
        bool endendFound = false;
        std::vector<TrackPoint> track;

        Ogre::uint32 flag;
        fileToLoad->read(&flag, 4);
        if(flag <= 1)
        {
            char LLTINFO[8];
            fileToLoad->read(LLTINFO, 8);
            if(std::string(LLTINFO) == "LLTINFO")
            {
                Ogre::uint32 someCount;    // checkpoints count
                fileToLoad->read(&someCount, 4);

                Ogre::uint32 something = 0;
                if(flag >= 1)
                {
                    fileToLoad->read(&something, 4);
                }

                Ogre::uint32 someCount3, someCount2;
                fileToLoad->read(&someCount3, 4);
                fileToLoad->read(&someCount2, 4); // track points count

                //track points
                for(size_t q = 0; q < someCount2; ++q)
                {
                    struct LLT_INFO_1
                    {
                        Ogre::uint32 some_flag; // is checkpoint
                        float x, y, z;
                        float weight;
                        Ogre::uint32 nextIndex, prevIndex;
                        float n1, n2, n3;   // rotation normals for direction arrow???
                    }lltinfo1;

                    fileToLoad->read(&lltinfo1, sizeof(LLT_INFO_1));

                    TrackPoint tp;
                    tp.vert.x = lltinfo1.x;
                    tp.vert.y = lltinfo1.y;
                    tp.vert.z = -lltinfo1.z,
                    tp.index = lltinfo1.nextIndex;
                    tp.weight = lltinfo1.weight;
                    tp.isCheckpoint = lltinfo1.some_flag == 1 ? true : false;
                    tp.dir.x = lltinfo1.n1;
                    tp.dir.y = lltinfo1.n2;
                    tp.dir.z = -lltinfo1.n3;

                    track.push_back(tp);
                }
                /*
                for(size_t q = 0; q < someCount; ++q)
                {
                    Ogre::uint32 some_index, some_index2;
                    fileToLoad->read(&some_index, 4);
                    fileToLoad->read(&some_index2, 4);
                }

                if(something > 0)
                {
                    for(size_t q = 0; q < something; ++q)
                    {
                        float someA, someB, someC, someD, someE;
                        fileToLoad->read(&someA, 4);
                        fileToLoad->read(&someB, 4);
                        fileToLoad->read(&someC, 4);
                        fileToLoad->read(&someD, 4);
                        fileToLoad->read(&someE, 4);
                    }
                }

                if(someCount3 > 0)
                {
                    for(size_t q = 0; q < someCount3; ++q)
                    {
                        float someA;
                        Ogre::uint32 someCountA, someCountB;
                        fileToLoad->read(&someA, 4);
                        fileToLoad->read(&someCountA, 4);
                        fileToLoad->read(&someCountB, 4);

                        if(someCountA > 0)
                        {
                            for(size_t w = 0; w < someCountA; ++w)
                            {
                                Ogre::uint32 someIndex;
                                fileToLoad->read(&someIndex, 4);
                            }
                        }

                        if(someCountB > 0)
                        {
                            for(size_t w = 0; w < someCountA; ++w)
                            {
                                Ogre::uint32 someIndex;
                                fileToLoad->read(&someIndex, 4);
                            }
                        }
                    }
                }

                char LLTGRID[8];
                fileToLoad->read(LLTGRID, 8);
                if(std::string(LLTGRID) == "LLTGRID")
                {
                    Ogre::uint32 LLTGRID_someCount, LLTGRID_someCount2;
                    float LLTGRID_unknown, LLTGRID_unknown2;
                    Ogre::uint32 LLTGRID_unknown3, LLTGRID_unknown4;
                    Ogre::uint32 LLTGRID_unknown5, LLTGRID_unknown6;
                    float LLTGRID_unknown7, LLTGRID_unknown8;
                    float LLTGRID_unknown9, LLTGRID_unknown10;

                    fileToLoad->read(&LLTGRID_someCount, 4);
                    fileToLoad->read(&LLTGRID_someCount2, 4);
                    fileToLoad->read(&LLTGRID_unknown, 4);
                    fileToLoad->read(&LLTGRID_unknown2, 4);
                    fileToLoad->read(&LLTGRID_unknown3, 4);
                    fileToLoad->read(&LLTGRID_unknown4, 4);
                    fileToLoad->read(&LLTGRID_unknown5, 4);
                    fileToLoad->read(&LLTGRID_unknown6, 4);
                    fileToLoad->read(&LLTGRID_unknown7, 4);
                    fileToLoad->read(&LLTGRID_unknown8, 4);
                    fileToLoad->read(&LLTGRID_unknown9, 4);
                    fileToLoad->read(&LLTGRID_unknown10, 4);

                    for(size_t q = 0; q < LLTGRID_someCount2; ++q)
                    {
                        Ogre::uint32 someIndex, someIndex2;
                        fileToLoad->read(&someIndex, 4);
                        fileToLoad->read(&someIndex2, 4);
                    }

                    for(size_t q = 0; q < someCount2; ++q)
                    {
                        Ogre::uint32 someIndex;
                        fileToLoad->read(&someIndex, 4);
                    }

                    char ENDENDE[8];
                    fileToLoad->read(ENDENDE, 8);
                    if(std::string(ENDENDE) == "ENDENDE")
                    {
                        endendFound = true;
                    }
                }*/
            }

        }

        //if(endendFound)
        {
            //EU assets error
            std::sort(track.begin() + 1, track.end(), [](const TrackPoint& tp1, const TrackPoint& tp2) { return tp1.weight < tp2.weight; });

            if(gameState.isMineshaftedTrack())
            {
                track = {{{3.969727f, -353.765167f, -181.435516f}, 3, 1.000000f, 1, {-0.223519f, -0.004080f, 0.974691f}}, {{-10.588379f, -354.398773f, -79.093689f}, 4, 0.007739f, 0, {-0.140829f, -0.006129f, 0.990015f}}, {{-25.146484f, -355.032379f, 23.248138f}, 5, 0.015478f, 0, {-0.140829f, -0.006129f, 0.990015f}}, {{-39.704590f, -355.665985f, 125.589966f}, 6, 0.023217f, 0, {-0.468523f, -0.009458f, 0.883401f}}, {{-123.373901f, -356.983612f, 201.497620f}, 7, 0.031675f, 0, {-0.934159f, 0.029246f, 0.355656f}}, {{-239.146973f, -349.315643f, 200.331543f}, 8, 0.040362f, 0, {-0.954314f, 0.037962f, -0.296385f}}, {{-346.240479f, -348.460938f, 128.387726f}, 9, 0.050021f, 0, {-0.715987f, 0.020184f, -0.697822f}}, {{-397.712524f, -345.516968f, 55.850372f}, 10, 0.056683f, 0, {-0.669941f, 0.009634f, -0.742352f}}, {{-439.522888f, -346.292603f, 19.206207f}, 11, 0.060846f, 0, {-0.804695f, -0.006109f, -0.593656f}}, {{-480.590088f, -346.207031f, -6.061798f}, 12, 0.064456f, 0, {-0.890951f, 0.011587f, -0.453951f}}, {{-565.725952f, -344.243042f, -41.142639f}, 13, 0.071351f, 0, {-0.942538f, 0.034948f, -0.332265f}}, {{-681.142090f, -338.403351f, -75.199127f}, 14, 0.080371f, 0, {-0.961687f, 0.071891f, -0.264557f}}, {{-820.635559f, -324.628448f, -110.805389f}, 15, 0.091198f, 0, {-0.884875f, 0.094257f, -0.456192f}}, {{-909.354431f, -314.303802f, -185.828339f}, 16, 0.099930f, 0, {-0.636147f, 0.192003f, -0.747297f}}, {{-981.697266f, -271.565613f, -307.906830f}, 17, 0.111025f, 0, {-0.692665f, 0.149809f, -0.705530f}}, {{-1054.220947f, -271.565613f, -353.759979f}, 18, 0.117449f, 0, {-0.987182f, 0.000000f, -0.159601f}}, {{-1129.658325f, -271.565613f, -335.041290f}, 19, 0.123268f, 0, {-0.822940f, 0.000000f, 0.568128f}}, {{-1176.994019f, -271.565613f, -266.669769f}, 20, 0.129493f, 0, {-0.288964f, 0.044450f, 0.956307f}}, {{-1175.321045f, -264.409760f, -182.326294f}, 21, 0.135832f, 0, {0.019760f, 0.084522f, 0.996226f}}, {{-1173.648193f, -257.253906f, -97.982819f}, 22, 0.142170f, 0, {0.178313f, 0.115200f, 0.977207f}}, {{-1140.972656f, -243.202759f, -6.262741f}, 23, 0.149535f, 0, {0.332151f, 0.142832f, 0.932349f}}, {{-1108.297241f, -229.151611f, 85.457336f}, 24, 0.156900f, 0, {0.289068f, 0.033753f, 0.956713f}}, {{-1072.125854f, -240.490479f, 230.143005f}, 25, 0.168097f, 0, {0.057284f, -0.042697f, 0.997444f}}, {{-1085.690063f, -241.334076f, 334.135834f}, 26, 0.175949f, 0, {-0.263956f, 0.029832f, 0.964073f}}, {{-1139.483887f, -232.154144f, 459.585388f}, 27, 0.186191f, 0, {-0.620585f, 0.046716f, 0.782746f}}, {{-1203.713501f, -230.313507f, 506.981293f}, 28, 0.192168f, 0, {-0.804430f, 0.023053f, 0.593600f}}, {{-1267.943115f, -228.472870f, 554.377197f}, 29, 0.198146f, 0, {-0.862655f, 0.035902f, 0.504517f}}, {{-1346.388184f, -224.310242f, 589.651855f}, 30, 0.204592f, 0, {-0.910967f, 0.048340f, 0.409637f}}, {{-1424.833252f, -220.147614f, 624.926514f}, 31, 0.211039f, 0, {-0.897766f, 0.024190f, 0.439808f}}, {{-1524.268555f, -220.147614f, 677.764343f}, 32, 0.219469f, 0, {-0.824474f, -0.020562f, 0.565525f}}, {{-1592.089966f, -223.817200f, 736.542908f}, 33, 0.226194f, 0, {-0.566872f, -0.003207f, 0.823799f}}, {{-1628.261353f, -220.147614f, 836.014282f}, 34, 0.234122f, 0, {-0.484255f, 0.025775f, 0.874547f}}, {{-1674.210083f, -218.932434f, 894.908447f}, 35, 0.239715f, 0, {-0.811696f, -0.016365f, 0.583850f}}, {{-1753.989990f, -222.968231f, 923.001587f}, 36, 0.246055f, 0, {-0.996996f, 0.051803f, -0.057574f}}, {{-1824.911255f, -211.565704f, 888.058472f}, 37, 0.252035f, 0, {-0.668443f, 0.121361f, -0.733795f}}, {{-1858.854126f, -203.653198f, 799.842896f}, 38, 0.259136f, 0, {-0.368657f, 0.036788f, -0.928837f}}, {{-1899.546997f, -204.720306f, 700.371460f}, 39, 0.267182f, 0, {-0.489541f, -0.018068f, -0.871793f}}, {{-1962.847046f, -207.488312f, 614.464355f}, 40, 0.275174f, 0, {-0.472295f, 0.030807f, -0.880902f}}, {{-1999.018433f, -198.264343f, 514.992920f}, 41, 0.283128f, 0, {-0.262617f, 0.166164f, -0.950485f}}, {{-2017.104126f, -174.006058f, 420.042969f}, 42, 0.290588f, 0, {-0.181484f, 0.243423f, -0.952790f}}, {{-2035.189819f, -149.747772f, 325.092987f}, 43, 0.298049f, 0, {-0.147810f, 0.135850f, -0.979641f}}, {{-2051.014893f, -146.015137f, 184.928726f}, 44, 0.308613f, 0, {-0.112151f, 0.026453f, -0.993339f}}, {{-2066.839844f, -142.282501f, 44.764465f}, 45, 0.319177f, 0, {-0.145589f, 0.021679f, -0.989107f}}, {{-2080.404053f, -141.002304f, -29.839066f}, 46, 0.324854f, 0, {-0.178859f, 0.016881f, -0.983730f}}, {{-2093.968262f, -139.722107f, -104.442596f}, 47, 0.330532f, 0, {-0.389309f, 0.073805f, -0.918146f}}, {{-2175.354004f, -121.902122f, -217.478363f}, 48, 0.341044f, 0, {-0.752469f, 0.120212f, -0.647564f}}, {{-2254.479004f, -112.331787f, -258.171173f}, 49, 0.347744f, 0, {-0.884188f, 0.106944f, -0.454725f}}, {{-2333.604004f, -102.761452f, -298.863983f}, 50, 0.354443f, 0, {-0.957972f, 0.089792f, -0.272447f}}, {{-2446.639648f, -94.902229f, -307.906830f}, 51, 0.362953f, 0, {-0.994430f, 0.069141f, -0.079554f}}, {{-2559.675293f, -87.043007f, -316.949677f}, 52, 0.371463f, 0, {-0.979978f, 0.126204f, 0.153997f}}, {{-2668.189453f, -66.031685f, -271.735443f}, 53, 0.380403f, 0, {-0.650718f, 0.175116f, 0.738851f}}, {{-2690.796875f, -54.096436f, -190.349823f}, 54, 0.386790f, 0, {0.146658f, 0.106573f, 0.983430f}}, {{-2636.539551f, -48.503361f, -104.442596f}, 55, 0.394408f, 0, {0.702298f, 0.081142f, 0.707244f}}, {{-2524.865723f, -34.715523f, -32.945984f}, 56, 0.404389f, 0, {0.941485f, 0.067050f, 0.330318f}}, {{-2387.905273f, -30.992268f, -18.295013f}, 57, 0.414704f, 0, {0.998217f, 0.021631f, -0.055631f}}, {{-2274.821289f, -29.176849f, -43.330231f}, 58, 0.423376f, 0, {0.974746f, 0.007793f, -0.223182f}}, {{-2193.437744f, -29.184149f, -62.582886f}, 59, 0.429637f, 0, {0.973140f, -0.000087f, -0.230213f}}, {{-2112.054199f, -29.191448f, -81.835541f}, 60, 0.435898f, 0, {0.957237f, 0.000359f, -0.289305f}}, {{-1989.975586f, -29.086830f, -127.049774f}, 61, 0.445644f, 0, {0.983923f, -0.027320f, -0.176490f}}, {{-1885.982788f, -34.769791f, -127.049774f}, 62, 0.453441f, 0, {0.970793f, -0.071830f, 0.228912f}}, {{-1804.597046f, -42.555439f, -86.356903f}, 63, 0.460278f, 0, {0.809859f, -0.054897f, 0.584051f}}, {{-1748.079224f, -44.400230f, -29.839066f}, 64, 0.466264f, 0, {0.706918f, -0.023074f, 0.706919f}}, {{-1691.561401f, -46.245026f, 26.678772f}, 65, 0.472249f, 0, {0.549014f, 0.087338f, 0.831238f}}, {{-1647.854248f, -22.939137f, 136.700180f}, 66, 0.481282f, 0, {0.362242f, 0.193158f, 0.911850f}}, {{-1604.147217f, 0.366753f, 246.721588f}, 67, 0.490315f, 0, {0.362242f, 0.193158f, 0.911850f}}, {{-1560.440063f, 23.672638f, 356.742981f}, 68, 0.499348f, 0, {0.368600f, 0.258619f, 0.892889f}}, {{-1514.676636f, 63.260971f, 463.385773f}, 69, 0.508528f, 0, {0.396103f, 0.173472f, 0.901670f}}, {{-1463.209473f, 65.766357f, 578.012451f}, 70, 0.517936f, 0, {0.411785f, -0.143587f, 0.899898f}}, {{-1429.318604f, 40.262562f, 650.635742f}, 71, 0.524233f, 0, {0.413135f, -0.415681f, 0.810264f}}, {{-1397.668457f, 0.657207f, 707.153564f}, 72, 0.529917f, 0, {0.416861f, -0.521639f, 0.744392f}}, {{-1366.018433f, -38.948147f, 763.671448f}, 73, 0.535601f, 0, {0.392026f, -0.575999f, 0.717315f}}, {{-1328.339966f, -103.673889f, 834.507141f}, 74, 0.543318f, 0, {0.365505f, -0.627879f, 0.687150f}}, {{-1290.661377f, -168.399628f, 905.342896f}, 1, 0.551036f, 0, {0.365505f, -0.627879f, 0.687150f}}, {{-1252.982910f, -233.125366f, 976.178589f}, 75, 0.558753f, 1, {0.396882f, -0.394184f, 0.828917f}}, {{-1196.465088f, -251.668289f, 1105.039307f}, 76, 0.569379f, 0, {0.398219f, -0.130651f, 0.907938f}}, {{-1139.947266f, -270.211212f, 1233.899902f}, 77, 0.580004f, 0, {0.336016f, -0.064247f, 0.939662f}}, {{-1106.557251f, -269.871582f, 1352.643799f}, 78, 0.589239f, 0, {0.270694f, 0.002753f, 0.962661f}}, {{-1073.167236f, -269.531952f, 1471.387573f}, 79, 0.598473f, 0, {0.081414f, -0.005546f, 0.996665f}}, {{-1087.382690f, -271.280518f, 1598.786377f}, 80, 0.608071f, 0, {-0.306051f, -0.006622f, 0.951992f}}, {{-1142.019531f, -271.206818f, 1696.245117f}, 81, 0.616435f, 0, {-0.742537f, 0.004627f, 0.669789f}}, {{-1249.682129f, -270.255981f, 1742.785156f}, 82, 0.625217f, 0, {-0.897880f, -0.025058f, 0.439527f}}, {{-1358.187378f, -277.466339f, 1802.416260f}, 83, 0.634501f, 0, {-0.609898f, -0.068065f, 0.789551f}}, {{-1374.578491f, -281.950409f, 1867.442139f}, 84, 0.639533f, 0, {0.179769f, -0.179855f, 0.967127f}}, {{-1326.994385f, -303.566193f, 1932.754639f}, 85, 0.645795f, 0, {0.885812f, -0.173526f, 0.430379f}}, {{-1194.204346f, -310.035583f, 1930.199707f}, 86, 0.655750f, 0, {0.967162f, -0.074619f, -0.242959f}}, {{-1095.962646f, -320.764893f, 1879.824951f}, 87, 0.664055f, 0, {0.920110f, -0.049334f, -0.388540f}}, {{-990.740112f, -320.938019f, 1844.292603f}, 88, 0.672369f, 0, {0.905108f, -0.028647f, -0.424217f}}, {{-893.158081f, -327.287628f, 1784.318481f}, 89, 0.680957f, 0, {0.660517f, -0.058369f, -0.748539f}}, {{-845.995789f, -333.719452f, 1680.469849f}, 90, 0.689510f, 0, {0.257296f, -0.043184f, -0.965367f}}, {{-837.489258f, -336.314392f, 1591.049072f}, 91, 0.696237f, 0, {0.094662f, -0.028877f, -0.995091f}}, {{-828.982788f, -338.909332f, 1501.628418f}, 92, 0.702965f, 0, {0.232410f, -0.016882f, -0.972471f}}, {{-796.825745f, -339.310059f, 1419.760620f}, 93, 0.709550f, 0, {0.365596f, -0.004556f, -0.930762f}}, {{-764.668701f, -339.710815f, 1337.892822f}, 94, 0.716134f, 0, {0.547832f, -0.012252f, -0.836499f}}, {{-705.890137f, -341.326294f, 1279.114258f}, 95, 0.722359f, 0, {0.939048f, -0.076610f, -0.335143f}}, {{-574.768799f, -357.101044f, 1292.678467f}, 96, 0.732298f, 0, {0.863542f, -0.171443f, 0.474238f}}, {{-493.383057f, -383.666016f, 1396.671387f}, 97, 0.742382f, 0, {0.637175f, -0.093187f, 0.765065f}}, {{-441.386658f, -382.727509f, 1455.449951f}, 98, 0.748258f, 0, {0.662526f, 0.011958f, 0.748943f}}, {{-389.390259f, -381.789001f, 1514.228516f}, 99, 0.754133f, 0, {0.920598f, -0.018378f, 0.390078f}}, {{-289.918823f, -386.285065f, 1509.707031f}, 100, 0.761595f, 0, {0.917057f, -0.043025f, -0.396428f}}, {{-213.054565f, -390.074982f, 1435.103516f}, 101, 0.769620f, 0, {0.717132f, -0.035359f, -0.696040f}}, {{-136.190308f, -393.864899f, 1360.499878f}, 102, 0.777644f, 0, {0.555218f, 0.001367f, -0.831704f}}, {{-93.236755f, -389.423401f, 1251.985596f}, 103, 0.786387f, 0, {0.367782f, 0.038030f, -0.929134f}}, {{-50.283203f, -384.981873f, 1143.471436f}, 104, 0.795131f, 0, {0.144821f, 0.031886f, -0.988944f}}, {{-61.586792f, -381.816803f, 1012.349976f}, 105, 0.804986f, 0, {-0.085864f, 0.024042f, -0.996017f}}, {{-72.890381f, -378.651733f, 881.228577f}, 106, 0.814842f, 0, {-0.241905f, 0.001262f, -0.970299f}}, {{-124.886780f, -381.511963f, 759.150024f}, 107, 0.824778f, 0, {-0.391771f, -0.021551f, -0.919810f}}, {{-176.883179f, -384.372162f, 637.071472f}, 108, 0.834714f, 0, {-0.663981f, -0.066096f, -0.744823f}}, {{-244.704590f, -392.490906f, 598.639343f}, 109, 0.840582f, 0, {-0.865342f, -0.103588f, -0.490360f}}, {{-312.526001f, -400.609650f, 560.207214f}, 110, 0.846449f, 0, {-0.922509f, 0.028254f, -0.384940f}}, {{-384.868835f, -388.491394f, 539.860779f}, 111, 0.852148f, 0, {-0.950374f, 0.159199f, -0.267293f}}, {{-457.211670f, -376.373138f, 519.514343f}, 112, 0.857847f, 0, {-0.891051f, 0.116361f, -0.438735f}}, {{-566.137146f, -366.922089f, 438.587830f}, 113, 0.868031f, 0, {-0.528828f, 0.188733f, -0.827479f}}, {{-590.052368f, -329.911041f, 314.534912f}, 114, 0.877886f, 0, {0.104006f, 0.143715f, -0.984139f}}, {{-559.803467f, -330.581665f, 240.688965f}, 115, 0.883861f, 0, {0.379041f, -0.008403f, -0.925342f}}, {{-529.554504f, -331.252258f, 166.843018f}, 116, 0.889835f, 0, {0.442291f, 0.028465f, -0.896420f}}, {{-466.254517f, -323.049347f, 58.328735f}, 117, 0.899260f, 0, {0.528696f, 0.056301f, -0.846942f}}, {{-438.337646f, -320.661591f, 16.453369f}, 118, 0.903032f, 0, {0.553783f, -0.057467f, -0.830675f}}, {{-393.911682f, -333.784271f, -50.185486f}, 119, 0.909108f, 0, {0.504618f, -0.068344f, -0.860634f}}, {{-346.436676f, -331.093201f, -142.874756f}, 120, 0.916907f, 0, {0.455724f, 0.025832f, -0.889746f}}, {{-298.961670f, -328.402100f, -235.564026f}, 121, 0.924706f, 0, {0.404870f, 0.035514f, -0.913684f}}, {{-253.747406f, -322.623108f, -355.381836f}, 122, 0.934304f, 0, {0.352698f, 0.045080f, -0.934651f}}, {{-208.533142f, -316.844116f, -475.199646f}, 123, 0.943901f, 0, {0.522919f, -0.009968f, -0.852324f}}, {{-113.583130f, -325.964081f, -579.192444f}, 124, 0.954465f, 0, {0.830330f, -0.153994f, -0.535572f}}, {{-14.111816f, -350.868225f, -610.842590f}, 125, 0.962499f, 0, {0.976404f, -0.171703f, 0.130972f}}, {{71.795410f, -358.935455f, -556.585510f}, 2, 0.970130f, 0, {0.566922f, -0.100882f, 0.817571f}}, {{98.923950f, -373.301697f, -425.463928f}, 126, 0.980212f, 1, {-0.103404f, 0.057152f, 0.992996f}}, {{61.130615f, -352.858307f, -340.201019f}, 127, 0.987360f, 0, {-0.384248f, 0.103596f, 0.917399f}}, {{27.734253f, -353.608948f, -255.739410f}, 0, 0.994160f, 0, {-0.336349f, -0.005136f, 0.941723f}}};
            }

            if(gameState.isLugeTrack())
            {
                track = {{{-1591.022949f, 225.808258f, -5116.754395f}, 3, 1.000000f, 1, {0.977053f, -0.067519f, 0.202013f}}, {{-1473.710449f, 197.146072f, -5104.473145f}, 4, 0.003598f, 0, {0.966442f, -0.236124f, 0.101173f}}, {{-1356.397949f, 168.483887f, -5092.192383f}, 5, 0.007196f, 0, {0.966442f, -0.236124f, 0.101173f}}, {{-1239.085449f, 139.821701f, -5079.911133f}, 6, 0.010793f, 0, {0.966441f, -0.236124f, 0.101175f}}, {{-1121.772949f, 111.159515f, -5067.629883f}, 7, 0.014391f, 0, {0.937329f, -0.318617f, 0.141060f}}, {{-998.678345f, 56.674828f, -5043.047852f}, 8, 0.018447f, 0, {0.899552f, -0.398164f, 0.179641f}}, {{-875.583740f, 2.190140f, -5018.465820f}, 9, 0.022503f, 0, {0.899553f, -0.398164f, 0.179639f}}, {{-752.489136f, -52.294556f, -4993.884277f}, 10, 0.026559f, 0, {0.899553f, -0.398164f, 0.179639f}}, {{-629.394531f, -106.779243f, -4969.302246f}, 11, 0.030615f, 0, {0.943725f, -0.237055f, 0.230624f}}, {{-505.252533f, -115.673393f, -4933.763184f}, 12, 0.034451f, 0, {0.959108f, -0.068715f, 0.274573f}}, {{-381.110535f, -124.567551f, -4898.223633f}, 13, 0.038288f, 0, {0.959108f, -0.068715f, 0.274573f}}, {{-256.968536f, -133.461700f, -4862.684570f}, 14, 0.042124f, 0, {0.791681f, -0.042279f, 0.609469f}}, {{-192.157623f, -134.711304f, -4754.164063f}, 15, 0.045871f, 0, {-0.014939f, -0.089456f, 0.995879f}}, {{-244.144928f, -148.418320f, -4673.883789f}, 16, 0.048734f, 0, {-0.743507f, -0.092496f, 0.662300f}}, {{-319.337097f, -151.475067f, -4636.455078f}, 17, 0.051226f, 0, {-0.894631f, -0.036369f, 0.445324f}}, {{-394.529236f, -154.531815f, -4599.026367f}, 18, 0.053717f, 0, {-0.856511f, -0.087057f, 0.508734f}}, {{-509.163177f, -173.890823f, -4518.782715f}, 19, 0.057904f, 0, {-0.571097f, 0.009240f, 0.820830f}}, {{-528.239624f, -162.075775f, -4445.521484f}, 20, 0.060175f, 0, {-0.248974f, 0.154203f, 0.956156f}}, {{-547.316101f, -150.260712f, -4372.260742f}, 21, 0.062446f, 0, {0.167405f, -0.042271f, 0.984982f}}, {{-499.581177f, -170.267731f, -4302.229492f}, 22, 0.065027f, 0, {0.548159f, -0.229749f, 0.804200f}}, {{-451.846222f, -190.274765f, -4232.197754f}, 23, 0.067608f, 0, {0.801470f, -0.289713f, 0.523176f}}, {{-354.407379f, -222.210968f, -4215.002930f}, 24, 0.070689f, 0, {0.937175f, -0.307165f, 0.165384f}}, {{-256.968536f, -254.147171f, -4197.807617f}, 25, 0.073771f, 0, {0.939313f, -0.293172f, 0.178161f}}, {{-146.147964f, -287.009277f, -4175.331543f}, 26, 0.077261f, 0, {0.941109f, -0.279071f, 0.190873f}}, {{-35.327393f, -319.871399f, -4152.854980f}, 27, 0.080751f, 0, {0.941109f, -0.279071f, 0.190873f}}, {{75.493164f, -352.733490f, -4130.378906f}, 28, 0.084242f, 0, {0.952846f, -0.255355f, 0.163946f}}, {{186.298187f, -379.338409f, -4114.643555f}, 29, 0.087651f, 0, {0.963225f, -0.231276f, 0.136785f}}, {{297.103210f, -405.943329f, -4098.908691f}, 30, 0.091061f, 0, {0.963225f, -0.231276f, 0.136784f}}, {{407.908234f, -432.548248f, -4083.173584f}, 31, 0.094470f, 0, {0.973945f, -0.122143f, 0.191083f}}, {{514.899902f, -433.781433f, -4056.425781f}, 32, 0.097739f, 0, {0.970082f, -0.011181f, 0.242520f}}, {{621.891602f, -435.014587f, -4029.677734f}, 33, 0.101008f, 0, {0.970082f, -0.011181f, 0.242520f}}, {{728.883301f, -436.247772f, -4002.929932f}, 34, 0.104277f, 0, {0.826818f, -0.119641f, 0.549598f}}, {{813.325195f, -467.311249f, -3888.115967f}, 35, 0.108601f, 0, {0.152405f, -0.077143f, 0.985303f}}, {{771.193970f, -456.845703f, -3759.605713f}, 36, 0.112621f, 0, {-0.458607f, 0.017887f, 0.888459f}}, {{721.380127f, -460.363007f, -3692.121826f}, 37, 0.115110f, 0, {-0.593364f, -0.041897f, 0.803843f}}, {{671.566284f, -463.880310f, -3624.637939f}, 38, 0.117598f, 0, {-0.646996f, -0.120850f, 0.752856f}}, {{614.249329f, -480.287415f, -3567.320801f}, 39, 0.120049f, 0, {-0.693052f, -0.198388f, 0.693052f}}, {{556.932373f, -496.694519f, -3510.003906f}, 40, 0.122500f, 0, {-0.581790f, -0.214931f, 0.784427f}}, {{511.078796f, -519.401855f, -3424.028564f}, 41, 0.125466f, 0, {-0.458308f, -0.226961f, 0.859327f}}, {{465.225250f, -542.109253f, -3338.053223f}, 42, 0.128431f, 0, {-0.213697f, -0.168231f, 0.962305f}}, {{469.185516f, -550.340576f, -3253.749512f}, 43, 0.130945f, 0, {0.046703f, -0.097071f, 0.994181f}}, {{473.145782f, -558.571960f, -3169.445801f}, 44, 0.133458f, 0, {0.005372f, -0.048388f, 0.998814f}}, {{468.437653f, -558.507446f, -3038.681641f}, 45, 0.137336f, 0, {-0.518075f, 0.102045f, 0.849226f}}, {{397.589508f, -544.010986f, -2999.770752f}, 46, 0.139770f, 0, {-0.979813f, 0.046403f, 0.194459f}}, {{316.773438f, -551.254211f, -3008.424316f}, 47, 0.142189f, 0, {-0.990391f, -0.088765f, -0.106050f}}, {{235.957397f, -558.497437f, -3017.078125f}, 48, 0.144607f, 0, {-0.972939f, -0.100927f, 0.207856f}}, {{167.177032f, -566.750854f, -2976.956055f}, 49, 0.146980f, 0, {-0.859176f, -0.103099f, 0.501187f}}, {{98.396667f, -575.004333f, -2936.834229f}, 50, 0.149353f, 0, {-0.988625f, 0.006210f, 0.150275f}}, {{-15.070480f, -561.573425f, -2963.028320f}, 51, 0.152827f, 0, {-0.967957f, 0.114575f, -0.223455f}}, {{-128.537628f, -548.142517f, -2989.222412f}, 52, 0.156302f, 0, {-0.977309f, 0.092392f, -0.190605f}}, {{-215.679855f, -541.945007f, -3003.150391f}, 53, 0.158924f, 0, {-0.985041f, 0.070056f, -0.157438f}}, {{-302.822083f, -535.747498f, -3017.078125f}, 54, 0.161546f, 0, {-0.979035f, -0.055082f, 0.196104f}}, {{-394.529236f, -554.683228f, -2959.761230f}, 55, 0.164800f, 0, {-0.835290f, -0.172471f, 0.522057f}}, {{-486.236389f, -573.619019f, -2902.444092f}, 56, 0.168054f, 0, {-0.857481f, -0.159614f, 0.489131f}}, {{-589.406921f, -590.827759f, -2848.948242f}, 57, 0.171536f, 0, {-0.878179f, -0.146479f, 0.455352f}}, {{-692.577515f, -608.036499f, -2795.452393f}, 58, 0.175019f, 0, {-0.878179f, -0.146479f, 0.455352f}}, {{-795.748047f, -625.245239f, -2741.956543f}, 59, 0.178501f, 0, {-0.869643f, -0.217934f, 0.442974f}}, {{-910.381958f, -663.822815f, -2684.639648f}, 60, 0.182468f, 0, {-0.856470f, -0.288226f, 0.428235f}}, {{-1025.015869f, -702.400330f, -2627.322754f}, 61, 0.186435f, 0, {-0.856470f, -0.288226f, 0.428235f}}, {{-1139.649780f, -740.977905f, -2570.005859f}, 62, 0.190402f, 0, {-0.814513f, -0.324603f, 0.480834f}}, {{-1210.351074f, -774.043579f, -2521.144043f}, 63, 0.193131f, 0, {-0.767791f, -0.359081f, 0.530620f}}, {{-1281.052368f, -807.109192f, -2472.282471f}, 64, 0.195861f, 0, {-0.689851f, -0.361742f, 0.627095f}}, {{-1336.448486f, -840.168091f, -2406.510254f}, 65, 0.198591f, 0, {-0.601293f, -0.358835f, 0.713922f}}, {{-1391.844482f, -873.226929f, -2340.737793f}, 66, 0.201322f, 0, {-0.252272f, -0.578266f, 0.775865f}}, {{-1380.381104f, -930.073486f, -2283.420898f}, 67, 0.203739f, 0, {0.140592f, -0.697194f, 0.702962f}}, {{-1368.917725f, -986.920105f, -2226.104004f}, 68, 0.206155f, 0, {0.632361f, -0.547331f, 0.548223f}}, {{-1231.356934f, -1021.929626f, -2191.713867f}, 69, 0.210484f, 0, {0.982435f, -0.183129f, 0.035838f}}, {{-1127.824341f, -1034.446167f, -2209.202637f}, 70, 0.213618f, 0, {0.979099f, -0.118368f, -0.165389f}}, {{-1024.291748f, -1046.962646f, -2226.691162f}, 71, 0.216752f, 0, {0.979099f, -0.118367f, -0.165389f}}, {{-920.759155f, -1059.479126f, -2244.179932f}, 72, 0.219887f, 0, {0.972006f, -0.083282f, -0.219701f}}, {{-794.813049f, -1065.750854f, -2279.976807f}, 73, 0.223772f, 0, {0.960800f, -0.047845f, -0.273081f}}, {{-668.866882f, -1072.022583f, -2315.773438f}, 74, 0.227657f, 0, {0.960800f, -0.047845f, -0.273081f}}, {{-542.920776f, -1078.294312f, -2351.570313f}, 75, 0.231542f, 0, {0.968735f, -0.000188f, -0.248098f}}, {{-440.507599f, -1073.302124f, -2374.957520f}, 76, 0.234660f, 0, {0.973804f, 0.047469f, -0.222378f}}, {{-338.094421f, -1068.309937f, -2398.344482f}, 77, 0.237777f, 0, {0.973804f, 0.047469f, -0.222378f}}, {{-235.681259f, -1063.317749f, -2421.731689f}, 78, 0.240894f, 0, {0.967351f, -0.136157f, -0.213758f}}, {{-103.032486f, -1108.361084f, -2450.015137f}, 79, 0.245130f, 0, {0.928169f, -0.315177f, -0.197905f}}, {{29.616302f, -1153.404541f, -2478.298584f}, 80, 0.249366f, 0, {0.924400f, -0.368197f, -0.099574f}}, {{144.250229f, -1205.939209f, -2478.298584f}, 81, 0.253103f, 0, {0.909082f, -0.416617f, -0.000000f}}, {{258.884155f, -1258.473999f, -2478.298584f}, 82, 0.256841f, 0, {0.742470f, -0.591098f, 0.315185f}}, {{304.956848f, -1325.989258f, -2419.994141f}, 83, 0.259817f, 0, {0.458886f, -0.672455f, 0.580714f}}, {{351.029541f, -1393.504517f, -2361.689941f}, 84, 0.262792f, 0, {0.458886f, -0.672455f, 0.580714f}}, {{397.102203f, -1461.019775f, -2303.385498f}, 85, 0.265768f, 0, {0.224956f, -0.338760f, 0.913584f}}, {{391.041840f, -1453.473633f, -2218.891113f}, 86, 0.268289f, 0, {-0.071259f, 0.088728f, 0.993504f}}, {{384.981476f, -1445.927612f, -2134.396729f}, 87, 0.270810f, 0, {-0.590396f, 0.105974f, 0.800126f}}, {{281.810913f, -1435.849609f, -2094.274902f}, 88, 0.274104f, 0, {-0.928166f, 0.090666f, 0.360953f}}, {{178.640381f, -1425.771606f, -2054.153076f}, 89, 0.277399f, 0, {-0.993462f, 0.111404f, 0.024954f}}, {{41.079681f, -1408.386597f, -2100.006592f}, 90, 0.281727f, 0, {-0.882990f, -0.010025f, -0.469285f}}, {{-33.432373f, -1421.547729f, -2157.323730f}, 91, 0.284541f, 0, {-0.784968f, -0.138650f, -0.603822f}}, {{-107.944427f, -1434.708862f, -2214.640625f}, 92, 0.287354f, 0, {-0.895153f, -0.178637f, -0.408400f}}, {{-193.919876f, -1453.479980f, -2231.835693f}, 93, 0.290012f, 0, {-0.958853f, -0.209347f, -0.191770f}}, {{-279.895325f, -1472.250977f, -2249.030762f}, 94, 0.292670f, 0, {-0.938125f, -0.342989f, -0.047754f}}, {{-394.036774f, -1532.283325f, -2236.314453f}, 95, 0.296511f, 0, {-0.735442f, -0.438692f, 0.516405f}}, {{-459.176453f, -1580.226563f, -2114.486084f}, 96, 0.300845f, 0, {-0.259687f, -0.326428f, 0.908849f}}, {{-467.381927f, -1620.545654f, -1991.923340f}, 97, 0.304677f, 0, {-0.063468f, -0.311863f, 0.948005f}}, {{-475.587402f, -1660.864868f, -1869.360596f}, 98, 0.308509f, 0, {-0.030733f, -0.199912f, 0.979332f}}, {{-475.315948f, -1670.283936f, -1759.007202f}, 99, 0.311792f, 0, {0.002451f, -0.085045f, 0.996374f}}, {{-475.044464f, -1679.703125f, -1648.653809f}, 100, 0.315074f, 0, {0.002451f, -0.085045f, 0.996374f}}, {{-474.773010f, -1689.122192f, -1538.300415f}, 101, 0.318357f, 0, {0.001687f, -0.257635f, 0.966241f}}, {{-474.666565f, -1740.720093f, -1427.552612f}, 102, 0.321978f, 0, {0.000871f, -0.422318f, 0.906447f}}, {{-474.560150f, -1792.317993f, -1316.804810f}, 103, 0.325600f, 0, {0.000871f, -0.422318f, 0.906447f}}, {{-474.453735f, -1843.915894f, -1206.057007f}, 104, 0.329221f, 0, {0.000871f, -0.422318f, 0.906447f}}, {{-474.347290f, -1895.513794f, -1095.309204f}, 105, 0.332842f, 0, {0.000437f, -0.501382f, 0.865226f}}, {{-474.347290f, -1966.429443f, -994.787109f}, 106, 0.336488f, 0, {0.000000f, -0.576460f, 0.817125f}}, {{-474.347290f, -2037.345215f, -894.265076f}, 107, 0.340135f, 0, {0.000000f, -0.576460f, 0.817125f}}, {{-474.347290f, -2108.260742f, -793.743042f}, 108, 0.343781f, 0, {0.000000f, -0.576460f, 0.817125f}}, {{-474.347290f, -2179.176514f, -693.220947f}, 109, 0.347427f, 0, {0.000000f, -0.298325f, 0.954464f}}, {{-474.347290f, -2178.230469f, -582.127197f}, 110, 0.350720f, 0, {0.000000f, 0.008517f, 0.999964f}}, {{-474.347290f, -2177.284180f, -471.033447f}, 111, 0.354013f, 0, {0.000000f, 0.017854f, 0.999841f}}, {{-474.347290f, -2174.130859f, -355.095459f}, 112, 0.357451f, 0, {0.000000f, 0.027187f, 0.999630f}}, {{-474.347290f, -2170.977783f, -239.157471f}, 113, 0.360888f, 0, {0.000000f, 0.027186f, 0.999630f}}, {{-474.347290f, -2167.824707f, -123.219482f}, 114, 0.364326f, 0, {0.000000f, 0.027187f, 0.999630f}}, {{-474.347290f, -2164.671387f, -7.281494f}, 115, 0.367763f, 0, {-0.008384f, -0.434077f, 0.900837f}}, {{-476.217407f, -2264.906494f, 68.206299f}, 116, 0.371483f, 0, {-0.014902f, -0.798719f, 0.601520f}}, {{-478.087524f, -2365.141846f, 143.694092f}, 117, 0.375203f, 0, {-0.014902f, -0.798719f, 0.601520f}}, {{-479.957642f, -2465.376953f, 219.181885f}, 118, 0.378922f, 0, {-0.009883f, -0.857747f, 0.513977f}}, {{-480.606445f, -2589.195557f, 276.600220f}, 119, 0.382968f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-481.255280f, -2713.014404f, 334.018585f}, 120, 0.387013f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-481.904083f, -2836.833008f, 391.436951f}, 121, 0.391058f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-482.552917f, -2960.651611f, 448.855286f}, 122, 0.395104f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-483.201721f, -3084.470459f, 506.273651f}, 123, 0.399149f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-483.850555f, -3208.289063f, 563.692017f}, 124, 0.403194f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-484.499359f, -3332.107910f, 621.110352f}, 125, 0.407240f, 0, {-0.004754f, -0.907192f, 0.420691f}}, {{-485.148193f, -3455.926514f, 678.528687f}, 126, 0.411285f, 0, {-0.004754f, -0.907191f, 0.420691f}}, {{-485.796997f, -3579.745117f, 735.947021f}, 127, 0.415331f, 0, {-0.002412f, -0.821995f, 0.569489f}}, {{-485.796997f, -3681.967041f, 836.578552f}, 128, 0.419582f, 0, {0.000000f, -0.712629f, 0.701541f}}, {{-485.796997f, -3784.189209f, 937.210083f}, 129, 0.423834f, 0, {0.000000f, -0.712629f, 0.701541f}}, {{-485.796997f, -3886.411133f, 1037.841553f}, 130, 0.428085f, 0, {0.013709f, -0.581754f, 0.813249f}}, {{-481.892029f, -3949.093262f, 1168.068604f}, 131, 0.432371f, 0, {0.027009f, -0.433547f, 0.900726f}}, {{-477.987030f, -4011.775635f, 1298.295776f}, 132, 0.436656f, 0, {0.027009f, -0.433547f, 0.900726f}}, {{-474.082062f, -4074.457764f, 1428.522827f}, 133, 0.440941f, 0, {0.027009f, -0.433547f, 0.900726f}}, {{-470.177094f, -4137.140137f, 1558.750000f}, 134, 0.445226f, 0, {0.027009f, -0.433547f, 0.900726f}}, {{-466.272125f, -4199.822266f, 1688.977051f}, 135, 0.449512f, 0, {0.027009f, -0.433546f, 0.900726f}}, {{-462.367126f, -4262.504395f, 1819.204102f}, 1, 0.453797f, 0, {0.027009f, -0.433546f, 0.900726f}}, {{-458.462158f, -4325.186523f, 1949.431152f}, 136, 0.458082f, 1, {-0.409737f, 0.147583f, 0.900186f}}, {{-549.379272f, -4231.272461f, 2010.614746f}, 137, 0.462360f, 0, {-0.629955f, 0.650720f, 0.423934f}}, {{-640.296326f, -4137.358398f, 2071.798340f}, 138, 0.466638f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-731.213379f, -4043.444580f, 2132.981934f}, 139, 0.470915f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-822.130493f, -3949.530518f, 2194.165771f}, 140, 0.475193f, 0, {-0.629954f, 0.650720f, 0.423935f}}, {{-913.047607f, -3855.616455f, 2255.349365f}, 141, 0.479471f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-1003.964661f, -3761.702637f, 2316.532959f}, 142, 0.483748f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-1094.881836f, -3667.788574f, 2377.716553f}, 143, 0.488026f, 0, {-0.629955f, 0.650720f, 0.423934f}}, {{-1185.798828f, -3573.874512f, 2438.900146f}, 144, 0.492304f, 0, {-0.629954f, 0.650720f, 0.423935f}}, {{-1276.715942f, -3479.960449f, 2500.083984f}, 145, 0.496581f, 0, {-0.629955f, 0.650719f, 0.423935f}}, {{-1367.633057f, -3386.046631f, 2561.267578f}, 146, 0.500859f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-1458.550049f, -3292.132568f, 2622.451172f}, 147, 0.505137f, 0, {-0.629954f, 0.650720f, 0.423934f}}, {{-1549.467163f, -3198.218506f, 2683.634766f}, 148, 0.509414f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-1640.384277f, -3104.304688f, 2744.818359f}, 149, 0.513692f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-1731.301392f, -3010.390625f, 2806.001953f}, 150, 0.517970f, 0, {-0.629954f, 0.650720f, 0.423935f}}, {{-1822.218506f, -2916.476563f, 2867.185791f}, 151, 0.522247f, 0, {-0.629954f, 0.650720f, 0.423935f}}, {{-1913.135620f, -2822.562500f, 2928.369385f}, 152, 0.526525f, 0, {-0.629954f, 0.650720f, 0.423934f}}, {{-2004.052612f, -2728.648438f, 2989.552979f}, 153, 0.530803f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-2094.969727f, -2634.734619f, 3050.736572f}, 154, 0.535080f, 0, {-0.629955f, 0.650720f, 0.423935f}}, {{-2185.886719f, -2540.820557f, 3111.920166f}, 155, 0.539358f, 0, {-0.629954f, 0.650720f, 0.423936f}}, {{-2276.803711f, -2446.906738f, 3173.104004f}, 156, 0.543636f, 0, {-0.629955f, 0.650719f, 0.423935f}}, {{-2367.721191f, -2352.992676f, 3234.287598f}, 157, 0.547913f, 0, {-0.629955f, 0.650720f, 0.423934f}}, {{-2458.638184f, -2259.078613f, 3295.471191f}, 158, 0.552191f, 0, {-0.629954f, 0.650721f, 0.423935f}}, {{-2549.555176f, -2165.164551f, 3356.654785f}, 159, 0.556469f, 0, {-0.822982f, 0.567890f, 0.014163f}}, {{-2675.062988f, -2110.778809f, 3297.203613f}, 160, 0.560889f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-2800.571045f, -2056.393066f, 3237.752441f}, 161, 0.565310f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-2926.079102f, -2002.007324f, 3178.301270f}, 162, 0.569731f, 0, {-0.841512f, 0.364648f, -0.398610f}}, {{-3051.586914f, -1947.621582f, 3118.850342f}, 163, 0.574151f, 0, {-0.841511f, 0.364648f, -0.398610f}}, {{-3177.094727f, -1893.235840f, 3059.399170f}, 164, 0.578572f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-3302.602783f, -1838.850098f, 2999.947998f}, 165, 0.582992f, 0, {-0.841512f, 0.364647f, -0.398611f}}, {{-3428.110840f, -1784.464478f, 2940.496826f}, 166, 0.587413f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-3553.618652f, -1730.078735f, 2881.045654f}, 167, 0.591834f, 0, {-0.841511f, 0.364648f, -0.398610f}}, {{-3679.126465f, -1675.692993f, 2821.594727f}, 168, 0.596254f, 0, {-0.841512f, 0.364648f, -0.398610f}}, {{-3804.634521f, -1621.307251f, 2762.143555f}, 169, 0.600675f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-3930.142578f, -1566.921509f, 2702.692383f}, 170, 0.605095f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4055.650391f, -1512.535767f, 2643.241211f}, 171, 0.609516f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4181.158203f, -1458.150146f, 2583.790039f}, 172, 0.613937f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4306.666016f, -1403.764404f, 2524.338867f}, 173, 0.618357f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4432.174316f, -1349.378662f, 2464.887695f}, 174, 0.622778f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4557.682129f, -1294.992920f, 2405.436523f}, 175, 0.627199f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-4683.190430f, -1240.607178f, 2345.985352f}, 176, 0.631619f, 0, {-0.841512f, 0.364648f, -0.398610f}}, {{-4808.698242f, -1186.221436f, 2286.534424f}, 177, 0.636040f, 0, {-0.841511f, 0.364648f, -0.398610f}}, {{-4934.206055f, -1131.835693f, 2227.083252f}, 178, 0.640460f, 0, {-0.841511f, 0.364648f, -0.398611f}}, {{-5059.713867f, -1077.449951f, 2167.632080f}, 179, 0.644881f, 0, {-0.709433f, 0.309194f, -0.633327f}}, {{-5137.514160f, -1043.228638f, 2045.793945f}, 180, 0.649284f, 0, {-0.523715f, 0.230361f, -0.820156f}}, {{-5215.314453f, -1009.007385f, 1923.955933f}, 181, 0.653687f, 0, {-0.523714f, 0.230362f, -0.820157f}}, {{-5293.114258f, -974.786072f, 1802.117798f}, 182, 0.658090f, 0, {-0.523714f, 0.230362f, -0.820157f}}, {{-5370.914551f, -940.564758f, 1680.279785f}, 183, 0.662493f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-5448.714844f, -906.343506f, 1558.441650f}, 184, 0.666896f, 0, {-0.523715f, 0.230361f, -0.820156f}}, {{-5526.515137f, -872.122192f, 1436.603516f}, 185, 0.671300f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-5604.315430f, -837.900879f, 1314.765503f}, 186, 0.675703f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-5682.115723f, -803.679565f, 1192.927490f}, 187, 0.680106f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-5759.916016f, -769.458313f, 1071.089355f}, 188, 0.684509f, 0, {-0.523713f, 0.230362f, -0.820157f}}, {{-5837.715820f, -735.237000f, 949.251221f}, 189, 0.688912f, 0, {-0.523714f, 0.230362f, -0.820157f}}, {{-5915.516113f, -701.015747f, 827.413208f}, 190, 0.693315f, 0, {-0.523715f, 0.230361f, -0.820156f}}, {{-5993.316406f, -666.794434f, 705.575073f}, 191, 0.697718f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-6071.116699f, -632.573120f, 583.737061f}, 192, 0.702121f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-6148.916992f, -598.351807f, 461.898926f}, 193, 0.706524f, 0, {-0.523714f, 0.230362f, -0.820157f}}, {{-6226.716797f, -564.130554f, 340.060913f}, 194, 0.710927f, 0, {-0.523714f, 0.230362f, -0.820157f}}, {{-6304.517090f, -529.909241f, 218.222778f}, 195, 0.715330f, 0, {-0.523715f, 0.230361f, -0.820156f}}, {{-6382.317383f, -495.687988f, 96.384766f}, 2, 0.719733f, 0, {-0.523715f, 0.230362f, -0.820156f}}, {{-6460.117676f, -461.466644f, -25.453491f}, 196, 0.724137f, 1, {-0.327455f, 0.163320f, -0.930645f}}, {{-6476.805664f, -448.592804f, -171.473801f}, 197, 0.728509f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6493.493652f, -435.718994f, -317.494110f}, 198, 0.732882f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6510.181641f, -422.845154f, -463.514374f}, 199, 0.737255f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6526.869629f, -409.971313f, -609.534729f}, 200, 0.741628f, 0, {-0.113115f, 0.087260f, -0.989743f}}, {{-6543.558105f, -397.097504f, -755.555054f}, 201, 0.746001f, 0, {-0.113115f, 0.087260f, -0.989743f}}, {{-6560.246094f, -384.223663f, -901.575256f}, 202, 0.750374f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6576.934082f, -371.349854f, -1047.595581f}, 203, 0.754746f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6593.622070f, -358.476013f, -1193.615967f}, 204, 0.759119f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6610.310059f, -345.602173f, -1339.636230f}, 205, 0.763492f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6626.998047f, -332.728333f, -1485.656616f}, 206, 0.767865f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6643.686035f, -319.854523f, -1631.676758f}, 207, 0.772238f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6660.374023f, -306.980713f, -1777.697021f}, 208, 0.776610f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6677.062012f, -294.106873f, -1923.717407f}, 209, 0.780983f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6693.750000f, -281.233032f, -2069.737793f}, 210, 0.785356f, 0, {-0.113115f, 0.087260f, -0.989743f}}, {{-6710.438477f, -268.359192f, -2215.758301f}, 211, 0.789729f, 0, {-0.113115f, 0.087260f, -0.989743f}}, {{-6727.126465f, -255.485367f, -2361.778320f}, 212, 0.794102f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6743.814453f, -242.611542f, -2507.798828f}, 213, 0.798475f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6760.502441f, -229.737701f, -2653.818848f}, 214, 0.802847f, 0, {-0.113113f, 0.087260f, -0.989743f}}, {{-6777.190430f, -216.863876f, -2799.839111f}, 215, 0.807220f, 0, {0.304025f, 0.094053f, -0.948010f}}, {{-6681.774902f, -204.815887f, -2905.530029f}, 216, 0.811456f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-6586.359863f, -192.767883f, -3011.220947f}, 217, 0.815691f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-6490.944336f, -180.719894f, -3116.911621f}, 218, 0.819927f, 0, {0.667718f, 0.084312f, -0.739624f}}, {{-6395.528809f, -168.671906f, -3222.602539f}, 219, 0.824162f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-6300.113770f, -156.623901f, -3328.293457f}, 220, 0.828397f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-6204.698242f, -144.575912f, -3433.984375f}, 221, 0.832633f, 0, {0.667718f, 0.084312f, -0.739625f}}, {{-6109.282715f, -132.527924f, -3539.675293f}, 222, 0.836868f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-6013.867676f, -120.479927f, -3645.366211f}, 223, 0.841104f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-5918.452148f, -108.431938f, -3751.057129f}, 224, 0.845339f, 0, {0.667718f, 0.084312f, -0.739625f}}, {{-5823.036621f, -96.383942f, -3856.748047f}, 225, 0.849575f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-5727.621582f, -84.335953f, -3962.438721f}, 226, 0.853810f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-5632.206055f, -72.287949f, -4068.129639f}, 227, 0.858045f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-5536.791016f, -60.239975f, -4173.820313f}, 228, 0.862281f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-5441.375000f, -48.191971f, -4279.511719f}, 229, 0.866516f, 0, {0.667718f, 0.084312f, -0.739625f}}, {{-5345.959961f, -36.143982f, -4385.202148f}, 230, 0.870752f, 0, {0.667717f, 0.084312f, -0.739625f}}, {{-5250.544434f, -24.095978f, -4490.893066f}, 231, 0.874987f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-5155.129395f, -12.048004f, -4596.583984f}, 232, 0.879223f, 0, {0.667717f, 0.084312f, -0.739626f}}, {{-5059.713867f, 0.000000f, -4702.274902f}, 233, 0.883458f, 0, {0.736921f, 0.042384f, -0.674649f}}, {{-4943.013672f, 0.000000f, -4790.350586f}, 234, 0.887791f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4826.312988f, 0.000000f, -4878.426270f}, 235, 0.892125f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4709.612793f, 0.000000f, -4966.501953f}, 236, 0.896458f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4592.912109f, 0.000000f, -5054.577637f}, 237, 0.900792f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4476.211914f, 0.000000f, -5142.653320f}, 238, 0.905125f, 0, {0.798188f, 0.000000f, -0.602408f}}, {{-4359.511719f, 0.000000f, -5230.729492f}, 239, 0.909459f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4242.811035f, 0.000000f, -5318.804688f}, 240, 0.913792f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-4126.110840f, 0.000000f, -5406.880859f}, 241, 0.918126f, 0, {0.798188f, 0.000000f, -0.602408f}}, {{-4009.410400f, 0.000000f, -5494.956543f}, 242, 0.922459f, 0, {0.798190f, 0.000000f, -0.602406f}}, {{-3892.709961f, 0.000000f, -5583.032227f}, 243, 0.926793f, 0, {0.798189f, 0.000000f, -0.602407f}}, {{-3776.009766f, 0.000000f, -5671.107910f}, 244, 0.931126f, 0, {0.798189f, 0.000000f, -0.602407f}}, {{-3659.309326f, 0.000000f, -5759.183594f}, 245, 0.935460f, 0, {0.983213f, 0.058328f, -0.172889f}}, {{-3521.423584f, 15.053885f, -5716.354980f}, 246, 0.939762f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-3383.537842f, 30.107769f, -5673.526367f}, 247, 0.944065f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-3245.652100f, 45.161652f, -5630.697754f}, 248, 0.948368f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-3107.766113f, 60.215538f, -5587.869141f}, 249, 0.952671f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2969.880371f, 75.269424f, -5545.040527f}, 250, 0.956973f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2831.994629f, 90.323303f, -5502.211914f}, 251, 0.961276f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2694.108887f, 105.377190f, -5459.383301f}, 252, 0.965579f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2556.223145f, 120.431076f, -5416.554688f}, 253, 0.969881f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2418.337402f, 135.484955f, -5373.726074f}, 254, 0.974184f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2280.451660f, 150.538849f, -5330.897461f}, 255, 0.978487f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2142.565918f, 165.592728f, -5288.068848f}, 256, 0.982789f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-2004.680176f, 180.646606f, -5245.240234f}, 257, 0.987092f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-1866.794434f, 195.700485f, -5202.411621f}, 258, 0.991395f, 0, {0.949844f, 0.103701f, 0.295030f}}, {{-1728.908691f, 210.754379f, -5159.583008f}, 0, 0.995697f, 0, {0.949844f, 0.103701f, 0.295030f}}};
            }
#if 0
            FILE * f = fopen("1.txt", "w");
            for(size_t q = 0; q < track.size(); ++q)
            {
                fprintf(f, "{{%ff, %ff, %ff}, %d, %ff, %d, {%ff, %ff, %ff}},", track[q].vert.x, track[q].vert.y, track[q].vert.z, track[q].index, track[q].weight, track[q].isCheckpoint, track[q].dir.x, track[q].dir.y, track[q].dir.z);
            }
            fclose(f);
#endif

            std::vector<Ogre::Vector3> positions(track.size());
            std::vector<Ogre::Vector3> dirs(track.size());
            std::vector<Ogre::Real> weights(track.size());
            std::vector<bool> isCheckpoints(track.size());

            size_t nextIndex = 0;
            for(size_t q = 0; q < track.size(); ++q)
            {
                //if(q != 0) nextIndex = track[nextIndex].index;
                nextIndex = q;
                positions[q] = track[nextIndex].vert;
                dirs[q] = track[nextIndex].dir;
                weights[q] = track[nextIndex].weight;
                isCheckpoints[q] = track[nextIndex].isCheckpoint;
            }

            if (gameState.isLugeTrack())
            {
                std::fill(isCheckpoints.begin(), isCheckpoints.end(), false);
                isCheckpoints[133] = true;
            }


            gameState.setLLTObject(NULL);

            if(isDebugLLT)
            {
                if(!positions.empty())
                {
                    gameState.setLLTObject(sceneMgr->createManualObject("llt")); 
                    Ogre::SceneNode* lltNode = sceneMgr->getRootSceneNode()->createChildSceneNode("node_llt"); 
                     
                    gameState.getLLTObject()->begin("Basewhite", Ogre::RenderOperation::OT_LINE_LIST); 
                    for(size_t q = 0; q < positions.size(); ++q)
                    {
                        if(q !=  positions.size() - 1)
                        {
                            gameState.getLLTObject()->position(positions[q]); 
                            gameState.getLLTObject()->position(positions[q + 1]); 
                        }
                        else
                        {
                            gameState.getLLTObject()->position(positions[q]); 
                            gameState.getLLTObject()->position(positions[0]); 
                        }
                    }
                    gameState.getLLTObject()->end(); 
                    gameState.getLLTObject()->setCastShadows(false);
                    gameState.getLLTObject()->setVisible(false);
                     
                    lltNode->attachObject(gameState.getLLTObject());
                }

                //checkpoints
                if(!isCheckpoints.empty())
                {
                    for(size_t q = 0; q < isCheckpoints.size(); ++q)
                    {
                        if(isCheckpoints[q])
                        {
#if 1
                            Ogre::Real scale = 0.1f;
                            Ogre::String debugSphereName = mNameGenNodes.generate();
                            Ogre::Entity * debugSphere = sceneMgr->createEntity(debugSphereName, Ogre::SceneManager::PT_SPHERE);
                            debugSphere->setMaterialName("BaseWhiteNoLighting");
                            Ogre::SceneNode * debugSphereNode = sceneMgr->getRootSceneNode()->createChildSceneNode(debugSphereName);
                            debugSphereNode->attachObject(debugSphere);
                            debugSphereNode->setPosition(positions[q]);
                            debugSphereNode->setScale(scale, scale, scale);
                            debugSphere->setCastShadows(false);
#else

                            Ogre::Real widthLeft = 70.0f;
                            Ogre::Real widthRight = 30.0f;
                            Ogre::Real heightUp = 50.0f;
                            Ogre::Real heightDown = 20.0f;
                            Ogre::String debugPlaneName = mNameGenNodes.generate();

                            Ogre::ManualObject * manual =  sceneMgr->createManualObject(debugPlaneName); 
                            Ogre::SceneNode* lltPlaneNode = sceneMgr->getRootSceneNode()->createChildSceneNode(debugPlaneName); 
                            
                            Ogre::Vector3 sideVec = dirs[q].crossProduct(Ogre::Vector3::UNIT_Y);

                            manual->begin("Basewhite", Ogre::RenderOperation::OT_TRIANGLE_LIST); 

                            manual->position((positions[q] - sideVec * widthLeft) - Ogre::Vector3(0.0f, heightDown, 0.0f));
                            manual->position((positions[q] + sideVec * widthRight) - Ogre::Vector3(0.0f, heightDown, 0.0f));
                            manual->position((positions[q] + sideVec * widthRight) + Ogre::Vector3(0.0f, heightUp, 0.0f));

                            manual->position((positions[q] + sideVec * widthRight) + Ogre::Vector3(0.0f, heightUp, 0.0f));
                            manual->position((positions[q] - sideVec * widthLeft) + Ogre::Vector3(0.0f, heightUp, 0.0f));
                            manual->position((positions[q] - sideVec * widthLeft) - Ogre::Vector3(0.0f, heightDown, 0.0f));

                            manual->end(); 
                            manual->setCastShadows(false);
                            lltPlaneNode->attachObject(manual);
#endif
                        }
                    }
                }

                //dirs
                if(!dirs.empty())
                {
                    for(size_t q = 0; q < dirs.size(); ++q)
                    {
                        Ogre::Real length = 5.0f;
                        Ogre::String debugDirName = mNameGenNodes.generate();

                        Ogre::ManualObject * manual =  sceneMgr->createManualObject(debugDirName); 
                        Ogre::SceneNode* lltDirNode = sceneMgr->getRootSceneNode()->createChildSceneNode(debugDirName); 
                         
                        manual->begin("Basewhite", Ogre::RenderOperation::OT_LINE_LIST); 


                        manual->position(positions[q]);
                        manual->position(positions[q] + dirs[q] * length);

                        manual->end(); 
                        manual->setCastShadows(false);
                        lltDirNode->attachObject(manual);
                    }
                }
            }

            for(int w = 0; w < GameState::mAIMax; ++w)
            {
                gameState.getAICar(w).getLapUtils().setData(positions, dirs, weights, isCheckpoints, sceneMgr, gameState.isLugeTrack(), isDebugLLT);
            }
            
            for(int w = 0; w < gameState.getMaxMultiplayerAI(); ++w)
            {
                gameState.getMultiplayerCarAI(w).getLapUtils().setData(positions, dirs, weights, isCheckpoints, sceneMgr, gameState.isLugeTrack(), isDebugLLT);
            }

            for(int w = 0; w < gameState.getMaxMultiplayerHumans(); ++w)
            {
                gameState.getMultiplayerCarHuman(w).getLapUtils().setData(positions, dirs, weights, isCheckpoints, sceneMgr, gameState.isLugeTrack(), isDebugLLT);
            }
            gameState.getPlayerCar().getLapUtils().setData(positions, dirs, weights, isCheckpoints, sceneMgr, gameState.isLugeTrack(), isDebugLLT);
        }

        fileToLoad->close();
    }
    else {assert(false && "No LLT file");}
}