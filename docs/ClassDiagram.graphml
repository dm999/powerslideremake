<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yFiles for Java 2.8-->
  <key for="graphml" id="d0" yfiles.type="resources"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key attr.name="Description" attr.type="string" for="graph" id="d7"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d7"/>
    <node id="n0" yfiles.foldertype="group">
      <data key="d4"/>
      <data key="d6">
        <y:ProxyAutoBoundsNode>
          <y:Realizers active="0">
            <y:GroupNode>
              <y:Geometry height="426.3500071853141" width="733.4791822159068" x="8711.368897536271" y="-8342.702026492378"/>
              <y:Fill color="#F5F5F5" transparent="false"/>
              <y:BorderStyle color="#000000" type="dashed" width="1.0"/>
              <y:NodeLabel alignment="right" autoSizePolicy="node_width" backgroundColor="#EBEBEB" borderDistance="0.0" fontFamily="Dialog" fontSize="15" fontStyle="plain" hasLineColor="false" height="22.37646484375" modelName="internal" modelPosition="t" textColor="#000000" visible="true" width="733.4791822159068" x="0.0" y="0.0">Relations description:</y:NodeLabel>
              <y:Shape type="roundrectangle"/>
              <y:State closed="false" innerGraphDisplayEnabled="false"/>
              <y:Insets bottom="15" bottomF="15.0" left="15" leftF="15.0" right="15" rightF="15.0" top="15" topF="15.0"/>
              <y:BorderInsets bottom="101" bottomF="101.3500071853141" left="0" leftF="0.0" right="101" rightF="101.30635748455916" top="3" topF="2.6235351562509095"/>
            </y:GroupNode>
            <y:GroupNode>
              <y:Geometry height="50.0" width="176.76501598579057" x="4042.260559074197" y="7101.991042179014"/>
              <y:Fill color="#F5F5F5" transparent="false"/>
              <y:BorderStyle color="#000000" type="dashed" width="1.0"/>
              <y:NodeLabel alignment="right" autoSizePolicy="node_width" backgroundColor="#EBEBEB" borderDistance="0.0" fontFamily="Dialog" fontSize="15" fontStyle="plain" hasLineColor="false" height="22.37646484375" modelName="internal" modelPosition="t" textColor="#000000" visible="true" width="176.76501598579057" x="0.0" y="0.0">Relations description:</y:NodeLabel>
              <y:Shape type="roundrectangle"/>
              <y:State closed="true" innerGraphDisplayEnabled="false"/>
              <y:Insets bottom="15" bottomF="15.0" left="15" leftF="15.0" right="15" rightF="15.0" top="15" topF="15.0"/>
              <y:BorderInsets bottom="0" bottomF="0.0" left="0" leftF="0.0" right="0" rightF="0.0" top="0" topF="0.0"/>
            </y:GroupNode>
          </y:Realizers>
        </y:ProxyAutoBoundsNode>
      </data>
      <graph edgedefault="directed" id="n0:">
        <node id="n0::n0">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="51.51163907637647" x="8768.614126812083" y="-8302.702026492372"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="31.3515625" x="10.080038288188007" y="5.6494140625">Base</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n1">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="57.65782166962663" x="8765.541035515458" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="45.349609375" x="6.154106147312632" y="5.6494140625">Derived</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n2">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="8983.301876597283" y="-8302.702026492372"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="39.34375" x="5.315671714031851" y="5.6494140625">Owner</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n3">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="8983.301876597283" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="42.021484375" x="3.9768045265318506" y="5.6494140625">Owned</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n4">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="58.27243992895228" x="9165.113501748261" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="53.359375" x="2.4565324644754583" y="5.6494140625">Instancer</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n5">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="58.27243992895228" x="9165.113501748261" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="56.037109375" x="1.1176652769754583" y="5.6494140625">Instanced</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n6">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="37.02213001776204" x="9255.751109989824" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="35.341796875" x="0.8401665713809052" y="5.6494140625">Caller</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n7">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="39.83098202486667" x="9254.346683986269" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="38.01953125" x="0.9057253874325397" y="5.6494140625">Called</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n8">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="121.35025790408531" x="8765.541035515458" y="-8122.702026492377"/>
              <y:Fill color="#00CCFF" transparent="false"/>
              <y:BorderStyle color="#FF0000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="108.73046875" x="6.309894577043451" y="5.6494140625">Singleton (Phoenix)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n9">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="121.35025790408531" x="8765.541035515454" y="-8062.702026492377"/>
              <y:Fill color="#3366FF" transparent="false"/>
              <y:BorderStyle color="#FF0000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="125.3828125" x="-2.016277297956549" y="5.6494140625">Singleton (No Destroy)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n10">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="8931.072005320073" y="-8122.702026492377"/>
              <y:Fill color="#CC99FF" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="81.35546875" x="4.4899791596362775" y="5.6494140625">Abstract Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n11">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="8931.072005320073" y="-8062.702026492377"/>
              <y:Fill color="#999999" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="86.03125" x="2.1520885346362775" y="5.6494140625">Concrete Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n12">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9165.113501748261" y="-8122.702026492377"/>
              <y:Fill color="#00FF00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="55.33984375" x="14.042505163009992" y="5.6494140625">Far Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n13">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="8735.596158109753" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="60.9140625" x="-9.227260573481544" y="-3.880066109681138">Inheritance
(Generalization)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n14">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="9281.9682015911" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="50.6875" x="-4.113979323481544" y="1.0203245153188618">Function Call</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n15">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="30.0" x="8965.697775963827" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="47.14453125" x="-8.572265625" y="1.0203245153188618">Aggregation</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n16">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="27.734628844902545" x="9159.237268426767" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="34.23828125" x="-3.251826202549637" y="1.0203245153188618">Creation</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n17">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="9047.952145892717" y="-8062.702026492377"/>
              <y:Fill color="#FF6600" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="67.3515625" x="11.491932284636277" y="5.6494140625">Static Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n18">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9051.407432389346" y="-8122.702026492377"/>
              <y:Fill color="#FFFF00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="71.353515625" x="6.0356692255099915" y="5.6494140625">Virtual Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n19">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="9079.262174998703" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="39.34375" x="5.315671714031851" y="5.6494140625">Owner</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n20">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="9079.262174998703" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="42.021484375" x="3.9768045265318506" y="5.6494140625">Owned</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n21">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="30.0" x="9058.409384438432" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="54.6875" x="-12.34375" y="-3.880066109681138">Composition
(Containment)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n22">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9168.28757296199" y="-8062.702026492377"/>
              <y:Fill color="#FF00FF" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="30.009765625" x="26.70754422550999" y="5.6494140625">Main</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n23">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="51.51163907637647" x="8880.896536487884" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="31.3515625" x="10.080038288188007" y="5.6494140625">Base</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n24">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="57.65782166962663" x="8877.82344519126" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="45.349609375" x="6.154106147312632" y="5.6494140625">Derived</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n25">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="8847.878567785554" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="76.93359375" x="-17.237026198481544" y="-3.880066109681138">Disabled Inheritance
(Generalization)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
      </graph>
    </node>
    <node id="n1">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1946.5757539876045" width="735.5387943622018" x="5962.2306028189" y="-6373.2878769938025"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1959.255859375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="728.623046875" x="3.4578737436004303" y="-6.340052693697544">&lt;&lt;PSBaseCar.h&gt;&gt;

PSBaseCar

public:

virtual void processFrameBeforePhysics(const Ogre::FrameEvent &amp;evt, const StaticMeshProcesser&amp; processer, bool isRaceStarted) = 0
virtual void processFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            ModelsPool* modelsPool,
                            Physics * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const Ogre::Vector3&amp; initialImpulseLinear,
                            const Ogre::Vector3&amp; initialImpulseLinearInc,
                            const Ogre::Vector3&amp; initialImpulseRot,
                            const Ogre::Vector3&amp; initialImpulseInc,
                            bool isAI)

// for multiplayer
void repositionVehicle(const Ogre::Matrix4&amp; transform)
void repositionVehicle(const Ogre::Vector3&amp; chassisPos, const Ogre::Quaternion&amp; chassisRot)

void initSounds(lua_State * pipeline)
void deinitSounds()

Ogre::Vector3 getLinearVelocity()const
Ogre::Vector3 getAngularVelocity()const
Ogre::Real getAlignedVelocity()const
Ogre::Real getLateralVelocity()const
Ogre::Vector3 getForwardAxis()const
Ogre::Vector3 getLinearImpulse()const

Ogre::SceneNode* getModelNode()
Ogre::SceneNode* getModelNode() const

void clear() override

std::string getFrontLWheelColliderString()
std::string getFrontRWheelColliderString()
std::string getBackLWheelColliderString()
std::string getBackRWheelColliderString()

unsigned char getFrontLWheelColliderIndex()
unsigned char getFrontRWheelColliderIndex()
unsigned char getBackLWheelColliderIndex()
unsigned char getBackRWheelColliderIndex()
unsigned char getChassisColliderIndex()

const OgreBulletDynamics::RigidBody&amp; getChassis()const

virtual size_t getCurrentLap() const = 0
virtual Ogre::Real getLapPosition() const = 0

GameCars getCarType() const
void setCarType(GameCars&amp; car)

void setVisibility(bool isVisible)

#if defined(__ANDROID__)
    void reloadTextures(const GameState&amp; gameState)
#endif

protected:

virtual void processSounds(const Ogre::FrameEvent &amp;evt) = 0

void stopSounds()

float getCarParameter(const std::string&amp; section, const std::string&amp; key, bool isSpline = false) const
Ogre::Vector3 getCarArray3Parameter(const std::string&amp; section, const std::string&amp; key) const
Ogre::Vector4 getCarArray4Parameter(const std::string&amp; section, const std::string&amp; key) const
std::vector&lt;std::string&gt; getCarArrayValueParameter(const std::string&amp; section, const std::string&amp; key) const
std::vector&lt;Ogre::Real&gt; convertSplinePoints(const std::vector&lt;std::string&gt;&amp; points) const

bool mIsAI

Ogre::SceneNode* mModelNode
Ogre::Entity* mModelEntity

std::vector&lt;std::vector&lt;Ogre::Vector3&gt; &gt; mSuspensionData
std::vector&lt;std::vector&lt;size_t&gt; &gt; mSuspensionIndices
std::vector&lt;std::vector&lt;Ogre::Vector3&gt; &gt; mSuspensionPointOriginalPos
Ogre::Vector3 mFrontLOriginalPos
Ogre::Vector3 mFrontROriginalPos
Ogre::Vector3 mBackLOriginalPos
Ogre::Vector3 mBackROriginalPos


Ogre::Entity * mWheelEntitys[mWheelsAmount]
Ogre::SceneNode *mWheelNodes[mWheelsAmount]

std::string mWheelFrontLColliderString
std::string mWheelFrontRColliderString
std::string mWheelBackLColliderString
std::string mWheelBackRColliderString

unsigned char mWheelFrontLColliderIndex
unsigned char mWheelFrontRColliderIndex
unsigned char mWheelBackLColliderIndex
unsigned char mWheelBackRColliderIndex
unsigned char mChassisColliderIndex

// for multiplayer
GameCars mGameCarType

//sounds
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngLow
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngMid
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngHigh

private:

void initSuspension(lua_State * pipeline)

std::string loadTexture(const GameState&amp; gameState, const std::string&amp; textureName, std::string&amp; carPath)

#if defined(__ANDROID__)
    std::string mTextureName
#endif

STRSettings mCarSettings
STRSettings mTrackSettings
STRSettings mDefaultSettings

STRSettings mCarSplines
STRSettings mTrackSplines
STRSettings mDefaultSplines

static Ogre::NameGenerator nameGenMaterials
static Ogre::NameGenerator nameGenTextures</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n2">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="182.88009597644475" width="1073.6288138589966" x="7203.185593070501" y="-8641.440047988222"/>
          <y:Fill color="#FF0000" transparent="false"/>
          <y:BorderStyle hasColor="false" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="120" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="151.01171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="1071.109375" x="1.2597194294985457" y="15.934188613222432">Powerslide Remake</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n3">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="30.0" width="232.04078247193968" x="5613.97960876403" y="-5415.0"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="27.34375" x="102.34851623597024" y="5.6494140625">LUA</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n4">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2147.889618372409" width="1178.2932695893192" x="9820.853365205341" y="-7013.944809186205"/>
          <y:Fill color="#FF00FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1518.220703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="800.998046875" x="188.6476113571589" y="314.834457623705">&lt;&lt;BaseApp.h&gt;&gt;

BaseApp

public:

virtual void go(void)

void quickScriptsReload()
void enablePause()
void tabPressed()
void switchRenderType()
void dropCamera()

void parseFile(const std::string&amp; fileName)

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex);

bool setShutdown(bool isOnEsc)
void keyDown(OIS::KeyCode key)
void keyUp(OIS::KeyCode key)

#if !defined(__ANDROID__)
    void mouseMoved(const OIS::MouseEvent &amp;arg)
    void mousePressed(const OIS::MouseEvent &amp;arg, OIS::MouseButtonID id)
    void mouseReleased(const OIS::MouseEvent &amp;arg, OIS::MouseButtonID id)
#else
    void touchMoved(const OIS::MultiTouchEvent&amp; arg)
    void touchPressed(const OIS::MultiTouchEvent&amp; arg)
    void touchReleased(const OIS::MultiTouchEvent&amp; arg)
#endif

GameState&amp; getGameState()

#if defined(__ANDROID__)
    Ogre::DataStreamPtr openAPKFile(const Ogre::String&amp; fileName)

    void touchDown(int id, float x, float y)
    void touchUp(int id, float x, float y)
    void touchMove(int id, float x, float y)

    bool androidOnBack()

    void androidCreate(JNIEnv * env, jobject obj, jobject assetManager, const std::string&amp; dataDir)
    void androidDestroy()
    void androidInitWindow(JNIEnv * env, jobject obj,  jobject surface)
    void androidTerminateWindow()
    bool androidRenderOneFrame(JNIEnv * env)

    void androidPause(JNIEnv * env)

    AAssetManager* mAssetMgr
    JavaVM* gVM

    int mTouchLeftID
    int mTouchRightID
    int mTouchDownID
#endif

protected:

virtual bool setup()
virtual bool configure(void)
virtual void createFrameListener(void)
virtual void setupResources(void)

virtual bool frameStarted(const Ogre::FrameEvent &amp;evt)override
virtual bool frameEnded(const Ogre::FrameEvent &amp;evt)override
virtual bool frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

virtual void windowResized(Ogre::RenderWindow* rw)override
virtual void windowClosed(Ogre::RenderWindow* rw)override
virtual void windowFocusChange(Ogre::RenderWindow* rw)override

CommonIncludes::shared_ptr&lt;InputHandler&gt; mInputHandler

CommonIncludes::shared_ptr&lt;Ogre::Root&gt; mRoot
CommonIncludes::shared_ptr&lt;CustomOverlaySystem&gt; mOverlaySystem

Ogre::RenderWindow* mWindow
Ogre::String mResourcesCfg

CustomTrayManager* mTrayMgr
bool mShutDown

private:

DMLuaManager mLuaManager
int mLuaError

CommonIncludes::shared_ptr&lt;CustomSceneManagerFactory&gt; mSMFactory

SoundsProcesser mSoundsProcesser
GameState mGameState

CommonIncludes::shared_ptr&lt;GameModeSwitcher&gt; mGameModeSwitcher

void initLua()
void doLuaMainFile()
void registerLuaFunctions()
void deInitLua()

ModeContext createModeContext()</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n5">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="85.29148043919304" width="182.67338922266129" x="10318.663305388669" y="-7152.6457402195965"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="153.40234375" x="14.63552273633104" y="25.94456834459652">Ogre::FrameListener
Ogre::WindowEventListener</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n6">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2283.2461465896035" width="731.2209110043996" x="5964.389544497801" y="-4171.6230732948015"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="2385.58984375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="676.2578125" x="27.48154925219933" y="-51.17184858019846">&lt;&lt;PSControllableCar.h&gt;&gt;

PSControllableCar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            ModelsPool* modelsPool,
                            Physics * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const Ogre::Vector3&amp; initialImpulseLinear,
                            const Ogre::Vector3&amp; initialImpulseLinearInc,
                            const Ogre::Vector3&amp; initialImpulseRot,
                            const Ogre::Vector3&amp; initialImpulseInc,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera,
                            bool isAI = true)

void setCameraMan(CameraMan * cameraMan)

virtual void processFrameBeforePhysics(const Ogre::FrameEvent &amp;evt, StaticMeshProcesser&amp; processer, bool isRaceStarted)
virtual void processFrameAfterPhysics(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)

virtual void processWheelsCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    const Physics* physicsProcesser,
                                    const StaticMeshProcesser&amp; processer,
                                    int triIndex)

virtual void processChassisCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    const Physics* physicsProcesser,
                                    const StaticMeshProcesser&amp; processer,
                                    int triIndex)

virtual void processInternalTick(float timeStep, bool isRaceStarted)

void setAcceleration(bool isEnable)
bool getAcceleration() const

void setBrake(bool isEnable)
bool getBrake() const

void setSteerLeft(bool isEnable)
bool getSteerLeft()const

void setSteerRight(bool isEnable)
bool getSteerRight() const

bool getAcceleration()
bool getBrake()

LapUtils&amp; getLapUtils()
const LapUtils&amp; getLapUtils()const

const PSCarEngine&amp; getCarEngine()const

bool checkRearCollision(bool isBoth = false)
bool checkFrontCollision()
bool checkChassisCollision()const

size_t getCurrentLap() const override
Ogre::Real getLapPosition() const override

protected:

virtual void processSounds(const Ogre::FrameEvent &amp;evt)

LinearController&lt;float&gt; mPitchValue

PSCarEngine mCarEngine


private:

LapUtils mLapUtils

bool mIsDisableMouse
bool mIsPossesCamera

bool mWheelCollisionFrontL
bool mWheelCollisionFrontR
bool mWheelCollisionBackL
bool mWheelCollisionBackR
bool mChassisCollision

Ogre::Timer mTimerJumpHappenFrontL
Ogre::Timer mTimerJumpHappenFrontR
Ogre::Timer mTimerJumpHappenRearL
Ogre::Timer mTimerJumpHappenRearR

Ogre::Timer mTimerCollisionHappenFront
Ogre::Timer mTimerCollisionHappenRear

LinearController&lt;float&gt; mDriveImpulse
LinearController&lt;float&gt; mResistanceImpulse
LinearController&lt;float&gt; mGroundSpoilerImpulse
LinearController&lt;float&gt; mAirSpoilerImpulse
LinearController&lt;float&gt; mWheelsRotationByEngineAddition

Ogre::Real mWheelRotationalAngleF
Ogre::Real mWheelRotationalAngleB

protected:

Ogre::ParticleSystem* mWheelBackLParticle
Ogre::ParticleSystem* mWheelBackRParticle

Ogre::SceneNode* mParticleNodeWheelBackL
Ogre::SceneNode* mParticleNodeWheelBackR

private:

std::vector&lt;Particle&gt; mParticles

Ogre::String mParticleMaterialName

static Ogre::NameGenerator nameGenMaterialsParticles

virtual void adjustWheelsFriction(StaticMeshProcesser&amp; processer)
void adjustWheelsParticles(const Ogre::Quaternion&amp; rot, Ogre::Real rotAngleAddition)

bool isRollOver()
void restoreRollOver()
bool checkCollisionReadyToRestoreRollOverSide()
bool checkCollisionReadyToRestoreRollOverFront()
Ogre::Timer mTimerRestoreRollOver

protected:

float mSteering
bool mSteeringLeft
bool mSteeringRight
bool mBrakeEnabled
bool mAccelEnabled

float mSteeringMin
float mSteeringMinRad
float mSteeringMax
float mSteeringMaxRad
float mSteeringIncrement

Ogre::Real mLateralStabilizationCoeff
Ogre::Vector2 mAIImpulseHelper

CameraMan * mCameraMan

void cleanWheelsCollisionsFlags()

void setWheelCollisionHappenFrontL()
void setWheelCollisionHappenFrontR()
void setWheelCollisionHappenBackL()
void setWheelCollisionHappenBackR()

private:

virtual void adjustFrontWheelsAngle(const Ogre::FrameEvent &amp;evt)

Ogre::Real mBackLRollResistance
Ogre::Real mBackRRollResistance</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n7">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="997.0122632485554" width="561.972219492834" x="5209.013890253583" y="-3528.5061316242773"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1003.6796875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="515.546875" x="23.21267224641724" y="-3.333712125722286">&lt;&lt;LapUtils.h&gt;&gt;

LapUtils

public:

void checkCheckPoints(const Ogre::Vector3&amp; carPos);

Ogre::Quaternion getArrowOrientation(const Ogre::Vector3&amp; carPos, Ogre::Vector3 carDir)const

Ogre::Real getLastLapTime()const
Ogre::Real getLapTime()const
Ogre::Real getBestLapTime()const
Ogre::Real getLapPosition()const
size_t getCurrentLap()const

void setData(   const std::vector&lt;Ogre::Vector3&gt;&amp; pos, 
                    const std::vector&lt;Ogre::Vector3&gt;&amp; dirs, 
                    const std::vector&lt;Ogre::Real&gt;&amp; weights, 
                    const std::vector&lt;bool&gt;&amp; ischecks,
                    Ogre::SceneManager* sceneMgr,
                    bool isDebug)

void resetLapTimer()
void pauseLapTimer()
void resumeLapTimer()

Ogre::Real getAfterFinishLinePassTime()

void setEvents(Events* events)

private:

bool mIsDebugLLT
Ogre::SceneNode * mDebugSphereNode

void calcLapTime(size_t minIndex)

size_t getClosestSegment(const Ogre::Vector3&amp; carPos, Ogre::Vector3&amp; pointInLineRes)

PausedTimer mLapTimer

Ogre::Timer mAfterFinishLinePassTimer

Ogre::Real mLastLapTime
Ogre::Real mLapTime
Ogre::Real mBestLapTime
Ogre::Real mLapPosition
bool mIsLapPosInited

size_t mCurrentLap

std::vector&lt;Ogre::Vector3&gt; mPositions
std::vector&lt;Ogre::Vector3&gt; mDirs
std::vector&lt;Ogre::Real&gt; mWeights
std::vector&lt;bool&gt; mIsCheckpoints

bool mPrevClosestSegmentInited
size_t mPrevClosestSegmentIndex
std::vector&lt;LLTDataSegment&gt; mLLTDataSegments

std::vector&lt;bool&gt; mIsPassed

Ogre::SimpleSpline mSpline
Ogre::Vector3 mAheadPointForArrow
Ogre::SceneNode * mDebugSphereArrowNode

Events* mEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n8">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="104.44979330156366" width="214.6417533633644" x="4932.679123318318" y="-3082.2248966507814"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="148.087890625" x="33.27693136918242" y="6.1213810257818295">&lt;&lt;LapUtils.h&gt;&gt;

LLTDataSegment

Ogre::Vector3 posA, posB
Ogre::Real segmentLength</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n9">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="294.29827496582675" width="324.39163948067244" x="6977.804180259664" y="-3867.1491374829125"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="271.45703125" x="26.467304115336447" y="34.890348420413375">&lt;&lt;LinearController.h&gt;&gt;

template &lt;typename T&gt;
LinearController

public:

void addPoint(const T&amp; controlPoint, const T&amp; val)

T getVal(const T&amp; point) const

private:

std::vector&lt;T&gt; mControlPoints
std::vector&lt;T&gt; mValues</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n10">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="503.26387795300525" width="634.8664667849475" x="6822.566766607526" y="-3281.631938976502"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="474.4375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="611.599609375" x="11.633428704973994" y="14.413188976502624">&lt;&lt;PSCarEngine.h&gt;&gt;

PSCarEngine

public:

void init(lua_State * pipeline)

void process(Ogre::Real projectedVel, bool isThrottle, bool isBrake, bool isTraction, const Ogre::FrameEvent &amp;evt)

int getCurrentGear()const
Ogre::Real getEngineRPM()const

void gearUp()
void gearDown()

private:

static const int mGearCount = 4

Ogre::Real mGearRatioMain
Ogre::Real mGearRatio[mGearCount]
Ogre::Real mChangeUp[mGearCount]
Ogre::Real mChangeDown[mGearCount]

int mCurrentGear
Ogre::Real mEngineRPM

Ogre::Real mEngineIdleRevsStart
Ogre::Real mEngineIdleRevsEnd

void refreshEngineRPM(Ogre::Real projectedVel, bool isThrottle, bool isBrake, bool isTraction, Ogre::Real spf)</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n11">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="570.4779855747715" width="814.9492552746156" x="5442.525372362692" y="-1545.2389927873853"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="518.541015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="811.662109375" x="1.6435729498080036" y="25.96848497488577">&lt;&lt;PSPlayerCar.h&gt;&gt;

PSPlayerCar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            ModelsPool* modelsPool,
                            Physics * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const Ogre::Vector3&amp; initialImpulseLinear,
                            const Ogre::Vector3&amp; initialImpulseLinearInc,
                            const Ogre::Vector3&amp; initialImpulseRot,
                            const Ogre::Vector3&amp; initialImpulseInc,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera)

virtual void processInternalTick(float timeStep, bool isRaceStarted) override

void keyDown(OIS::KeyCode key)
void keyUp(OIS::KeyCode key)

bool isCollideChassis(const PSBaseCar&amp; otherCar, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap)const

private:

float mSteeringAngleVelocity
LinearController&lt;float&gt; mRotationIntensity

void processSteering(bool isRaceStarted)

bool checkOverSteer()
Ogre::Timer mTimerOversteer</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n12">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="30.0" width="232.04078247193968" x="5133.97960876403" y="-1274.9999999999995"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="89.376953125" x="71.33191467347024" y="5.6494140625">LinearController</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n13">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="719.0561660087035" width="652.036857551991" x="6513.981571224004" y="-1619.5280830043512"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="768.4609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="624.888671875" x="13.574092838495744" y="-24.70238574564837">&lt;&lt;PSAICar.h&gt;&gt;

PSAICar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            ModelsPool* modelsPool,
                            Physics * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const Ogre::Vector3&amp; initialImpulseLinear,
                            const Ogre::Vector3&amp; initialImpulseLinearInc,
                            const Ogre::Vector3&amp; initialImpulseRot,
                            const Ogre::Vector3&amp; initialImpulseInc,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera)

virtual void processInternalTick(float timeStep, bool isRaceStarted) override

void setLateralStabilizationCoeff(Ogre::Real linearStabilizationCoeff)
void setAIImpulseHelper(const Ogre::Vector2&amp; aiImpulseHelper)
void setSpeedCoeff(Ogre::Real speedCoeff)

void setSteeringUmpulse(Ogre::Real impulse)

virtual void processWheelsCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    const Physics* processer,
                                    int triIndex)

void performAICorrection(bool isRaceStarted, bool isGamePaused)
void setAIData(const AIWhole&amp; aiWhole, Ogre::SceneManager* sceneMgr, bool isDebugAI)
void raceStarted()

void setSlotIndex(size_t index)
size_t getSlotIndex() const 

void setSteering(float value)

private:

virtual void adjustFrontWheelsAngle(const Ogre::FrameEvent &amp;evt)

float mSteeringValue

AIUtils mAIUtils

size_t mSlotIndex

Ogre::Real mSteeringImpulse</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n14">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="758.9013901842984" width="703.1800710871116" x="7388.409964456444" y="-1639.4506950921486"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="592.046875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="677.681640625" x="12.749215231056041" y="83.42725759214909">&lt;&lt;AIUtils.h&gt;&gt;

AIUtils

public:

void setAIData(const AIWhole&amp; aiWhole, Ogre::SceneManager* sceneMgr, bool isDebugAI)

void performAICorrection(PSAICar* aiCar, bool isRaceStarted, bool isGamePaused)

void setSpeedCoeff(Ogre::Real speedCoeff)

void raceStarted()

private:

Ogre::Real mSpeedCoeff

Ogre::Timer mTimerAIStuck
Ogre::Timer mTimerReverse
Ogre::Real mAIDistanceLength
Ogre::Vector3 mPrevPos
bool mIsReverseEnabled

//NN based functions
void calcFeatures(PSAICar* aiCar)
void inference(float&amp; steering, float&amp; acceleration)

size_t getClosestSplinePoint(const Ogre::Vector3&amp; carPos) const
size_t getRelativeClosestSplinePoint(const Ogre::Vector3&amp; carPos)
size_t getFracIndex(size_t closestSplineIndex, const Ogre::Vector3&amp; carPos, float &amp; frac) const

SplineFeatures getSplineFeatures(const Ogre::Vector3&amp; carPos, float frac, size_t fracIndex, float feature3, float feature4) const

void mulSlotMatrix(size_t fromRow, size_t toRow)

size_t mPrevClosestSplineIndex
bool mIsPrevClosestSplineIndexInited
AIWhole mAIWhole
Ogre::Vector3 mPrevRot</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n15">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="124.32016908439846" width="192.30300791806576" x="8273.848496040966" y="-1592.1600845421992"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="121.609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="184.78515625" x="3.7589258340321976" y="1.355397042199229">&lt;&lt;AIUtils.h&gt;&gt;

AIDataSegment

Ogre::Vector3 posA, posB
Ogre::Vector3 tangentA, tangentB
Ogre::Vector3 magicA, magicB
Ogre::Real segmentLength</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n16">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="111.66844926595195" width="136.59518776444156" x="8301.70240611778" y="-1105.834224632976"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="122.072265625" x="7.261461069720099" y="2.3801230704759746">&lt;&lt;Tools.h&gt;&gt;

AIData

Ogre::Vector3 pos
Ogre::Vector3 tangent
Ogre::Vector3 magic</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n17">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="607.6943625855972" width="542.4107110025902" x="6568.794644498705" y="-633.8471812927982"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="621.44921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="468.84765625" x="36.781527376295344" y="-6.877428082201391">&lt;&lt;PSMultiplayerCar.h&gt;&gt;

PSMultiplayerCar

public:

void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            ModelsPool* modelsPool,
                            Physics * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const Ogre::Vector3&amp; initialImpulseLinear,
                            const Ogre::Vector3&amp; initialImpulseLinearInc,
                            const Ogre::Vector3&amp; initialImpulseRot,
                            const Ogre::Vector3&amp; initialImpulseInc,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera, const std::string&amp; humanName, bool isHuman)

void clear()override

void setModelVelocity(const Ogre::Vector3&amp; linear, const Ogre::Vector3&amp; angular)

void removeFromScene(Ogre::SceneManager* sceneMgr)

void setCurrentLap(size_t currentLap)
size_t getCurrentLap()const override

void setLapPosition(Ogre::Real lapPosition)
Ogre::Real getLapPosition()const override

void setLastTimeOfUpdate(uint64_t lastTimeOfUpdate)
uint64_t getLastTimeOfUpdate()const 

private:

uint64_t mLastTimeOfUpdate

size_t mCurrentLap
Ogre::Real mLapPosition

CommonIncludes::shared_ptr&lt;Ogre::MovableText&gt; mPlayerTitle</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n18">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2957.1933656117208" width="608.5912499495803" x="11335.70437502521" y="-9338.596682805859"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="2958.935546875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="517.568359375" x="45.51144528728946" y="-0.8710906316391629">&lt;&lt;GameState.h&gt;&gt;

GameState

public:

std::string getVersion()const

void initOriginalData(const std::string&amp; originalPathData, const std::string&amp; originalPathCommon)

bool isOriginalDataInited()const

void setRaceParameters(const std::string&amp; trackName, AIStrength aiStrength)
void setRaceParameters(const std::string&amp; trackName, AIStrength aiStrength, size_t lapsCount)

const PFLoader&amp; getPFLoaderData() const
const PFLoader&amp; getPFLoaderGameshell() const
const PFLoader&amp; getPFLoaderStore() const
const STRPowerslide&amp; getSTRPowerslide() const
const STRRacecrud&amp; getSTRRacecrud() const
const STRRacetimes&amp; getSTRRacetimes() const

std::string getTrackName() const
std::string getTrackNameAsOriginal() const

void setAICharacters(const std::vector&lt;std::string&gt;&amp; chars)

const PSAICar&amp; getAICar(size_t index) const
PSAICar&amp; getAICar(size_t index)
const PSPlayerCar&amp; getPlayerCar() const
PSPlayerCar&amp; getPlayerCar()

static const size_t mRaceGridCarsMax = 12
static const int mAIMax = 11

void setAICount(size_t opponentsAmount)
size_t getAICount()const

Ogre::Vector3 getPLayerCarPrevVel()const
void setPLayerCarPrevVel(const Ogre::Vector3&amp; vel)

void setLLTObject(Ogre::ManualObject* lltObject)
Ogre::ManualObject* getLLTObject()

std::vector&lt;LightEclusion&gt;&amp; getExclusions()
const std::vector&lt;LightEclusion&gt;&amp; getExclusions()const

std::vector&lt;Ogre::Matrix4&gt;&amp; getTrackPositions()
std::vector&lt;Ogre::Vector3&gt;&amp; getTrackOriginalImpulseLinear()
std::vector&lt;Ogre::Vector3&gt;&amp; getTrackOriginalImpulseLinearInc()
std::vector&lt;Ogre::Vector3&gt;&amp; getTrackOriginalImpulseRot()
std::vector&lt;Ogre::Vector3&gt;&amp; getTrackOriginalImpulseRotInc()

HierarchyNode&amp; getHierarchyNode()

std::vector&lt;Particle&gt;&amp; getParticles()
const std::vector&lt;Particle&gt;&amp; getParticles()const

void setGlobalLight(Ogre::Light* light)
Ogre::Light* getGlobalLight()

void setShadowLight(Ogre::Light* light)
Ogre::Light* getShadowLight()

void setRaceStarted(bool isStarted)
bool getRaceStarted()const

unsigned long getBeforeStartTimerTime()
void resetBeforeStartTimer()

Ogre::SceneNode* getArrowNode()
void setArrowNode(Ogre::SceneNode* node)

void setBackgroundColor(Ogre::ColourValue backgroundColor)
Ogre::ColourValue getBackgroundColor()const

void setMirrorEnabled(bool enabled)
bool getMirrorEnabled()const

void setLapsCount(size_t laps)
size_t getLapsCount()const

static std::string getSkinByCarEnum(GameCars carEnum)
static std::string getDashSkinByCarEnum(GameCars carEnum)

void setListenerGain(Ogre::Real gain)
Ogre::Real getListenerGain()const

void setGamePaused()
void resetGamePaused()
bool isGamePaused()const

//multiplayer
void setMultiplayerEnabled(bool option)
bool isMultiplayerEnabled()const

void setMultiplayerMaster(bool option)
bool isMultiplayerMaster()const

void setMultiplayerRoomName(std::string option)
std::string getMultiplayerRoomName()const

void setMultiplayerUserName(std::string option)
std::string getMultiplayerUserName()const

void setMultiplayerServerIP(std::string option)
std::string getMultiplayerServerIP()const

void setMultiplayerServerPort(size_t option)
size_t getMultiplayerServerPort()const

void setMultiplayerPlayersLimits(size_t option)
size_t getMultiplayerPlayersLimits()const

void setMultiplayerBroadcastInterval(size_t option)
size_t getMultiplayerBroadcastInterval()const

int getMaxMultiplayerAI()const
PSMultiplayerCar&amp; getMultiplayerCarAI(size_t index)
void setMultiplayerCountAI(size_t multiplayerAmountAI)
size_t getMultiplayerCountAI()const

int getMaxMultiplayerHumans()const
std::vector&lt;std::string&gt; getMultiplayerCarHumanNames() const
PSMultiplayerCar&amp; getMultiplayerCarHuman(size_t index)
PSMultiplayerCar&amp; getMultiplayerCarHuman(const std::string&amp; playerName)
void addMultiplayerCarHuman(const std::string&amp; playerName)
void clearMultiplayerCarsHuman()
void removeMultiplayerCarHuman(const std::string&amp; playerName)

private:

std::string mVersion

std::string mTrackName

bool mOriginalDataInited
PFLoader mPFLoaderData
PFLoader mPFLoaderGameshell
PFLoader mPFLoaderStore
STRPowerslide mSTRPowerslide
STRRacecrud mSTRRacecrud
STRRacetimes mSTRRacetimes

static const int mAIMax = 11

PSPlayerCar mPSPlayerCar
size_t mAiOpponentsAmount
PSAICar mPSCar[mAIMax]
Ogre::Vector3 mPlayerCarPrevVel

Ogre::ManualObject* mLLTObject

std::vector&lt;LightEclusion&gt; mLightExclusions

std::vector&lt;Ogre::Matrix4&gt; mTrackPositions
std::vector&lt;Ogre::Vector3&gt; mTrackOriginalImpulseLinear
std::vector&lt;Ogre::Vector3&gt; mTrackOriginalImpulseLinearInc
std::vector&lt;Ogre::Vector3&gt; mTrackOriginalImpulseRot
std::vector&lt;Ogre::Vector3&gt; mTrackOriginalImpulseRotInc

HierarchyNode mBaseHierarchyNode

std::vector&lt;Particle&gt; mParticles

Ogre::Light* mGlobalLight
Ogre::Light* mShadowLight

bool mIsRaceStarted
PausedTimer mBeforeStartTimer

Ogre::SceneNode* mArrowNode

Ogre::ColourValue mBackgroundColor

bool mIsMirrorEnabled

size_t mLapsCount

Ogre::Real mListenerGain; //master volume

bool mIsGamePaused

//multiplayer
bool mIsMultiplayerEnabled
bool mIsMultiplayerMaster
std::string mMultiplayerRoomName
std::string mMultiplayerUserName
std::string mMultiplayerServerIP
size_t mMultiplayerServerPort
size_t mMultiplayerPlayersLimits
size_t mMultiplayerBroadcastInterval

static const int mMultiplayerMaxAI = 11

size_t mMultiplayerAmountAI
PSMultiplayerCar mMultiplayerCarAI[mMultiplayerMaxAI]

static const int mMultiplayerMaxHumans = 11
PSMultiplayerCar mMultiplayerCarHuman[mMultiplayerMaxHumans]
std::map&lt;std::string, size_t&gt; mMultiplayerCarHumanIndexes</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n19">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="267.00008119470385" width="237.44183709857998" x="12001.27908145071" y="-8323.500040597351"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="268.62109375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="224.810546875" x="6.315645111790218" y="-0.8105062776485283">&lt;&lt;PausedTimer.h&gt;&gt;

PausedTimer

public:

void pause()
void resume()

unsigned long getMilliseconds()
void reset()

private:

Ogre::Timer mTimer
unsigned long mTimeLengthBeforePause
unsigned long mPauseLength
bool mIsPaused</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n20">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="85.29148043919304" width="182.67338922266129" x="12028.663305388669" y="-7902.6457402195965"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.103515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="97.36328125" x="42.65505398633104" y="18.59398240709652">PSPlayerCar
PSAICar
PSMultiplayerCar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n21">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="325.5948367660958" width="282.9321891114173" x="15278.53390544429" y="-3942.7974183830506"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="312.724609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="284.798828125" x="-0.9333195067920315" y="6.435113695547898">&lt;&lt;LapController.h&gt;&gt;

LapController

public:

void addCar(PSBaseCar * car)
void removeCar(PSBaseCar * car)

size_t getTotalCars() const

void calculateLapPositions()

size_t getTotalPosition(size_t index)const;//0 - player

void clear()

private:

std::vector&lt;size_t&gt; mLapPositions
std::vector&lt;PSBaseCar *&gt; mCars</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n22">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="31.579756583974813" width="133.7009351193766" x="15623.14953244031" y="-3795.789878291989"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="66.6953125" x="33.502811309688695" y="6.4392923544874066">PSBaseCar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n23">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="316.81597721165326" width="367.92133847822106" x="15236.039330760888" y="-3548.407988605828"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="298.0234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="358.80859375" x="4.556372364109848" y="9.396269855826631">&lt;&lt;ModelsPool.h&gt;&gt;

ModelsPool

public:

void initModels(Ogre::SceneManager* sceneMgr)

Ogre::Entity* getCopyOfWarthog(const Ogre::String&amp; modelName)

Ogre::Entity* getArrow()

private:

Ogre::SceneManager* mSceneMgr

Ogre::Entity* mWarthogModel
Ogre::Entity* mArrowModel

static Ogre::NameGenerator nameGenMeshes</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n24">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1840.8084935771822" width="869.3089261662258" x="12615.345536916888" y="-4700.404246788591"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1768.140625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="815.716796875" x="26.796064645612205" y="36.33393428859108">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

StaticMeshProcesser

public:

void initParts( lua_State * pipeline, 
                    Ogre::SceneManager* sceneMgr, 
                    Ogre::SceneNode* mainNode,
                    bool isGlobalReset,
                    GameState&amp; gameState, 
                    PFLoader&amp; pfloader,
                    OgreBulletDynamics::DynamicsWorld * world,
                    LoaderListener* loaderListener)

void queryLights()

void deinit()

void checkIsVertexArraySupported()

void loadTerrainMaps()

const DE2SingleBatch&amp; getBatchByAddress(std::pair&lt;int, int&gt; address)const
const DE2Part&amp; getPartAddress(std::pair&lt;int, int&gt; address)const

unsigned char getTerrainType(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

Ogre::Real getLatitudeFriction(unsigned char terrainType) const
Ogre::Real getLongtitudeFriction(unsigned char terrainType) const

void setFrictionRemapArray(const std::vector&lt;size_t&gt;&amp; remap)
void setLatutuideFrictionArray(const std::vector&lt;float&gt;&amp; frictions)
void setLongtitudeFrictionArray(const std::vector&lt;float&gt;&amp; frictions)

#if defined(__ANDROID__)
    void loadTextures(const PFLoader&amp; pfloader, const std::string&amp; trackName, LoaderListener* loaderListener)
#endif

private:

void loadTextures(const std::vector&lt;MSHData&gt;&amp; mergedMSH, const PFLoader&amp; pfloader, const std::string&amp; trackName, LoaderListener* loaderListener)
void loadTextures(const std::set&lt;std::string&gt;&amp; texturesNames, const PFLoader&amp; pfloader, const std::string&amp; trackName, LoaderListener* loaderListener)

#if defined(__ANDROID__)
    std::set&lt;std::string&gt; mTexturesNames
#endif

void createLights(lua_State * pipeline, Ogre::SceneManager* sceneMgr, const DE2::DE2_File&amp; de2, GameState&amp; gameState)

void addStaticTrimesh(   OgreBulletDynamics::DynamicsWorld * world,
                                                        const Ogre::Vector3&amp; offset,
                                                        const Ogre::Real bodyRestitution, 
                                                        const Ogre::Real bodyFriction,
                                                        const Ogre::Real bodyRollingFriction,
                                                        const MSHData&amp; mshData)

void initPart(  lua_State * pipeline, 
                    Ogre::SceneManager* sceneMgr, 
                    Ogre::SceneNode* mainNode,
                    bool isGlobalReset,
                    GameState&amp; gameState,
                    Ogre::Entity* terrain,
                    Ogre::SceneNode*&amp; terrainNode,
                    const Ogre::Vector3&amp; centroid)

void mergeMSH(const MSHData&amp; mshData, std::map&lt;std::string, size_t&gt;&amp; mapTexturesToMSHIndex, std::vector&lt;MSHData&gt;&amp; mergedMSH)const

Ogre::Vector2 getTextureCoordinateInTriangle(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

std::vector&lt;Ogre::Entity*&gt; mTerrainNodes
Ogre::NameGenerator mNameGenMaterials
Ogre::NameGenerator mNameGenNodes
Ogre::NameGenerator mNameGenTextures
bool mIsMaskLight

Ogre::Entity* createMesh(   lua_State * pipeline, 
                                Ogre::SceneManager* sceneMgr, 
                                const Ogre::String&amp; entityName, 
                                const Ogre::Vector3&amp; centroid,
                                const Ogre::Vector3&amp; min, 
                                const Ogre::Vector3&amp; max,
                                MSHData&amp; mshData)

std::vector&lt;std::string&gt; loadWithVertexArray(   lua_State * pipeline,
                                                    bool isOverrideDefault, 
                                                    std::string defaultTextureName, 
                                                    const std::vector&lt;std::string&gt;&amp; noLightTextures,
                                                    const Ogre::String&amp; ovverideMaterialName,
                                                    const Ogre::String&amp; ovverideMaterialArrayName,
                                                    MSHData&amp; mshData)

std::vector&lt;std::string&gt; loadWithoutVertexArray(    lua_State * pipeline,
                                                        bool isOverrideDefault, 
                                                        std::string defaultTextureName, 
                                                        const std::vector&lt;std::string&gt;&amp; noLightTextures,
                                                        const Ogre::String&amp; ovverideMaterialName,
                                                        MSHData&amp; mshData)

static Ogre::NameGenerator nameGenRigidBodies

size_t mPlainIndices

std::vector&lt;DE2Part&gt; mParts
std::set&lt;std::string&gt; mTerrainMapsNames
std::map&lt;std::string, CommonIncludes::shared_ptr&lt;Ogre::Image&gt; &gt; mTerrainMaps

void prepareBuffers(const MSHData&amp; mshData)

OgreBulletCollisions::TriangleMeshCollisionShape * createTrimesh(DE2Part&amp; part, DE2SingleBatch&amp; batch)

btVoronoiSimplexSolver mSimplexSolver

Ogre::Vector3 getBarycentric(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

std::vector&lt;size_t&gt; mFrictionRemap
std::vector&lt;float&gt; mLatitudeFrictions
std::vector&lt;float&gt; mLongtitudeFrictions

bool mIsVertexArraySupported</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n25">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="121.5123985933451" width="252.8089192692164" x="12203.595540365392" y="-4110.756199296675"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="212.787109375" x="20.01090494710843" y="14.652683671673003">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

DE2SingleBatch

std::vector&lt;unsigned int&gt; mIndexBuffer
std::string mTerrainMap</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n26">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="170.4848526966316" width="262.28745877307983" x="12198.85627061346" y="-3865.2424263483167"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="151.01171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="252.103515625" x="5.091971574040144" y="9.736566973315803">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

DE2Part

std::vector&lt;DE2SingleBatch&gt; mBatches;

std::vector&lt;Ogre::Vector3&gt; mVertexBuffer
std::vector&lt;Ogre::Vector3&gt; mTexCoordsBuffer

Ogre::Vector3 offset</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n27">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1704.6745652405589" width="1013.939961076228" x="19623.030019461887" y="-4812.337282620279"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1665.232421875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="925.75" x="44.094980538113305" y="19.72107168277944">&lt;&lt;UIRace.h&gt;&gt;

UIRace

public:

void load(CustomTrayManager* trayMgr, const GameState&amp; gameState)

void showBeforeStart1()
void showBeforeStart2()
void showBeforeStart3()
void hideAllStart()

void setEngineRPM(Ogre::Real rpm)
void setCarSpeed(Ogre::Real speed)

void setCurrentLap(unsigned short lap, unsigned short totallap)
void setCarGear(unsigned char gear)

void setCarPos(unsigned char pos, unsigned char totalcars)

void hideAIDashboardCars()
void setPlayerDashBoardSkin(GameCars carEnum)
void setAIDashBoardSkin(size_t aiDashIndex, GameCars carEnum)
void setDashCarPos(size_t aiDashIndex, size_t playerLap, Ogre::Real playerLapPos, size_t aiLap, Ogre::Real aiLapPos)

void setRaceTime(const std::string&amp; time)

void setShowPausedPanel(bool isShow)

void setShowMiscText(bool isShow)
void setMiscText(const std::string&amp; text, const Ogre::ColourValue&amp; col = Ogre::ColourValue::White)
void setShowMiscTextRight(bool isShow)
void setMiscTextRight(const std::string&amp; text)
void addMiscPanelText(const std::string&amp; text, const Ogre::ColourValue&amp; col = Ogre::ColourValue::White)

void destroy(CustomTrayManager* trayMgr)

void createRearViewMirrorPanelTexture(Ogre::Root * root, int width, int height)
void rearViewMirrorPanelTextureRemoveAllViewports()
Ogre::Viewport * rearViewMirrorPanelTextureAddViewport(Ogre::Camera* camera)

void createRearViewMirrorPanel(CustomTrayManager* trayMgr, bool isPanelEnabled)
void setRearViewMirrorPanelMaterial(const Ogre::String&amp; material)
void setRearViewMirrorPanelShow(bool isShow)

static Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top, const Ogre::String&amp; material)
static Ogre::TextAreaOverlayElement* createTextArea(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top)

#if defined(__ANDROID__)
    void reloadTextures()
#endif

private:

bool mLoaded

void loadDashboardCars(const GameState&amp; gameState)
void loadMisc(const GameState&amp; gameState, const PFLoader&amp; pfLoaderData, const PFLoader&amp; pfLoaderGameshell)

Ogre::PanelOverlayElement* mBeforeStartPanel1
Ogre::PanelOverlayElement* mBeforeStartPanel2
Ogre::PanelOverlayElement* mBeforeStartPanel3

Ogre::PanelOverlayElement* mPlayerDashboardCar
static const int mDashboardCarsCount = 11
Ogre::PanelOverlayElement* mDashboardCars[mDashboardCarsCount]

Ogre::Overlay* mNeedleLayer
LinearController&lt;float&gt; mEngineRPMToRotation
LinearController&lt;float&gt; mNeedleScaleCorrection

Ogre::PanelOverlayElement* mTachoLamps

Ogre::PanelOverlayElement* mTachoSpeedDigit1
Ogre::PanelOverlayElement* mTachoSpeedDigit2
Ogre::PanelOverlayElement* mTachoSpeedDigit3

Ogre::PanelOverlayElement* mTachoTotalCarsDigit1
Ogre::PanelOverlayElement* mTachoTotalCarsDigit2
Ogre::PanelOverlayElement* mTachoPosDigit1
Ogre::PanelOverlayElement* mTachoPosDigit2
Ogre::Real mDashDigitLeftTotalCars1

Ogre::PanelOverlayElement* mDashLap1
Ogre::PanelOverlayElement* mDashLap2
Ogre::PanelOverlayElement* mDashTotalLap1
Ogre::PanelOverlayElement* mDashTotalLap2
Ogre::Real mDashDigitLeftTotalLap1

Ogre::PanelOverlayElement* mDashLapTime1
Ogre::PanelOverlayElement* mDashLapTime2
Ogre::PanelOverlayElement* mDashLapTime3
Ogre::PanelOverlayElement* mDashLapTime4
Ogre::PanelOverlayElement* mDashLapTime5
Ogre::PanelOverlayElement* mDashLapTime6

Ogre::PanelOverlayElement* mDashGear
    

std::pair&lt;Ogre::Real, Ogre::Real&gt; getTachoDigitOffset(unsigned char digit)const
std::pair&lt;Ogre::Real, Ogre::Real&gt; getDashDigitOffsetX(unsigned char digit)const
std::pair&lt;Ogre::Real, Ogre::Real&gt; getDashDigitOffsetY(unsigned char digit)const

Ogre::RenderTexture *mRearCamTexture
Ogre::PanelOverlayElement* mRearViewMirrorPanel

Ogre::PanelOverlayElement* mPausedPanel

Ogre::TextAreaOverlayElement * mMiscText
Ogre::TextAreaOverlayElement * mMiscTextRight
static const int mMiscTextArraySize = 5
Ogre::TextAreaOverlayElement * mMiscTextArray[mMiscTextArraySize]</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n28">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="914.6242548396594" width="680.3243738838223" x="10069.83781305809" y="-4657.312127419829"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="886.0703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="604.9609375" x="37.68171819191048" y="14.276971169829267">&lt;&lt;SoundsProcesser.h&gt;&gt;

SoundsProcesser

public:

void initSoundSystem();
void deInitSoundSystem()

void setListenerPos(const Ogre::Vector3&amp; pos)
void setListenerGain(ALfloat gain)

void setRemappers(const std::vector&lt;size_t&gt;&amp; remapSounds, const std::vector&lt;size_t&gt;&amp; remapSoundsCollision)

void initSounds()
void deinitSounds()
void stopSounds()
void stopSoundSurfaces()

void playCrash1()
void playCrash2()

void playBeforeStart1()
void playBeforeStart2()
void playBeforeStart3()

void playSurface(size_t surfaceNumber, Ogre::Real lateralVel)
void playSurfaceCrash(size_t surfaceNumber)

private:


void updatePosition(const Ogre::Vector3&amp; pos)

void resetInternalStatus()

OpenALState mState

CommonIncludes::shared_ptr&lt;OpenALSource&gt; mCrash1
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mCrash2

static const int mSurfacesCount = 7
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mSurface[mSurfacesCount]
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mSurfaceCrash[mSurfacesCount]

std::vector&lt;size_t&gt; mRemapSounds
std::vector&lt;size_t&gt; mRemapSoundsCollision

size_t mPrevSurface

LinearController&lt;float&gt; mSurfaceSoundGain


CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart1
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart2
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart3

bool mBeforeStartPlayedOnce1
bool mBeforeStartPlayedOnce2
bool mBeforeStartPlayedOnce3</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n29">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1006.1758688958967" width="1040.9607797438198" x="15529.519610128085" y="-2543.0879344479486"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="974.27734375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="930.0859375" x="55.43742112190921" y="15.949262572948555">&lt;&lt;MultiplayerController.h&gt;&gt;

MultiplayerController

public:

void setEvents(MultiplayerControllerEvents* events)

void clearSession()
void clearLobby()

virtual bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version) = 0
virtual bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName) = 0

bool sendLobbyMessage(const MultiplayerLobbyData&amp; multiplayerLobbyData, bool sendToSelf = true, size_t attemptsAmount = 1)

void receiveData()

void updateSessionData(const MultiplayerSessionData&amp; dataHuman, const std::vector&lt;MultiplayerSessionData&gt;&amp; dataAI, float spf)

bool getReadySent()const

bool getStartHappen()const

size_t getLobbyPing()
size_t getSessionPing()const

void setBroadcastInterval(size_t interval)

protected:

// Lobby callback
void onJoined(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room)override{}
void onLeft(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, uint8_t flags)override{}

// Session callback
void onStart(multislider::Session* session)override
void onUpdate(multislider::Session* session, const multislider::SessionData &amp; data, const multislider::PlayerData &amp; sharedData)override
void onQuit(multislider::Session* session, const std::string &amp; playerName, bool byTimeout) throw ()override

static bool parseLobbyReadyMessage(const std::string&amp; message, GameCars&amp; playerSkin)
static std::string fillLobbyReadyMessage(const GameCars&amp; playerSkin)

MultiplayerControllerEvents* mEvents

multislider::shared_ptr&lt;multislider::Lobby&gt; mLobby
multislider::SessionPtr mSession

bool mSessionStarted

playerToData mOtherPlayersSessionData

std::vector&lt;MultiplayerSessionData&gt; mAIPlayersSessionData

private:

static void parseDataPacket(MultiplayerSessionData&amp; data, const jsonxx::Object&amp; jsonObject)
jsonxx::Object fillDataPacket(const MultiplayerSessionData&amp; data)

bool mStartHappened;//to synchronize race events

Ogre::Timer mBroadcastTimer

Ogre::Timer mStartSessionTimer

size_t mBroadcastInterval</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n30">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="55.671044489625274" width="204.88871618483893" x="15947.555641907578" y="-2757.8355222448135"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="153.390625" x="25.74904559241986" y="11.134350369812637">multislider::Lobby::Callback
multislider::SessionCallback</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n31">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="351.05675917123017" width="918.9162973508874" x="16880.541851324553" y="-2215.528379585615"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="312.724609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="867.431640625" x="25.742328362943226" y="19.166074898114857">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerControllerEvents

public:

virtual void onRoomEnter(const std::string&amp; roomName, const std::string&amp; player, const std::vector&lt;std::string&gt;&amp; players) = 0
virtual void onPlayerEjected(const std::string&amp; player) = 0
virtual void onPlayerJoined(const std::string&amp; player) = 0
virtual void onPlayerLeft(const std::string&amp; player) = 0
virtual void onNewHost(const std::string&amp; player) = 0
virtual void onReconfigure(const std::string&amp; player) = 0
virtual void onReconfigureFailed(const std::string&amp; player) = 0
virtual void onRoomClosed(const std::string&amp; player) = 0
virtual void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data) = 0
virtual void onPlayerAddedToSession(const std::string&amp; player) = 0
virtual void onPlayerQuitSession(const std::string&amp; player, bool isHost) = 0
virtual void onSessionReadyToStart() = 0
virtual void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo) = 0
virtual void onSessionUpdate(const playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost) = 0
virtual void onError(const std::string&amp; message) = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n32">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="281.27145407217085" width="273.1359434396013" x="16783.432028280193" y="-2603.3748863538312"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="253.919921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="266.125" x="3.5054717197999707" y="13.675766098585427">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerSessionData

Ogre::Vector3 pos
Ogre::Quaternion rot
Ogre::Vector3 vel
Ogre::Vector3 velang
bool isAcc
bool isBrake
bool isLeft
bool isRight

uint64_t dataUpdateTimestamp;//server side time

size_t currentLap
Ogre::Real lapPosition</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n33">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="153.58870974598676" width="196.10560797422204" x="4941.9471960128885" y="-2896.794354872993"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="171.759765625" x="12.172921174611474" y="23.340253310493154">&lt;&lt;LapUtils.h&gt;&gt;

LapUtils::class Events

public:

virtual void onLapFinished() = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n34">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="112.75813126190315" width="370.7611527875665" x="12144.619423606217" y="-4436.379065630952"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="351.501953125" x="9.629599831283485" y="2.9249640684520273">&lt;&lt;DE2Loader.h&gt;&gt;

DE2Loader

public:

bool load(std::vector&lt;MSHData&gt;&amp; parts, FILE * fileToLoad) const</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n35">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="31.579756583974813" width="133.7009351193766" x="13553.149532440311" y="-3615.7898782919874"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="56.69921875" x="38.500858184688695" y="6.4392923544874066">PFLoader</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n36">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="439.001597538464" width="571.0431467421781" x="12194.478426628912" y="-7663.500040597352"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="342.126953125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="472.17578125" x="49.43368274608838" y="48.43732220673246">&lt;&lt;PFLoader.h&gt;&gt;

PFLoader

public:

void init(const std::string&amp; file)

Ogre::DataStreamPtr getFile(const std::string&amp; relativeDir, const std::string&amp; file) const

size_t getFileSize(const std::string&amp; relativeDir, const std::string&amp; file) const

private:

typedef unsigned int DWORD

std::string mPath

std::vector&lt;PackedFileItem&gt; mFileSystem

size_t findFile(const std::string&amp; relativeDir, const std::string&amp; file, size_t&amp; fileSize) const

static std::string readString(const Ogre::DataStreamPtr&amp; stream, DWORD&amp; FilePos)
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n37">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="186.04934675105778" width="178.4833695639113" x="12390.758315218045" y="-7207.023915203649"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="165.712890625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="164.740234375" x="6.871567594454973" y="10.168228063029346">&lt;&lt;PFLoader.h&gt;&gt;

PackedFileItem

typedef unsigned int DWORD;

std::string Name
DWORD Next
DWORD FileFolder
DWORD Offset
DWORD Length</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n38">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="840.4213145665408" width="807.9384596111427" x="12376.03077019443" y="-6360.210657283271"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="812.564453125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="797.6640625" x="5.137198555570649" y="13.928430720770848">&lt;&lt;GameModeSwitcher.h&gt;&gt;

GameModeSwitcher

public:

void frameStarted(const Ogre::FrameEvent &amp;evt)
void frameRenderingQueued(const Ogre::FrameEvent &amp;evt)
void frameEnded()

void switchMode()

void restartRace()

void tabPressed()

void keyUp(MyGUI::KeyCode, wchar_t _char )

void mousePressed(const Ogre::Vector2&amp; pos)
void mouseReleased(const Ogre::Vector2&amp; pos)
void mouseMove(const Ogre::Vector2&amp; pos)

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)

GameMode getMode()const

bool isExitSubmenu()const
void setExitSubmenu()
void setTopmostSubmenu()

void loadState(float percent, const std::string&amp; info) override

bool isLoadPassed()const

private:

ModeContext mContext

GameMode mGameMode
GameMode mGameModeNext
bool mIsSwitchMode

bool mIsInitialLoadPassed
bool mIsLoadPassed

UIBackground mUIBackground
CommonIncludes::shared_ptr&lt;UIBackgroundLoaderProgressTracks&gt; mUILoader
CommonIncludes::shared_ptr&lt;UIBackgroundLoaderProgress&gt; mUIUnloader


CommonIncludes::shared_ptr&lt;BaseMenuMode&gt; mMenuMode
CommonIncludes::shared_ptr&lt;MenuMultiMode&gt; mMenuMultiMode
CommonIncludes::shared_ptr&lt;BaseRaceMode&gt; mPlayerMode

void clear()
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n39">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="357.0266602690749" width="420.48941532423214" x="14458.752269457724" y="-8158.513330134538"/>
          <y:Fill color="#FFFF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="327.42578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="379.84375" x="20.322832662115616" y="14.800439509537682">&lt;&lt;BaseMode.h&gt;&gt;

BaseMode

public:

virtual void initData(LoaderListener* loaderListener) = 0
virtual void initCamera() = 0
virtual void clearData() = 0

virtual void frameStarted(const Ogre::FrameEvent &amp;evt) = 0
virtual void frameRenderingQueued(const Ogre::FrameEvent&amp; evt) = 0

Ogre::ColourValue pingToColor(size_t ping)const

protected:

ModeContext mModeContext

Ogre::SceneManager* mSceneMgr
Ogre::SceneNode* mMainNode
Ogre::Camera* mCamera</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n40">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="435.4270736835433" width="435.7998262986998" x="13552.10008685065" y="-6847.165853682431"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="386.23046875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="343.462890625" x="46.16846783684923" y="24.5983024667712">&lt;&lt;MenuMode.h&gt;&gt;

MenuMode

public:

virtual void frameStarted(const Ogre::FrameEvent &amp;evt)override

void keyUp(MyGUI::KeyCode, wchar_t _char )override

void mousePressed(const Ogre::Vector2&amp; pos)override
void mouseReleased(const Ogre::Vector2&amp; pos)override
void mouseMoved(const Ogre::Vector2&amp; pos)override

bool isExitSubmenu()const override
void setExitSubmenu()override
void setTopmostSubmenu()override

protected:

void doInitData(LoaderListener* loaderListener)override
void doClearData()override

private:

CommonIncludes::shared_ptr&lt;UIMainMenu&gt; mUIMainMenu</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n41">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1459.5066488419043" width="930.2499573032924" x="14204.875021348353" y="-4509.7533244209535"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1444.71484375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="873.015625" x="28.617166151645506" y="7.395902545951685">&lt;&lt;BaseRaceMode.h&gt;&gt;

BaseRaceMode

public:

void initData(LoaderListener* loaderListener)override
void initCamera()override
void clearData()override

void restart()

void frameStarted(const Ogre::FrameEvent &amp;evt)override
void frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)
void processInternalTick(float timeStep)

void onLapFinished()override

void preRenderTargetUpdate(const Ogre::RenderTargetEvent&amp; evt)override
void postRenderTargetUpdate(const Ogre::RenderTargetEvent&amp; evt)override

void resourceGroupScriptingStarted(const Ogre::String&amp; groupName, size_t scriptCount) override
void scriptParseStarted(const Ogre::String&amp; scriptName, bool&amp; skipThisScript) override
void scriptParseEnded(const Ogre::String&amp; scriptName, bool skipped) override
void resourceGroupScriptingEnded(const Ogre::String&amp; groupName) override
void resourceGroupLoadStarted(const Ogre::String&amp; groupName, size_t resourceCount) override
void resourceGroupLoadEnded(const Ogre::String&amp; groupName) override
void resourceLoadStarted(const Ogre::ResourcePtr&amp; resource) override
void resourceLoadEnded(void) override
void worldGeometryStageStarted(const Ogre::String&amp; description) override
void worldGeometryStageEnded(void) override

LapController getLapController() const

protected:

StaticMeshProcesser mStaticMeshProcesser
ModelsPool mModelsPool

LapController mLapController

CommonIncludes::shared_ptr&lt;CameraMan&gt; mCameraMan

CommonIncludes::shared_ptr&lt;OgreBulletDynamics::DynamicsWorld&gt; mWorld

CommonIncludes::shared_ptr&lt;UIRace&gt; mUIRace

virtual void clearScene()
virtual void initMisc()

//used in multiplayer mode
virtual void customInitScene()
virtual void customClearScene()
virtual void customInitUI(){}
virtual void customClearUI(){}
virtual void customProcessCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)
virtual void customUnloadResources()
virtual void customFrameStartedDoProcessFrameBeforePhysics(const Ogre::FrameEvent &amp;evt)
virtual void customFrameStartedDoProcessFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)
virtual void customFrameRenderingQueuedDoBegining()
virtual void customFrameRenderingQueuedDoRaceStarted()
virtual void customFrameRenderingQueuedDo2DUI()

private:

float mShadowLightDistanceFromCar

bool mIsGlobalReset

DMLuaManager mLuaManager

Ogre::Camera* mRearCamera

Ogre::SceneManager* mSceneMgrCarUI

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::DebugDrawer&gt; mDebugDrawer

void initScene(LoaderListener* loaderListener)
void initTerrain(LoaderListener* loaderListener)
void initModel()

void initLightLists()


void initWorld(const Ogre::Vector3 &amp;gravityVector = Ogre::Vector3(0.0f, -59.81f, 0.0f),
                   const Ogre::AxisAlignedBox &amp;bounds = Ogre::AxisAlignedBox(   Ogre::Vector3 (-10000.0f, -10000.0f, -10000.0f),
                   Ogre::Vector3 (10000.0f,  10000.0f,  10000.0f)))

void deInitWorld()

void loadResources(LoaderListener* loaderListener)
void unloadResources()

LoaderListener* mLoaderListener
size_t mResourceCount
size_t mResourceCurrent</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n42">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="42.828676372586415" width="182.67338922266129" x="14818.663305388669" y="-4671.414338186293"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="154.076171875" x="14.29860867383104" y="4.713166311293207">LapUtils::Events
Ogre::RenderTargetListener</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n43">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="654.7014379787715" width="399.02319879457855" x="14980.488400602711" y="-8307.350718989386"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="621.44921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="384.818359375" x="7.102419709788592" y="16.626109614386223">&lt;&lt;ModeContext.h&gt;&gt;

ModeContext

public:

void setGameModeSwitcher(GameModeSwitcher* gameModeSwitcher)
GameModeSwitcher* getGameModeSwitcher()const

GameState&amp; getGameState()
const GameState&amp; getGameState() const

CustomTrayManager* getTrayManager()

BaseApp* getBaseApp()

void setLapController(const LapController&amp; lapController)
const LapController&amp; getLapController() const

private:

ModeContext&amp; operator=(const ModeContext&amp;)

Ogre::Root* mRoot
Ogre::RenderWindow* mWindow

InputHandler* mInputHandler

CustomTrayManager* mTrayMgr
CustomOverlaySystem* mOverlaySystem

lua_State * mPipeline

GameModeSwitcher* mGameModeSwitcher

GameState&amp; mGameState

BaseApp * mBaseApp

LapController mLapController

SoundsProcesser&amp; mSoundsProcesser</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n44">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="26.610244263811182" width="114.85085494960651" x="12722.574572525196" y="-5503.305122131906"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="75.373046875" x="19.738904037303655" y="3.9545361944055912">ModeContext</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n45">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="988.3090455396791" width="1021.9078593826357" x="14159.04607030868" y="-2534.1545227698407"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="944.875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="971.798828125" x="25.05451562881717" y="21.717022769839787">&lt;&lt;MultiPlayerMode.h&gt;&gt;

MultiPlayerMode

public:

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; getMultiplayerController()

void onLapFinished()override

void onPlayerEjected(const std::string&amp; player)override
void onPlayerJoined(const std::string&amp; player)override
void onPlayerLeft(const std::string&amp; player)override
void onNewHost(const std::string&amp; player)override
void onReconfigure(const std::string&amp; player)override{}
void onReconfigureFailed(const std::string&amp; player)override{}
void onRoomClosed(const std::string&amp; player)override
void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data)override
void onPlayerAddedToSession(const std::string&amp; player)override
void onPlayerQuitSession(const std::string&amp; player, bool isHost)override
void onSessionReadyToStart()override{}
void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo)override{}
void onSessionUpdate(const MultiplayerController::playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost)override
void onError(const std::string&amp; message)override

void prepareDataForSession(const MultiplayerSessionStartInfo&amp; sessionStartInfo)

void tabPressed()

protected:

virtual void customInitScene()override
virtual void customClearScene()override
virtual void customInitUI()override
virtual void customClearUI()override
virtual void customProcessCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)override
virtual void customUnloadResources()override
virtual void customFrameStartedDoProcessFrameBeforePhysics(const Ogre::FrameEvent &amp;evt)override
virtual void customFrameStartedDoProcessFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)override
virtual void customFrameRenderingQueuedDoBegining()override
virtual void customFrameRenderingQueuedDoRaceStarted()override
virtual void customFrameRenderingQueuedDo2DUI()override

private:

friend class MultiplayerAILapFinishController

void onRaceFinishedByAI(PSAICar&amp; aiCar)

void checkRaceFinished()

bool mIsSessionStarted

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; mMultiplayerController

CommonIncludes::shared_ptr&lt;UIRaceMulti&gt; mUIRaceMulti

std::vector&lt;CommonIncludes::shared_ptr&lt;MultiplayerAILapFinishController&gt; &gt; mAILapsController

bool mIsSelfFinished
Ogre::Real mSelfTotalRaceTime
std::map&lt;std::string, bool&gt; mIsRaceFinishedByHuman
std::map&lt;std::string, Ogre::Real&gt; mRaceTimeByHuman
std::vector&lt;Ogre::Real&gt; mRaceTimeByAI</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n46">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="109.16405801239489" width="219.7756503365904" x="13510.112174831705" y="-2094.5820290061984"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="139.427734375" x="40.17395798079451" y="8.478513381197445">&lt;&lt;SinglePlayerMode.h&gt;&gt;

SinglePlayerMode

public:

</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n47">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="26.610244263811182" width="114.85085494960651" x="11072.574572525196" y="-5833.305122131906"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="75.373046875" x="19.738904037303655" y="3.9545361944055912">ModeContext</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n48">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="332.5271921107915" width="1335.7948881910138" x="18652.102555904494" y="-7576.263596055396"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="312.724609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="1315.90234375" x="9.946272220506216" y="9.901291367896192">&lt;&lt;UIBase.h&gt;&gt;

UIBase

public:

Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top, const Ogre::String&amp; material)
Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, const Ogre::Vector4&amp; pos, const Ogre::String&amp; material)
Ogre::TextAreaOverlayElement* createTextArea(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top)

OgreBites::Label* createLabel(CustomTrayManager* trayMgr, OgreBites::TrayLocation trayLoc, const Ogre::String&amp; name, const Ogre::String&amp; caption, Ogre::Real width = 0)
OgreBites::Button* createButton(CustomTrayManager* trayMgr, OgreBites::TrayLocation trayLoc, const Ogre::String&amp; name, const Ogre::String&amp; caption, Ogre::Real width = 0)
OgreBites::TextBox* createTextBox(CustomTrayManager* trayMgr, OgreBites::TrayLocation trayLoc, const Ogre::String&amp; name, const Ogre::String&amp; caption, Ogre::Real width = 0, Ogre::Real height = 0)
OgreBites::SelectMenu* createSelectMenu(CustomTrayManager* trayMgr, OgreBites::TrayLocation trayLoc, const Ogre::String&amp; name, const Ogre::String&amp; caption, Ogre::Real width, unsigned int maxItemsShown, const Ogre::StringVector&amp; items)

virtual void destroy(CustomTrayManager* trayMgr)

private:

std::vector&lt;Ogre::OverlayElement*&gt; mCreatedElements
std::vector&lt;OgreBites::Widget*&gt; mCreatedWidgets</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n49">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="848.5919416313536" width="694.4874926701536" x="17618.140012965887" y="-4384.295970815677"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="856.66796875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="631.69140625" x="31.39804321007614" y="-4.03801355932319">&lt;&lt;UIMainMenu.h&gt;&gt;

UIMainMenu

public:

void load(CustomTrayManager* trayMgr, const GameState&amp; gameState, LoaderListener* loaderListener)

void frameStarted(const Ogre::FrameEvent &amp;evt) override

#if defined(__ANDROID__)
    void reloadTextures(const GameState&amp; gameState)
#endif

void keyUp(MyGUI::KeyCode, wchar_t _char)

void mousePressed(const Ogre::Vector2&amp; pos)
void mouseReleased(const Ogre::Vector2&amp; pos)
void mouseMoved(const Ogre::Vector2&amp; pos)

bool isExitSubmenu()const
void setExitSubmenu()
void setTopmostSubmenu()

virtual void destroy(CustomTrayManager* trayMgr)

protected:

void switchState(const SinglePlayerMenuStates&amp; state)override
void startRace()override

private:

void hideAll()

void panelHit(Ogre::PanelOverlayElement* panel) override

void loadMisc(const PFLoader&amp; pfLoaderData, const PFLoader&amp; pfLoaderGameshell, LoaderListener* loaderListener)

void connectToServer()
void createRoom()
void joinRoom()

finishBoard_v prepareFinishBoard()const

Ogre::Timer mStartingGridTimer
bool mIsInStartingGrid

MenuMode * mMenuMode

SinglePlayerMenuStates mCurrentState

UIEditBox mEditBoxIP
UIEditBox mEditBoxUserName
UIEditBox mEditBoxRoomName

OgreBites::SelectMenu* mRoomsTable

</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n50">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="13716.260579822643" y="-6882.567920672416"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="72.02734375" x="17.725748302356806" y="3.2173347349162214">UIMainMenu</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n51">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="15366.260579822641" y="-4092.567920672417"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="44.013671875" x="31.732584239856806" y="3.2173347349162214">UIRace</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n52">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="680.1942935930047" width="576.6435196085708" x="18461.678240195713" y="-4300.097146796503"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="356.828125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="541.884765625" x="17.379376991786557" y="161.68308429650278">&lt;&lt;UIMainMenuMulti.h&gt;&gt;

UIMainMenuMulti

public:

void load(CustomTrayManager* trayMgr, const GameState&amp; gameState)

void frameStarted(const Ogre::FrameEvent &amp;evt) override

void setMiscText(const std::string&amp; text, const Ogre::ColourValue&amp; color = Ogre::ColourValue::White)

void onStartPossible()
void onStartNotPossible()

void addEvent(const std::string&amp; eventItem, bool isMessage = false)

private:

void loadMisc(const PFLoader&amp; pfLoaderData, const PFLoader&amp; pfLoaderGameshell)

void updateRoomState(const std::string&amp; playerMessage = "")const

MenuMultiMode * mMenuMultiMode
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n53">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="823.1329556481205" width="980.3836661963628" x="13579.80816690182" y="-6351.566477824061"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="827.265625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="979.814453125" x="0.284606535680723" y="-2.066334675939288">&lt;&lt;MenuMultiMode.h&gt;&gt;

MenuMultiMode

public:

virtual void frameStarted(const Ogre::FrameEvent &amp;evt)override

void keyUp(MyGUI::KeyCode, wchar_t _char )override

void mousePressed(const Ogre::Vector2&amp; pos)override
void mouseReleased(const Ogre::Vector2&amp; pos)override
void mouseMoved(const Ogre::Vector2&amp; pos)override

bool isExitSubmenu()const override
void setExitSubmenu()override
void setTopmostSubmenu()override

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; getMultiplayerController()

void onPlayerEjected(const std::string&amp; player)override
void onPlayerJoined(const std::string&amp; player)override
void onPlayerLeft(const std::string&amp; player)override
void onNewHost(const std::string&amp; player)override
void onReconfigure(const std::string&amp; player)override
void onReconfigureFailed(const std::string&amp; player)override
void onRoomClosed(const std::string&amp; player)override
void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data)override
void onPlayerAddedToSession(const std::string&amp; player)override{}
void onPlayerQuitSession(const std::string&amp; player, bool isHost)override{}
void onSessionReadyToStart()override;
void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo)override;
void onSessionUpdate(const MultiplayerController::playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost)override{}
void onError(const std::string&amp; message)override{}

MultiplayerSessionStartInfo getMultiplayerSessionStartInfo()const

bool getIsLobbyEntered()const

protected:

void doInitData()override
void doClearData()override

void customFrameRenderingQueued()override

private:

MultiplayerSessionStartInfo mMultiplayerSessionStartInfo

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; mMultiplayerController
CommonIncludes::shared_ptr&lt;UIMainMenuMulti&gt; mUIMainMenuMulti

bool mIsEnterFromBaseMenu

bool mIsLobbyEntered</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n54">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="65.52349051922829" width="162.20703162726488" x="13988.896484186367" y="-5492.761745259614"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.103515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.068359375" x="6.069336126132839" y="8.709987447114145">MultiplayerController
UIMainMenuMulti
MultiplayerSessionStartInfo</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n55">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="215.4220260704392" width="273.1359434396013" x="17143.4320282802" y="-1817.7110130352212"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="195.115234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="257.4296875" x="7.853127969799971" y="10.153395847719594">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerSessionStartInfo

std::vector&lt;std::string&gt; mPlayers
size_t mPlayerIndex
bool mIsHost
std::vector&lt;std::string&gt; mAISkins
std::map&lt;std::string, std::string&gt; mPlayersSkins

std::string mTrackName
size_t mAIStrength
size_t mLapsCount</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n56">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="32.25791453345391" width="204.88871618483893" x="14807.555641907578" y="-2626.128957266727"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.724609375" x="27.08205340491986" y="6.778371329226957">MultiplayerControllerEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n57">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="32.25791453345391" width="204.88871618483893" x="14207.55564190758" y="-6466.128957266727"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.724609375" x="27.08205340491986" y="6.7783713292274115">MultiplayerControllerEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n58">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="452.11991191777406" width="457.29192897408666" x="13841.354035512957" y="-7576.059955958887"/>
          <y:Fill color="#FFFF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="445.03515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="448.181640625" x="4.555144174542875" y="3.542377833887258">&lt;&lt;BaseMenuMode.h&gt;&gt;

BaseMenuMode

public:

void initData(LoaderListener* loaderListener)override
void initCamera()override
void clearData()override

virtual void keyUp(MyGUI::KeyCode, wchar_t _char ) = 0

virtual void mousePressed(const Ogre::Vector2&amp; pos) = 0
virtual void mouseReleased(const Ogre::Vector2&amp; pos) = 0
virtual void mouseMoved(const Ogre::Vector2&amp; pos) = 0

virtual bool isExitSubmenu()const = 0
virtual void setExitSubmenu() = 0
virtual void setTopmostSubmenu() = 0

virtual void frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

void recalculateCharacterNames(const std::vector&lt;std::string&gt;&amp; playersCharacters)

protected:

virtual void doInitData(LoaderListener* loaderListener) = 0
virtual void doClearData() = 0

virtual void customFrameRenderingQueued(){}</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n59">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="512.0640110752847" width="941.0184105842977" x="15039.49079470785" y="-1276.0320055376444"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="474.4375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="917.74609375" x="11.63615841714818" y="18.813255537642362">&lt;&lt;MultiplayerControllerMaster.h&gt;&gt;

MultiplayerControllerMaster

public:

bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version)override
bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName)override

void setAISkins(const std::vector&lt;std::string&gt;&amp; aiSkins)
std::vector&lt;std::string&gt; getAllPlayersSkins()const

void onMessage(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, const std::string &amp; message)override
void onRoomUpdate(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, uint8_t flags)override
void onSessionStart(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, multislider::SessionPtr session, const std::string &amp; sessionData)override

void startSession(const std::string&amp; trackName, size_t aiStrength, size_t lapsCount)

private:

void addPlayer(const std::string&amp; playerName)
void removePlayer(const std::string&amp; playerName)
void setPlayerReady(const std::string&amp; playerName, const std::string&amp; characterName)
void resetPlayerReady(const std::string&amp; playerName)
void resetPlayersReady()
bool checkAllPlayersReady()const
void checkAllPlayersReadyOrNot()const

std::map&lt;std::string, bool&gt; mReadyPlayers
std::map&lt;std::string, std::string&gt; mAllPlayers

std::vector&lt;std::string&gt; mAISkins</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n60">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="318.9939311716612" width="929.3182762144147" x="16005.340861892793" y="-1179.4969655858326"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="917.74609375" x="5.786091232206672" y="47.238176523330594">&lt;&lt;MultiplayerControllerSlave.h&gt;&gt;

MultiplayerControllerSlave

public:

bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version)override
bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName)override

void onMessage(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, const std::string &amp; message)override
void onRoomUpdate(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, uint8_t flags)override
void onSessionStart(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, multislider::SessionPtr session, const std::string &amp; sessionData)override

private:

</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n61">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="336.61465817732915" width="250.15214712623992" x="16824.92392643688" y="-1668.3073290886646"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="268.62109375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="212.095703125" x="19.02822200061928" y="33.996782213664574">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerLobbyData

MultiplayerLobbyDataType mDataType

//master &amp; slave data
bool mIsReady
std::string mCharacterName
std::string mPlayerMessage

//master data only
std::string mTrackName
size_t mAICount
size_t mAIStrength
size_t mLapsCount

Ogre::Real mRaceTotalTime</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n62">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="464.20539942905543" width="600.4139445734068" x="10049.283554875077" y="-8812.102699714527"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="445.03515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="582.267578125" x="9.073183224203603" y="9.585121589527262">&lt;&lt;OriginalSettings.h&gt;&gt;

STRSettings

public:

void parse(const PFLoader&amp; pfLoaderStore, const std::string&amp; relativeDir, const std::string&amp; fileName)

std::string getValue(const std::string&amp; section, const std::string&amp; key, const std::string&amp; defaultVal = "") const

std::vector&lt;std::string&gt; getArrayValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
std::vector&lt;std::string&gt; getArrayValue(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector4 getArray4Value(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
Ogre::Vector4 getArray4Value(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector3 getArray3Value(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector2 getArray2Value(const std::string&amp; section, const std::string&amp; key) const

float getFloatValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
float getFloatValue(const std::string&amp; section, const std::string&amp; key) const

int getIntValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
int getIntValue(const std::string&amp; section, const std::string&amp; key) const

protected:

CSimpleIniA mSTR
bool mIsSTRLoaded</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n63">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="431.7379731226456" width="653.4593171303563" x="10022.760868596602" y="-8075.868986561323"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="415.6328125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="629.59375" x="11.932783565178397" y="8.052580311323254">&lt;&lt;OriginalSettings.h&gt;&gt;

STRPowerslide

public:

void parse(const PFLoader&amp; pfLoaderStore)

std::string getBaseCarFromCar(const std::string&amp; car) const
std::string getCarFromCharacter(const std::string&amp; character) const
std::vector&lt;std::string&gt; getCharactersByBaseCar(const std::string&amp; car)const
std::string getTrackTitle(const std::string&amp; car)const
std::string getCarTitle(const std::string&amp; car)const
std::string getCharacterTitle(const std::string&amp; character)const

Ogre::ColourValue getTrackSkyColor(const std::string&amp; trackName) const
Ogre::ColourValue getTrackAmbientColor(const std::string&amp; trackName) const
Ogre::ColourValue getTrackTimeTrialColor(const std::string&amp; trackName) const
Ogre::ColourValue getCharacterSpecularColor(const std::string&amp; trackName, const std::string&amp; characterName) const
std::string getExclusionFile(const std::string&amp; trackName) const
std::string getBaseDir(const std::string&amp; trackName) const
std::string getDataSubDir(const std::string&amp; trackName) const
size_t getLapsCount(const std::string&amp; trackName) const
Ogre::Vector3 getFinishCameraPos(const std::string&amp; trackName) const

private:

Ogre::ColourValue parseColor(const std::string&amp; val) const</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n64">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="146.50477370542194" width="281.9130653844727" x="10775.260484102959" y="-8053.252386852711"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="239.46484375" x="21.22411081723658" y="19.798285290211425">&lt;&lt;OriginalSettings.h&gt;&gt;

STRRacecrud

public:

void parse(const PFLoader&amp; pfLoaderStore)</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n65">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="37.27627252126149" width="91.21585033136864" x="9884.392074834315" y="-8598.63813626063"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="70.0234375" x="10.596206415684719" y="9.287550323129835">CSimpleIniA</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n66">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="260.46854910861293" width="243.12797396348242" x="14548.436013018254" y="-1480.2342745543065"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="204.068359375" x="19.529807294240527" y="17.975485491806467">&lt;&lt;MultiPlayerMode.cpp&gt;&gt;

MultiplayerAILapFinishController

public:

void onLapFinished()override

private:

GameState&amp; mGameState

MultiPlayerMode * mMultiPlayerMode

PSAICar&amp; mAICar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n67">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="99.25540900083922" width="395.22605608423464" x="6642.386971957882" y="70.37229549958084"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="77.505859375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="359.857421875" x="17.68431710461755" y="10.874774812919611">&lt;&lt;MovableText.h&gt;&gt;

MovableText

http://www.ogre3d.org/tikiwiki/tiki-editpage.php?page=MovableText</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n68">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="788.4836915201113" width="894.8936264315575" x="5882.553186784221" y="-7204.241845760056"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="768.4609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="871.1171875" x="11.888219465779002" y="10.011377010056094">&lt;&lt;PSBaseVehicle.h&gt;&gt;

PSBaseVehicle

public:

virtual void clear()

protected:

static const int mWheelsAmount = 4

void initPhysicalModel(Physics * world, 
    Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4], 
    const InitialVehicleSetup&amp; initialVehicleSetup)

void repositionVehicle(const Ogre::Vector3&amp; chassisPos, const Ogre::Quaternion&amp; chassisRot, Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])

Physics * mWorld

CommonIncludes::shared_ptr&lt;CustomRigidBody&gt; mCarChassis
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelFrontL
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelFrontR
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelBackL
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelBackR

CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringFrontL
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringFrontR
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringBackL
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringBackR

InitialVehicleSetup mInitialVehicleSetup

static Ogre::NameGenerator nameGenNodes

private:

void removeFromWorld()
void addToWorld(Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])

void addRigidsToWorld(Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])
void addSpringsToWorld()

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::CompoundCollisionShape&gt; mCompoundShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofBackRShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofBackLShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofFrontRShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofFrontLShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mChassisBodyShape

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mWheelShapeFront
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mWheelShapeBack</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n69">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="733.3753734265165" width="370.78469139349863" x="6894.6076543032505" y="-7176.687686713258"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="694.955078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="231.4375" x="69.67359569674954" y="19.21014765075779">&lt;&lt;PSBaseVehicle.h&gt;&gt;

InitialVehicleSetup

Ogre::Vector3 mChassisPos
Ogre::Quaternion mChassisRot
Ogre::Vector3 mConnectionPointRRWheel
Ogre::Vector3 mConnectionPointRLWheel
Ogre::Vector3 mConnectionPointFRWheel
Ogre::Vector3 mConnectionPointFLWheel

float mRoofBackRadius
Ogre::Vector3 mRoofBackPos

float mRoofFrontRadius
Ogre::Vector3 mRoofFrontPos

float mBodyRadius
Ogre::Vector3 mBodyBasePos

Ogre::Vector2 mWheelRadius

Ogre::Vector3 mAnisotropicFriction
Ogre::Real mRollingFriction

Ogre::Real mMaxTravel

Ogre::Real mWheelsFSpringStiffness
Ogre::Real mWheelsFSpringDamping
Ogre::Real mWheelsRSpringStiffness
Ogre::Real mWheelsRSpringDamping
bool mLimitSpringParamsF
bool mLimitSpringParamsR

Ogre::Real mAirDensityLinear
Ogre::Real mAirDensityAngular

Ogre::Real mChassisMass
Ogre::Real mChassisRestitution
Ogre::Real mChassisFriction

Ogre::Real mWheelsFMass
Ogre::Real mWheelsRMass
Ogre::Real mWheelsRestitution
Ogre::Real mWheelsFriction

Ogre::Vector3 mInitialImpulseLinear</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n70">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="14916.260579822643" y="-1457.6801154742502"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="69.349609375" x="19.064615489856806" y="3.2173347349162214">UIRaceMulti</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n71">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="327.9348001234566" width="519.624060372907" x="20740.187969813545" y="-4183.967400061729"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="390.162109375" x="64.73097549895465" y="51.70861099922877">&lt;&lt;UIRaceMulti.h&gt;&gt;

UIRaceMulti

public:

void load(CustomTrayManager* trayMgr, const GameState&amp; gameState)

void switchVisibleMessageWidget()

private:

ModeContext mModeContext

MultiPlayerMode * mMultiPlayerMode
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n72">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="233.50630176798813" width="307.6539188540237" x="12626.173040572989" y="-6686.753150883994"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.748046875" x="78.45293598951139" y="63.29904932149384">&lt;&lt;GameModeSwitcher.h&gt;&gt;

LoaderListener

public:

virtual void loadState() = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n73">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="663.6091069135009" width="564.6254833569851" x="18223.07101762247" y="-7231.80455345675"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="636.150390625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="548.25390625" x="8.185788553491875" y="13.72935814425">&lt;&lt;UIBaseMenu.h&gt;&gt;

UIBaseMenu

public:

virtual void frameStarted(const Ogre::FrameEvent &amp;evt) = 0

static const size_t amountTracks = 12
static const size_t amountCars = 7

protected:

void selectTrack(const std::string&amp; trackName)
void selectCar(const std::string&amp; carName)

void loadCommonTextures()
void createCommonMaterials()
void createControls(const Ogre::Matrix4&amp; screenAdaptionRelative, Ogre::PanelOverlayElement* base)

void mousePressed(const Ogre::Vector2&amp; pos)
void mouseReleased(const Ogre::Vector2&amp; pos)
void mouseMoved(const Ogre::Vector2&amp; pos)

virtual void panelHit(Ogre::PanelOverlayElement* panel) = 0

static const int mControlsCount = 6
Ogre::PanelOverlayElement* mControls[mControlsCount]
Ogre::TextAreaOverlayElement * mControlsText[mControlsCount]

std::map&lt;std::string, size_t&gt; mRemapTrack
std::map&lt;std::string, size_t&gt; mRemapCar

ModeContext mModeContext

static const size_t mPodiumCharacters = 3

private:

void loadColorTextures()
void createColorMaterials()

bool mControlClicked[mControlsCount]</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n74">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1130.6262486623773" width="547.3407020641766" x="17691.713408268875" y="-5695.313124331189"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1077.185546875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="528.87109375" x="9.234804157087638" y="26.7203508936891">&lt;&lt;UIMainMenuLabels.h&gt;&gt;

UIMainMenuLabels


protected:

void createLabels(const Ogre::Matrix4&amp; screenAdaptionRelative)

void mouseReleased(const Ogre::Vector2&amp; pos)
void mouseMoved(const Ogre::Vector2&amp; pos)

virtual void switchState(const SinglePlayerMenuStates&amp; state) = 0
virtual void startRace() = 0

void setWindowTitle(const std::string&amp; title)
void setStartingGridTime(const std::string&amp; title)

void showModeSingleMulti()
void showModeSingle()
void showModeMulti()
void showModeDifficulty()
void showTrackLabels()
void showCarLabels()
void showCharacterLabels()
void showGameExitLabels()
void showRaceGridCharactersLabels()
void showPodiumLabels(const finishBoard_v&amp; finishBoard)
void showMultiIPLabels()
void hideAllLabels()

private:

bool checkCursorOverLabel(const Ogre::Vector2&amp; pos, Ogre::TextAreaOverlayElement * label)

Ogre::TextAreaOverlayElement * mWindowTitle

Ogre::TextAreaOverlayElement * mModeSingle
Ogre::TextAreaOverlayElement * mModeMulti
Ogre::TextAreaOverlayElement * mModeSingleDifficultyNovice
Ogre::TextAreaOverlayElement * mModeSingleDifficultyAdvanced
Ogre::TextAreaOverlayElement * mModeSingleDifficultyExpert
Ogre::TextAreaOverlayElement * mModeSingleDifficultyInsane

std::vector&lt;Ogre::TextAreaOverlayElement *&gt; mTracksLabels
std::vector&lt;Ogre::TextAreaOverlayElement *&gt; mCarsLabels
std::vector&lt;Ogre::TextAreaOverlayElement *&gt; mCharactersLabels

Ogre::TextAreaOverlayElement * mStartingGridTimeLabel

Ogre::TextAreaOverlayElement * mGameExitLabel
Ogre::TextAreaOverlayElement * mGameExitYesLabel
Ogre::TextAreaOverlayElement * mGameExitNoLabel

Ogre::TextAreaOverlayElement * mRaceGridCharactersLabel[GameState::mRaceGridCarsMax]

Ogre::TextAreaOverlayElement * mPodiumCharactersFirstSecondThirdLabel[mPodiumCharacters]

Ogre::TextAreaOverlayElement * mPodiumTableTitle1Label
Ogre::TextAreaOverlayElement * mPodiumTableTitle2Label
Ogre::TextAreaOverlayElement * mPodiumTableTitle3Label
Ogre::TextAreaOverlayElement * mPodiumTableTitle4Label
Ogre::TextAreaOverlayElement * mPodiumTable1Label[GameState::mRaceGridCarsMax]
Ogre::TextAreaOverlayElement * mPodiumTable2Label[GameState::mRaceGridCarsMax]
Ogre::TextAreaOverlayElement * mPodiumTable3Label[GameState::mRaceGridCarsMax]
Ogre::TextAreaOverlayElement * mPodiumTable4Label[GameState::mRaceGridCarsMax]

Ogre::TextAreaOverlayElement * mModeMultiIP
Ogre::TextAreaOverlayElement * mModeMultiConnect
Ogre::TextAreaOverlayElement * mModeMultiUserName
Ogre::TextAreaOverlayElement * mModeMultiRoomName
Ogre::TextAreaOverlayElement * mModeMultiCreateRoom
Ogre::TextAreaOverlayElement * mModeMultiJoinRoom</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n75">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="749.8530876988525" width="627.226221611681" x="17651.770648495123" y="-6494.926543849426"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="739.05859375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="557.564453125" x="34.830884243339824" y="5.397246974425798">&lt;&lt;UIMainMenuBackground.h&gt;&gt;

UIMainMenuBackground

protected:

void createBackgroundTextures(const PFLoader&amp; pfLoaderGameshell, LoaderListener* loaderListener)
void createBackgroundMaterials()
void createBackgroundUI(const Ogre::Matrix4&amp; screenAdaptionRelative, CustomTrayManager* trayMgr)

void setCurrentTrackLogo()
void setTrackLogo(size_t index)
void setCurrentCarLogo()
void setCarLogo(size_t index)
void setCharacterLogo(size_t index)

void selectTrack(const std::string&amp; trackName)
void selectCar(const std::string&amp; carName)

Ogre::PanelOverlayElement* getMainBackground()

void showBackgrounds()
void showBackgroundTrack()
void showBackgroundCar()
void showBackgroundCharacter()
void showBackgroundExitSign()
void showBackgroundFirstSecondThird()
void showBackgroundCharacterSmallPodium(const finishBoard_v&amp; finishBoard)
void hideAllBackgrounds()

private:

Ogre::PanelOverlayElement* mMainBackground

Ogre::PanelOverlayElement* mBackgroundA
Ogre::PanelOverlayElement* mBackgroundB

Ogre::PanelOverlayElement* mBackgroundTrack
Ogre::PanelOverlayElement* mBackgroundCar
Ogre::PanelOverlayElement* mBackgroundCharacter

Ogre::PanelOverlayElement* mBackgroundCharacterSmall[GameState::mRaceGridCarsMax]

Ogre::PanelOverlayElement* mBackgroundExitSign

Ogre::PanelOverlayElement* mBackground1st
Ogre::PanelOverlayElement* mBackground2nd
Ogre::PanelOverlayElement* mBackground3rd

Ogre::PanelOverlayElement* mBackgroundCharacterSmallPodium[mPodiumCharacters]</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n76">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="146.35429688985448" width="536.1777701563146" x="6091.911114921842" y="-7603.177148444927"/>
          <y:Fill color="#FF0000" transparent="false"/>
          <y:BorderStyle hasColor="false" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="80" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="102.0078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="199.625" x="168.27638507815755" y="22.173242194927298">pscar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n77">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="146.35429688985448" width="536.1777701563146" x="19051.911114921844" y="-7993.177148444927"/>
          <y:Fill color="#FF0000" transparent="false"/>
          <y:BorderStyle hasColor="false" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="80" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="102.0078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="66.265625" x="234.95607257815573" y="22.173242194927298">ui</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n78">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="146.35429688985448" width="536.1777701563146" x="14400.908092041682" y="-8593.177148444927"/>
          <y:Fill color="#FF0000" transparent="false"/>
          <y:BorderStyle hasColor="false" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="80" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="102.0078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="444.234375" x="45.971697578157546" y="22.173242194927298">gamemodes</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n79">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="32.25791453345391" width="119.4343354590302" x="15510.282832270485" y="-7996.1289572667265"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="76.041015625" x="21.696659917015495" y="6.778371329226502">LapController</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n80">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="263.38200616479935" width="498.05967109311814" x="17600.97016445344" y="-7031.6910030824"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="253.919921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="472.87890625" x="12.590382421560207" y="4.73104214490013">&lt;&lt;UIBaseMenu.h&gt;&gt;

finishBoard

size_t mPos
bool mIsPlayer
float mRaceTime
float mBestLapTime
std::string mCharName


bool operator&lt; (const finishBoard&amp; other)const

static bool sortByRaceTime(const finishBoardElement&amp; a, const finishBoardElement&amp; b)
static bool findPlayer(const finishBoardElement&amp; other)

typedef std::vector&lt;finishBoard&gt; finishBoard_v</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n81">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1116.6596405423961" width="516.4248856908503" x="19781.787557154574" y="-7158.329820271198"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="959.576171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="472.251953125" x="22.086466282926267" y="78.5417343336976">&lt;&lt;UIEditBox.h&gt;&gt;

UIEditBox

public:

void loadBackground(const PFLoader&amp; pfLoaderGameshell, const std::string&amp; filename)
void setBackgroundMaterial(const std::string&amp; name)

void init(const Ogre::Matrix4&amp; screenAdaptionRelative, 
        Ogre::PanelOverlayElement* mainBackground, 
        const Ogre::Vector4&amp; dimensions,
        Ogre::Real fontSize,
        bool isActive = false)

void frameStarted(const Ogre::FrameEvent &amp;evt)
void keyUp(MyGUI::KeyCode _key, wchar_t _char)
void mouseReleased(const Ogre::Vector2&amp; pos)

void setText(const Ogre::DisplayString&amp; str)
Ogre::DisplayString getText() const

void setColor(const Ogre::ColourValue&amp; color)

void setCharType(EditBoxCharType type)

void show()
void hide()

Ogre::String getMaterialName()const

private:

void adjustCaptionLength()

bool isLegalCharacter(MyGUI::KeyCode _key) const

Ogre::DisplayString mCaption
Ogre::DisplayString mCaptionToDisplay

bool mIsShown
bool mIsCaretShown
bool mIsActive

Ogre::String mTextureName
Ogre::String mMaterialName

Ogre::String mPanelName
Ogre::String mTextName

size_t mMaxSymbols

Ogre::PanelOverlayElement* mBackground
Ogre::TextAreaOverlayElement * mText

Ogre::Real mCaretSize

Ogre::Timer mBlinkTimer

EditBoxCharType mCharType

static Ogre::NameGenerator nameGenTextures
static Ogre::NameGenerator nameGenMaterials
static Ogre::NameGenerator nameGenPanel
static Ogre::NameGenerator nameGenText</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n82">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="247.81864135734668" width="241.81089403309443" x="8249.094552983452" y="-1383.9093206786733"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="239.21875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="232.111328125" x="4.849782954046532" y="4.299945678673339">&lt;&lt;Tools.h&gt;&gt;

AIWhole

//slot
std::vector&lt;std::vector&lt;float&gt; &gt; slotMatrix
std::vector&lt;std::vector&lt;float&gt; &gt; activation
Ogre::Vector3 multiplier
std::vector&lt;std::vector&lt;size_t&gt; &gt; remapper

//rec
std::vector&lt;AIData&gt; aiData
size_t hackType
float speedCoeff
float hack1
float hack2</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n83">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="133.01481260268906" width="260.8868895961091" x="7609.556555201945" y="-786.5074063013445"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="208.80859375" x="26.03914792305477" y="20.40389067634453">&lt;&lt;AIUtils.h&gt;&gt;

SplineFeatures

Ogre::Vector3 out6, out7, out12, out13
float out8, out9, out10, out11
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n84">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="726.8990575692133" width="869.3089261662258" x="12585.345536916888" y="-2703.4495287846066"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="592.046875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="616.333984375" x="126.4874708956122" y="67.42609128460663">&lt;&lt;Physics.h&gt;&gt;

Physics

public:

void timeStep()

void addPart(const DE2Part&amp; part, const DE2SingleBatch&amp; batch,
                size_t partIndex, size_t batchIndex,
                const Ogre::Real bodyRestitution, 
                const Ogre::Real bodyFriction,
                const Ogre::Real bodyRollingFriction)

bool isRigidBodyStatic(const btCollisionObject * object, std::pair&lt;int, int&gt;&amp; address) const

void launchRay(btCollisionWorld::AllHitsRayResultCallback &amp;rayresult) const

void addVehicle(const PSBaseVehicle * vehiclePtr, Ogre::SceneNode *wheelNodes[4], Ogre::SceneNode *chassis)
void removeVehicle(const PSBaseVehicle * vehiclePtr)

void addCollisionObject(btCollisionObject* object)
void removeCollisionObject(btCollisionObject* object)
bool findCollision(btCollisionObject* object)

private:

void createTrimesh(const DE2Part&amp; part, const DE2SingleBatch&amp; batch)

std::vector&lt;CommonIncludes::shared_ptr&lt;btTriangleMesh&gt;&gt; mStaticTriMeshes
std::vector&lt;CommonIncludes::shared_ptr&lt;btCollisionShape&gt;&gt; mStaticCollisionShapes
std::vector&lt;CommonIncludes::shared_ptr&lt;btCollisionObject&gt;&gt; mStaticCollisionObjects

typedef std::map&lt;const btCollisionObject *, std::pair&lt;int, int&gt; &gt; bodies
bodies mStaticBodies

CommonIncludes::shared_ptr&lt;GameWorld&gt; mGameWorld

typedef std::map&lt;const PSBaseVehicle *, CommonIncludes::shared_ptr&lt;PhysicsVehicle&gt; &gt; vehicles
vehicles mVehicles</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n85">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="764.7501205479471" width="549.8481067828084" x="12745.075946608596" y="-1792.3750602739735"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="724.357421875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="503.546875" x="23.150615891403504" y="20.19634933647353">&lt;&lt;Physics.h&gt;&gt;

PhysicsVehicle

public:

static const int mWheelsAmount = 4

void shiftPos(const Ogre::Vector3&amp; shiftAmount)

protected:

Physics* mPhysics

Ogre::SceneNode *mWheelNodes[wheelsAmount]
Ogre::SceneNode *mChassis

CommonIncludes::shared_ptr&lt;btSphereShape&gt; mWheelShapeRL
CommonIncludes::shared_ptr&lt;btSphereShape&gt; mWheelShapeRR
CommonIncludes::shared_ptr&lt;btSphereShape&gt; mWheelShapeFL
CommonIncludes::shared_ptr&lt;btSphereShape&gt; mWheelShapeFR

CommonIncludes::shared_ptr&lt;btCollisionObject&gt; mWheelRL
CommonIncludes::shared_ptr&lt;btCollisionObject&gt; mWheelRR
CommonIncludes::shared_ptr&lt;btCollisionObject&gt; mWheelFL
CommonIncludes::shared_ptr&lt;btCollisionObject&gt; mWheelFR

CommonIncludes::shared_ptr&lt;btSphereShape&gt; mBodyShape

CommonIncludes::shared_ptr&lt;btCollisionObject&gt; mBody

private:

void reposition(const Ogre::Vector3&amp; posDiff)

void integrateLinear()
void integrateRot()

Ogre::Real momentOfInertiaProj(const Ogre::Vector3&amp; axis)const
Ogre::Vector3 customReflect(const Ogre::Vector3&amp; normal, const Ogre::Vector3&amp; input) const

void processBody()

void adjustImpulseInc(const Ogre::Vector3&amp; rotAxis, const Ogre::Vector3&amp; impulse)

Ogre::Vector3 mBodyGlobal
Ogre::Vector3 mBodyGlobalPrev

const InitialVehicleSetup&amp; mInitialVehicleSetup</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <edge id="n0::e0" source="n0::n0" target="n0::n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_delta" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e1" source="n0::n2" target="n0::n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e2" source="n0::n4" target="n0::n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e3" source="n0::n6" target="n0::n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e4" source="n0::n19" target="n0::n20">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e5" source="n0::n23" target="n0::n24">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="white_delta" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e0" source="n1" target="n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n4" target="n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n6" target="n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n6" target="n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n7" target="n8">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n6" target="n9">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n10">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n11" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n11" target="n12">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e9" source="n13" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e10" source="n13" target="n14">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e11" source="n14" target="n15">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e12" source="n17" target="n13">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e13" source="n4" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e14" source="n18" target="n19">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e15" source="n18" target="n20">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e16" source="n21" target="n22">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e17" source="n24" target="n26">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e18" source="n24" target="n25">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e19" source="n4" target="n28">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e20" source="n29" target="n30">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e21" source="n29" target="n31">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e22" source="n29" target="n32">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e23" source="n7" target="n33">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e24" source="n24" target="n34">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e25" source="n24" target="n35">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e26" source="n18" target="n36">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e27" source="n36" target="n37">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e28" source="n38" target="n4">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e29" source="n40" target="n58">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e30" source="n41" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e31" source="n40" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e32" source="n41" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e33" source="n41" target="n42">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e34" source="n43" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e35" source="n44" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e36" source="n45" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e37" source="n46" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e38" source="n4" target="n47">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e39" source="n29" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e40" source="n24" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e41" source="n21" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e42" source="n23" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e43" source="n75" target="n73">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e44" source="n27" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e45" source="n50" target="n40">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e46" source="n51" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e47" source="n38" target="n72">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e48" source="n52" target="n73">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e49" source="n54" target="n53">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e50" source="n53" target="n58">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e51" source="n53" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e52" source="n55" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e53" source="n45" target="n56">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e54" source="n53" target="n57">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e55" source="n58" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e56" source="n60" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e57" source="n59" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e58" source="n61" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e59" source="n63" target="n62">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e60" source="n64" target="n62">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e61" source="n64" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e62" source="n63" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e63" source="n65" target="n62">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e64" source="n66" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e65" source="n67" target="n17">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e66" source="n1" target="n68">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e67" source="n69" target="n68">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e68" source="n70" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e69" source="n73" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e70" source="n49" target="n74">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e71" source="n74" target="n75">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e72" source="n79" target="n43">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e73" source="n73" target="n80">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e74" source="n81" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e75" source="n16" target="n82">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e76" source="n82" target="n14">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e77" source="n83" target="n14">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e78" source="n84" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e79" source="n85" target="n84">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d0">
    <y:Resources/>
  </data>
</graphml>
