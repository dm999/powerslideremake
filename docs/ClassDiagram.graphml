<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:y="http://www.yworks.com/xml/graphml" xmlns:yed="http://www.yworks.com/xml/yed/3" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd">
  <!--Created by yFiles for Java 2.8-->
  <key for="graphml" id="d0" yfiles.type="resources"/>
  <key for="port" id="d1" yfiles.type="portgraphics"/>
  <key for="port" id="d2" yfiles.type="portgeometry"/>
  <key for="port" id="d3" yfiles.type="portuserdata"/>
  <key attr.name="url" attr.type="string" for="node" id="d4"/>
  <key attr.name="description" attr.type="string" for="node" id="d5"/>
  <key for="node" id="d6" yfiles.type="nodegraphics"/>
  <key attr.name="Description" attr.type="string" for="graph" id="d7"/>
  <key attr.name="url" attr.type="string" for="edge" id="d8"/>
  <key attr.name="description" attr.type="string" for="edge" id="d9"/>
  <key for="edge" id="d10" yfiles.type="edgegraphics"/>
  <graph edgedefault="directed" id="G">
    <data key="d7"/>
    <node id="n0" yfiles.foldertype="group">
      <data key="d4"/>
      <data key="d6">
        <y:ProxyAutoBoundsNode>
          <y:Realizers active="0">
            <y:GroupNode>
              <y:Geometry height="426.3500071853141" width="733.4791822159068" x="8711.368897536271" y="-8342.702026492378"/>
              <y:Fill color="#F5F5F5" transparent="false"/>
              <y:BorderStyle color="#000000" type="dashed" width="1.0"/>
              <y:NodeLabel alignment="right" autoSizePolicy="node_width" backgroundColor="#EBEBEB" borderDistance="0.0" fontFamily="Dialog" fontSize="15" fontStyle="plain" hasLineColor="false" height="22.37646484375" modelName="internal" modelPosition="t" textColor="#000000" visible="true" width="733.4791822159068" x="0.0" y="0.0">Relations description:</y:NodeLabel>
              <y:Shape type="roundrectangle"/>
              <y:State closed="false" innerGraphDisplayEnabled="false"/>
              <y:Insets bottom="15" bottomF="15.0" left="15" leftF="15.0" right="15" rightF="15.0" top="15" topF="15.0"/>
              <y:BorderInsets bottom="101" bottomF="101.3500071853141" left="0" leftF="0.0" right="101" rightF="101.30635748455916" top="3" topF="2.6235351562509095"/>
            </y:GroupNode>
            <y:GroupNode>
              <y:Geometry height="50.0" width="176.76501598579057" x="4042.260559074197" y="7101.991042179014"/>
              <y:Fill color="#F5F5F5" transparent="false"/>
              <y:BorderStyle color="#000000" type="dashed" width="1.0"/>
              <y:NodeLabel alignment="right" autoSizePolicy="node_width" backgroundColor="#EBEBEB" borderDistance="0.0" fontFamily="Dialog" fontSize="15" fontStyle="plain" hasLineColor="false" height="22.37646484375" modelName="internal" modelPosition="t" textColor="#000000" visible="true" width="176.76501598579057" x="0.0" y="0.0">Relations description:</y:NodeLabel>
              <y:Shape type="roundrectangle"/>
              <y:State closed="true" innerGraphDisplayEnabled="false"/>
              <y:Insets bottom="15" bottomF="15.0" left="15" leftF="15.0" right="15" rightF="15.0" top="15" topF="15.0"/>
              <y:BorderInsets bottom="0" bottomF="0.0" left="0" leftF="0.0" right="0" rightF="0.0" top="0" topF="0.0"/>
            </y:GroupNode>
          </y:Realizers>
        </y:ProxyAutoBoundsNode>
      </data>
      <graph edgedefault="directed" id="n0:">
        <node id="n0::n0">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="51.51163907637647" x="8768.614126812083" y="-8302.702026492372"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="31.3515625" x="10.080038288188007" y="5.6494140625">Base</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n1">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="57.65782166962663" x="8765.541035515458" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="45.349609375" x="6.154106147312632" y="5.6494140625">Derived</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n2">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="8983.301876597283" y="-8302.702026492372"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="39.34375" x="5.315671714031851" y="5.6494140625">Owner</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n3">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="8983.301876597283" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="42.021484375" x="3.9768045265318506" y="5.6494140625">Owned</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n4">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="58.27243992895228" x="9165.113501748261" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="53.359375" x="2.4565324644754583" y="5.6494140625">Instancer</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n5">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="58.27243992895228" x="9165.113501748261" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="56.037109375" x="1.1176652769754583" y="5.6494140625">Instanced</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n6">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="37.02213001776204" x="9255.751109989824" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="35.341796875" x="0.8401665713809052" y="5.6494140625">Caller</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n7">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="39.83098202486667" x="9254.346683986269" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="38.01953125" x="0.9057253874325397" y="5.6494140625">Called</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n8">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="121.35025790408531" x="8765.541035515458" y="-8122.702026492377"/>
              <y:Fill color="#00CCFF" transparent="false"/>
              <y:BorderStyle color="#FF0000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="108.73046875" x="6.309894577043451" y="5.6494140625">Singleton (Phoenix)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n9">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="121.35025790408531" x="8765.541035515454" y="-8062.702026492377"/>
              <y:Fill color="#3366FF" transparent="false"/>
              <y:BorderStyle color="#FF0000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="125.3828125" x="-2.016277297956549" y="5.6494140625">Singleton (No Destroy)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n10">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="8931.072005320073" y="-8122.702026492377"/>
              <y:Fill color="#CC99FF" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="81.35546875" x="4.4899791596362775" y="5.6494140625">Abstract Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n11">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="8931.072005320073" y="-8062.702026492377"/>
              <y:Fill color="#999999" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="86.03125" x="2.1520885346362775" y="5.6494140625">Concrete Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n12">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9165.113501748261" y="-8122.702026492377"/>
              <y:Fill color="#00FF00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="55.33984375" x="14.042505163009992" y="5.6494140625">Far Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n13">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="8735.596158109753" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="60.9140625" x="-9.227260573481544" y="-3.880066109681138">Inheritance
(Generalization)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n14">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="9281.9682015911" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="50.6875" x="-4.113979323481544" y="1.0203245153188618">Function Call</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n15">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="30.0" x="8965.697775963827" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="47.14453125" x="-8.572265625" y="1.0203245153188618">Aggregation</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n16">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="27.734628844902545" x="9159.237268426767" y="-8250.472014812092"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="13.80078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="34.23828125" x="-3.251826202549637" y="1.0203245153188618">Creation</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n17">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="90.33542706927142" x="9047.952145892717" y="-8062.702026492377"/>
              <y:Fill color="#FF6600" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="67.3515625" x="11.491932284636277" y="5.6494140625">Static Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n18">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9051.407432389346" y="-8122.702026492377"/>
              <y:Fill color="#FFFF00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="71.353515625" x="6.0356692255099915" y="5.6494140625">Virtual Class</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n19">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="9079.262174998703" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="39.34375" x="5.315671714031851" y="5.6494140625">Owner</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n20">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="49.975093428064156" x="9079.262174998703" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="42.021484375" x="3.9768045265318506" y="5.6494140625">Owned</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n21">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="30.0" x="9058.409384438432" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="54.6875" x="-12.34375" y="-3.880066109681138">Composition
(Containment)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n22">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="83.42485407602123" x="9168.28757296199" y="-8062.702026492377"/>
              <y:Fill color="#FF00FF" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="30.009765625" x="26.70754422550999" y="5.6494140625">Main</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n23">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="51.51163907637647" x="8880.896536487884" y="-8302.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="31.3515625" x="10.080038288188007" y="5.6494140625">Base</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n24">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="30.0" width="57.65782166962663" x="8877.82344519126" y="-8212.702026492376"/>
              <y:Fill color="#FFCC00" transparent="false"/>
              <y:BorderStyle color="#000000" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="45.349609375" x="6.154106147312632" y="5.6494140625">Derived</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
        <node id="n0::n25">
          <data key="d6">
            <y:ShapeNode>
              <y:Geometry height="15.841430280639543" width="42.459541353037366" x="8847.878567785554" y="-8250.622741632696"/>
              <y:Fill hasColor="false" transparent="false"/>
              <y:BorderStyle hasColor="false" type="line" width="1.0"/>
              <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="8" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="23.6015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="76.93359375" x="-17.237026198481544" y="-3.880066109681138">Disabled Inheritance
(Generalization)</y:NodeLabel>
              <y:Shape type="rectangle"/>
            </y:ShapeNode>
          </data>
        </node>
      </graph>
    </node>
    <node id="n1">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1812.0659352998496" width="735.5387943622018" x="5962.2306028189" y="-6306.032967649925"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1488.818359375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="696.607421875" x="19.46568624360043" y="161.623787962425">&lt;&lt;PSBaseCar.h&gt;&gt;

PSBaseCar

public:

virtual void processFrameBeforePhysics(const Ogre::FrameEvent &amp;evt, StaticMeshProcesser&amp; processer, bool isRaceStarted) = 0
virtual void processFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            CameraMan * cameraMan,
                            ModelsPool* modelsPool,
                            OgreBulletDynamics::DynamicsWorld * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            bool isAI)

// for multiplayer
void repositionVehicle(const Ogre::Matrix4&amp; transform)
void repositionVehicle(const Ogre::Vector3&amp; chassisPos, const Ogre::Quaternion&amp; chassisRot)

void initSounds(lua_State * pipeline)
void deinitSounds()

Ogre::Vector3 getLinearVelocity()const
Ogre::Vector3 getAngularVelocity()const
Ogre::Real getAlignedVelocity()const
Ogre::Real getLateralVelocity()const
Ogre::Vector3 getForwardAxis()const

Ogre::SceneNode* getModelNode()

void clear() override

std::string getFrontLWheelColliderString()
std::string getFrontRWheelColliderString()
std::string getBackLWheelColliderString()
std::string getBackRWheelColliderString()

unsigned char getFrontLWheelColliderIndex()
unsigned char getFrontRWheelColliderIndex()
unsigned char getBackLWheelColliderIndex()
unsigned char getBackRWheelColliderIndex()
unsigned char getChassisColliderIndex()

const OgreBulletDynamics::RigidBody&amp; getChassis()const

virtual size_t getCurrentLap() const = 0
virtual Ogre::Real getLapPosition() const = 0

GameCars getCarType() const
void setCarType(GameCars&amp; car)

protected:

virtual void processSounds(const Ogre::FrameEvent &amp;evt) = 0

void stopSounds()

bool mIsAI

Ogre::SceneNode* mModelNode
Ogre::Entity* mModelEntity

std::vector&lt;std::vector&lt;Ogre::Vector3&gt; &gt; mSuspensionData
std::vector&lt;std::vector&lt;size_t&gt; &gt; mSuspensionIndices
std::vector&lt;std::vector&lt;Ogre::Vector3&gt; &gt; mSuspensionPointOriginalPos
Ogre::Vector3 mFrontLOriginalPos
Ogre::Vector3 mFrontROriginalPos
Ogre::Vector3 mBackLOriginalPos
Ogre::Vector3 mBackROriginalPos


Ogre::Entity * mWheelEntitys[4]
Ogre::SceneNode *mWheelNodes[4]

std::string mWheelFrontLColliderString
std::string mWheelFrontRColliderString
std::string mWheelBackLColliderString
std::string mWheelBackRColliderString

unsigned char mWheelFrontLColliderIndex
unsigned char mWheelFrontRColliderIndex
unsigned char mWheelBackLColliderIndex
unsigned char mWheelBackRColliderIndex
unsigned char mChassisColliderIndex

// for multiplayer
GameCars mGameCarType

//sounds
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngLow
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngMid
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mEngHigh

private:

void initSuspension(lua_State * pipeline)

static Ogre::NameGenerator nameGenMaterials</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n2">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="182.88009597644475" width="1073.6288138589966" x="7203.185593070501" y="-8641.440047988222"/>
          <y:Fill color="#FF0000" transparent="false"/>
          <y:BorderStyle hasColor="false" type="line" width="1.0"/>
          <y:NodeLabel alignment="center" autoSizePolicy="content" fontFamily="Dialog" fontSize="120" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="151.01171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="1031.20703125" x="21.210891304498546" y="15.934188613222432">Powerslide Rebuild</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n3">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="30.0" width="232.04078247193968" x="5613.97960876403" y="-5415.0"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="27.34375" x="102.34851623597024" y="5.6494140625">LUA</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n4">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2147.889618372409" width="1178.2932695893192" x="9820.853365205341" y="-7013.944809186205"/>
          <y:Fill color="#FF00FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1033.08203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="800.998046875" x="188.6476113571589" y="557.403793561205">&lt;&lt;BaseApp.h&gt;&gt;

BaseApp

public:

virtual void go(void)

void quickScriptsReload()
void enablePause()
void tabPressed()

void parseFile(const std::string&amp; fileName)

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex);

void setShutdown(bool shutdown)
void keyDown(OIS::KeyCode key)
void keyUp(OIS::KeyCode key)

void mouseMoved(const OIS::MouseEvent &amp;arg)
void mousePressed(const OIS::MouseEvent &amp;arg, OIS::MouseButtonID id)
void mouseReleased(const OIS::MouseEvent &amp;arg, OIS::MouseButtonID id)

GameState&amp; getGameState()

protected:

virtual bool setup()
virtual bool configure(void)
virtual void createFrameListener(void)
virtual void setupResources(void)

virtual bool frameStarted(const Ogre::FrameEvent &amp;evt)override
virtual bool frameEnded(const Ogre::FrameEvent &amp;evt)override
virtual bool frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

virtual void windowResized(Ogre::RenderWindow* rw)override
virtual void windowClosed(Ogre::RenderWindow* rw)override
virtual void windowFocusChange(Ogre::RenderWindow* rw)override

CommonIncludes::shared_ptr&lt;InputHandler&gt; mInputHandler

CommonIncludes::shared_ptr&lt;Ogre::Root&gt; mRoot
CommonIncludes::shared_ptr&lt;CustomOverlaySystem&gt; mOverlaySystem

Ogre::RenderWindow* mWindow
Ogre::String mResourcesCfg

CustomTrayManager* mTrayMgr
bool mShutDown

private:

DMLuaManager mLuaManager
int mLuaError

CommonIncludes::shared_ptr&lt;CustomSceneManagerFactory&gt; mSMFactory

SoundsProcesser mSoundsProcesser
GameState mGameState

CommonIncludes::shared_ptr&lt;GameModeSwitcher&gt; mGameModeSwitcher

void initLua()
void doLuaMainFile()
void registerLuaFunctions()
void deInitLua()

ModeContext createModeContext()</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n5">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="85.29148043919304" width="182.67338922266129" x="10318.663305388669" y="-7152.6457402195965"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="153.40234375" x="14.63552273633104" y="25.94456834459652">Ogre::FrameListener
Ogre::WindowEventListener</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n6">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2183.061097666385" width="701.7915528832027" x="5979.104223558399" y="-4421.530548833192"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="2120.96875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="676.2578125" x="12.766870191600901" y="31.04617383319237">&lt;&lt;PSControllableCar.h&gt;&gt;

PSControllableCar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            CameraMan * cameraMan,
                            ModelsPool* modelsPool,
                            OgreBulletDynamics::DynamicsWorld * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera,
                            bool isAI = true);

virtual void processFrameBeforePhysics(const Ogre::FrameEvent &amp;evt, StaticMeshProcesser&amp; processer, bool isRaceStarted)
virtual void processFrameAfterPhysics(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)

virtual void processWheelsCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    StaticMeshProcesser&amp; processer,
                                    int triIndex)

virtual void processChassisCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    StaticMeshProcesser&amp; processer,
                                    int triIndex)

void setAcceleration(bool isEnable)
bool getAcceleration() const

void setBrake(bool isEnable)
bool getBrake() const

void setSteerLeft(bool isEnable)
bool getSteerLeft()const

void setSteerRight(bool isEnable)
bool getSteerRight() const

bool getAcceleration()
bool getBrake()

LapUtils&amp; getLapUtils()

const PSCarEngine&amp; getCarEngine()const

bool checkRearCollision(bool isBoth = false)
bool checkFrontCollision()
bool checkChassisCollision()const

size_t getCurrentLap() const override
Ogre::Real getLapPosition() const override

protected:

virtual void applyDriveImpulses(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)

virtual void processSounds(const Ogre::FrameEvent &amp;evt)

LinearController&lt;float&gt; mPitchValue

PSCarEngine mCarEngine


private:

LapUtils mLapUtils

bool mIsDisableMouse
bool mIsPossesCamera

bool mWheelCollisionFrontL
bool mWheelCollisionFrontR
bool mWheelCollisionBackL
bool mWheelCollisionBackR
bool mChassisCollision

Ogre::Timer mTimerJumpHappenFrontL
Ogre::Timer mTimerJumpHappenFrontR
Ogre::Timer mTimerJumpHappenRearL
Ogre::Timer mTimerJumpHappenRearR

Ogre::Timer mTimerCollisionHappenFront
Ogre::Timer mTimerCollisionHappenRear

LinearController&lt;float&gt; mDriveImpulse
LinearController&lt;float&gt; mWheelsRotationByEngineAddition

Ogre::Real mWheelRotationalAngle

protected:

Ogre::ParticleSystem* mWheelBackLParticle
Ogre::ParticleSystem* mWheelBackRParticle

Ogre::SceneNode* mParticleNodeWheelBackL
Ogre::SceneNode* mParticleNodeWheelBackR

private:

std::vector&lt;Particle&gt; mParticles

Ogre::String mParticleMaterialName

static Ogre::NameGenerator nameGenMaterialsParticles

virtual void adjustWheelsFriction(StaticMeshProcesser&amp; processer)
void adjustWheelsParticles(const Ogre::Quaternion&amp; rot, Ogre::Real rotAngleAddition)

bool isRollOver()
void restoreRollOver()
bool checkCollisionReadyToRestoreRollOverSide()
bool checkCollisionReadyToRestoreRollOverFront()
Ogre::Timer mTimerRestoreRollOver

protected:

float mSteering
bool mSteeringLeft
bool mSteeringRight
bool mBrakeEnabled
bool mAccelEnabled

float mSteeringMin
float mSteeringMinRad
float mSteeringMax
float mSteeringMaxRad
float mSteeringIncrement

Ogre::Real mLateralStabilizationCoeff

CameraMan * mCameraMan

void cleanWheelsCollisionsFlags()

void setWheelCollisionHappenFrontL()
void setWheelCollisionHappenFrontR()
void setWheelCollisionHappenBackL()
void setWheelCollisionHappenBackR()

virtual void calculateSteering(const Ogre::FrameEvent &amp;evt, bool isRaceStarted) = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n7">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="997.0122632485554" width="561.972219492834" x="5209.013890253583" y="-3828.5061316242777"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="974.27734375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="515.546875" x="23.21267224641724" y="11.367459749277714">&lt;&lt;LapUtils.h&gt;&gt;

LapUtils

public:

void checkCheckPoints(const Ogre::Vector3&amp; carPos);

Ogre::Quaternion getArrowOrientation(const Ogre::Vector3&amp; carPos, Ogre::Vector3 carDir)const

Ogre::Real getLastLapTime()const
Ogre::Real getLapTime()const
Ogre::Real getLapPosition()const
size_t getCurrentLap()const

void setData(   const std::vector&lt;Ogre::Vector3&gt;&amp; pos, 
                    const std::vector&lt;Ogre::Vector3&gt;&amp; dirs, 
                    const std::vector&lt;Ogre::Real&gt;&amp; weights, 
                    const std::vector&lt;bool&gt;&amp; ischecks,
                    Ogre::SceneManager* sceneMgr,
                    bool isDebug)

void resetLapTimer()
void pauseLapTimer()
void resumeLapTimer()

Ogre::Real getAfterFinishLinePassTime()

void setEvents(Events* events)

private:

bool mIsDebugLLT
Ogre::SceneNode * mDebugSphereNode

void calcLapTime(size_t minIndex)

size_t getClosestSegment(const Ogre::Vector3&amp; carPos, Ogre::Vector3&amp; pointInLineRes)

PausedTimer mLapTimer

Ogre::Timer mAfterFinishLinePassTimer

Ogre::Real mLastLapTime
Ogre::Real mLapTime
Ogre::Real mLapPosition
bool mIsLapPosInited

size_t mCurrentLap

std::vector&lt;Ogre::Vector3&gt; mPositions
std::vector&lt;Ogre::Vector3&gt; mDirs
std::vector&lt;Ogre::Real&gt; mWeights
std::vector&lt;bool&gt; mIsCheckpoints

bool mPrevClosestSegmentInited
size_t mPrevClosestSegmentIndex
std::vector&lt;LLTDataSegment&gt; mLLTDataSegments

std::vector&lt;bool&gt; mIsPassed

Ogre::SimpleSpline mSpline
Ogre::Vector3 mAheadPointForArrow
Ogre::SceneNode * mDebugSphereArrowNode

Events* mEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n8">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="104.44979330156366" width="214.6417533633644" x="4932.679123318318" y="-3382.224896650782"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="148.087890625" x="33.27693136918242" y="6.1213810257818295">&lt;&lt;LapUtils.h&gt;&gt;

LLTDataSegment

Ogre::Vector3 posA, posB
Ogre::Real segmentLength</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n9">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="294.29827496582675" width="324.39163948067244" x="6977.804180259664" y="-4167.149137482913"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="271.45703125" x="26.467304115336447" y="34.89034842041292">&lt;&lt;LinearController.h&gt;&gt;

template &lt;typename T&gt;
LinearController

public:

void addPoint(const T&amp; controlPoint, const T&amp; val)

T getVal(const T&amp; point) const

private:

std::vector&lt;T&gt; mControlPoints
std::vector&lt;T&gt; mValues</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n10">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="465.38591301053384" width="634.8664667849475" x="6822.566766607526" y="-3562.692956505267"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="415.6328125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="611.599609375" x="11.633428704973994" y="24.87655025526692">&lt;&lt;PSCarEngine.h&gt;&gt;

PSCarEngine

public:

void init(lua_State * pipeline)

void process(Ogre::Real projectedVel, bool isThrottle, bool isBrake, bool isTraction, const Ogre::FrameEvent &amp;evt)

int getCurrentGear()const
Ogre::Real getEngineRPM()const

private:

static const int mGearCount = 4

Ogre::Real mGearRatioMain
Ogre::Real mGearRatio[mGearCount]
Ogre::Real mChangeUp[mGearCount]
Ogre::Real mChangeDown[mGearCount]

int mCurrentGear
Ogre::Real mEngineRPM
Ogre::Real mEngineMinRPM
Ogre::Real mEngineMaxRPM

void refreshEngineRPM(Ogre::Real projectedVel, bool isThrottle, bool isBrake, bool isTraction, Ogre::Real spf)</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n11">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="570.4779855747715" width="814.9492552746156" x="5442.525372362692" y="-1845.2389927873858"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="533.2421875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="811.662109375" x="1.6435729498080036" y="18.61789903738577">&lt;&lt;PSPlayerCar.h&gt;&gt;

PSPlayerCar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            CameraMan * cameraMan,
                            ModelsPool* modelsPool,
                            OgreBulletDynamics::DynamicsWorld * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera)

void keyDown(OIS::KeyCode key)
void keyUp(OIS::KeyCode key)

bool isCollideChassis(const PSBaseCar&amp; otherCar, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap)const

protected:

virtual void calculateSteering(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)

private:

LinearController&lt;float&gt; mSteeringImpulse
LinearController&lt;float&gt; mOverSteeringImpulseLength

Ogre::Real mSideImpulse
Ogre::Timer mSteerTimer
unsigned long mLastSteerLength
bool mIsTimerFirstTime
bool mIsLastTurnLeft
Ogre::Real mSmoothSideImpulse</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n12">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="30.0" width="232.04078247193968" x="5133.97960876403" y="-1575.0"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="89.376953125" x="71.33191467347024" y="5.6494140625">LinearController</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n13">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="614.9086394991236" width="652.036857551991" x="6513.981571224004" y="-1867.4543197495618"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="592.046875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="624.888671875" x="13.574092838495744" y="11.430882249561819">&lt;&lt;PSAICar.h&gt;&gt;

PSAICar

public:

virtual void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            CameraMan * cameraMan,
                            ModelsPool* modelsPool,
                            OgreBulletDynamics::DynamicsWorld * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera)

void setLateralStabilizationCoeff(Ogre::Real linearStabilizationCoeff)
void setSpeedCoeff(Ogre::Real speedCoeff)

void setSteeringUmpulse(Ogre::Real impulse)

virtual void processWheelsCollision(    btManifoldPoint&amp; cp, 
                                    const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap,
                                    StaticMeshProcesser&amp; processer,
                                    int triIndex)

void performAICorrection(bool isGamePaused)
void clearAIData()
void setAIData(const std::vector&lt;AIData&gt;&amp; aiData, Ogre::SceneManager* sceneMgr, bool isDebugAI)
void raceStarted()

protected:

virtual void calculateSteering(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)

private:

AIUtils mAIUtils

Ogre::Real mSteeringImpulse</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n14">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="547.7689846801022" width="559.2261582433434" x="7370.386920878328" y="-1833.884492340051"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="533.2421875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="544.275390625" x="7.4753838091719444" y="7.263398590051111">&lt;&lt;AIUtils.h&gt;&gt;

AIUtils

public:

void setAIData(const std::vector&lt;AIData&gt;&amp; aiData, Ogre::SceneManager* sceneMgr, bool isDebugAI)
void clear()

void performAICorrection(PSAICar* aiCar, bool isGamePaused)

void setSpeedCoeff(Ogre::Real speedCoeff)

void raceStarted()

private:

bool mIsDebugAI
Ogre::SceneNode * mDebugSphereNode

Ogre::Real mSpeedCoeff

Ogre::SimpleSpline mSpline

bool mPrevClosestSegmentInited
size_t mPrevClosestSegmentIndex
std::vector&lt;AIDataSegment&gt; mAIDataSegments

Ogre::Vector3 getTowardPoint(const Ogre::Vector3&amp; carPos, Ogre::Vector3&amp; towardDir)
size_t getClosestSegment(const Ogre::Vector3&amp; carPos, Ogre::Vector3&amp; pointInLineRes)

Ogre::Timer mTimerAIStuck
Ogre::Timer mTimerReverse
Ogre::Real mAIDistanceLength
Ogre::Vector3 mPrevPos
bool mIsReverseEnabled</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n15">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="124.32016908439846" width="192.30300791806576" x="8003.848496040967" y="-1802.1600845421992"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="148.087890625" x="22.107558646533107" y="8.705982979699229">&lt;&lt;AIUtils.h&gt;&gt;

AIDataSegment

Ogre::Vector3 posA, posB
Ogre::Vector3 dirA, dirB
Ogre::Real segmentLength</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n16">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="99.6364724597579" width="125.65702703153647" x="8037.171486484232" y="-1609.818236229879"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="101.3828125" x="12.137107265768464" y="3.7147206048789485">&lt;&lt;Tools.h&gt;&gt;

AIData

Ogre::Vector3 pos
Ogre::Vector3 dir</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n17">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="687.8424017241719" width="519.0341995871709" x="6580.482900206414" y="-973.9212008620859"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="636.150390625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="468.84765625" x="25.093271668585658" y="25.846005549585925">&lt;&lt;PSMultiplayerCar.h&gt;&gt;

PSMultiplayerCar

public:

void initModel( lua_State * pipeline, 
                            Ogre::SceneManager* sceneMgr, Ogre::SceneNode* mainNode,
                            CameraMan * cameraMan,
                            ModelsPool* modelsPool,
                            OgreBulletDynamics::DynamicsWorld * world,
                            GameCars gameCar,
                            const Ogre::Matrix4&amp; transform,
                            const std::vector&lt;Particle&gt;&amp; particles,
                            bool isPossesCamera, const std::string&amp; humanName, bool isHuman)

void clear()override

void setModelVelocity(const Ogre::Vector3&amp; linear, const Ogre::Vector3&amp; angular)

void removeFromScene(Ogre::SceneManager* sceneMgr)

void setCurrentLap(size_t currentLap)
size_t getCurrentLap()const override

void setLapPosition(Ogre::Real lapPosition)
Ogre::Real getLapPosition()const override

void setLastTimeOfUpdate(uint64_t lastTimeOfUpdate)
uint64_t getLastTimeOfUpdate()const 

protected:

void applyDriveImpulses(const Ogre::FrameEvent &amp;evt, bool isRaceStarted)override{}

private:

uint64_t mLastTimeOfUpdate

size_t mCurrentLap
Ogre::Real mLapPosition

CommonIncludes::shared_ptr&lt;Ogre::MovableText&gt; mPlayerTitle</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n18">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="2957.1933656117208" width="608.5912499495803" x="11335.70437502521" y="-9338.596682805859"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="2797.22265625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="517.568359375" x="45.51144528728946" y="79.98535468086084">&lt;&lt;GameState.h&gt;&gt;

GameState

public:

std::string getVersion()const

void initOriginalData(const std::string&amp; originalPathData, const std::string&amp; originalPathCommon)

bool isOriginalDataInited()const

void setRaceParameters(const std::string&amp; trackName, AIStrength aiStrength)
void setRaceParameters(const std::string&amp; trackName, AIStrength aiStrength, size_t lapsCount)

const PFLoader&amp; getPFLoaderData() const
const PFLoader&amp; getPFLoaderGameshell() const
const PFLoader&amp; getPFLoaderStore() const
const STRPowerslide&amp; getSTRPowerslide() const
const STRRacecrud&amp; getSTRRacecrud() const

std::string getTrackName() const
std::string getTrackNameAsOriginal() const

void setAICharacters(const std::vector&lt;std::string&gt;&amp; chars)

const PSAICar&amp; getAICar(size_t index) const
PSAICar&amp; getAICar(size_t index)
const PSPlayerCar&amp; getPlayerCar() const
PSPlayerCar&amp; getPlayerCar()

int getMaxAI()const

void setAICount(size_t opponentsAmount)
size_t getAICount()const

Ogre::Vector3 getPLayerCarPrevVel()const
void setPLayerCarPrevVel(const Ogre::Vector3&amp; vel)

void setLLTObject(Ogre::ManualObject* lltObject)
Ogre::ManualObject* getLLTObject()

std::vector&lt;LightEclusion&gt;&amp; getExclusions()
const std::vector&lt;LightEclusion&gt;&amp; getExclusions()const

std::vector&lt;Ogre::Matrix4&gt;&amp; getTrackPositions()

HierarchyNode&amp; getHierarchyNode()

std::vector&lt;Particle&gt;&amp; getParticles()
const std::vector&lt;Particle&gt;&amp; getParticles()const

void setGlobalLight(Ogre::Light* light)
Ogre::Light* getGlobalLight()

void setShadowLight(Ogre::Light* light)
Ogre::Light* getShadowLight()

void setRaceStarted(bool isStarted)
bool getRaceStarted()const

unsigned long getBeforeStartTimerTime()
void resetBeforeStartTimer()

Ogre::SceneNode* getArrowNode()
void setArrowNode(Ogre::SceneNode* node)

void setBackgroundColor(Ogre::ColourValue backgroundColor)
Ogre::ColourValue getBackgroundColor()const

void setMirrorEnabled(bool enabled)
bool getMirrorEnabled()const

void setLapsCount(size_t laps)
size_t getLapsCount()const

static std::string getSkinByCarEnum(GameCars carEnum)
static std::string getDashSkinByCarEnum(GameCars carEnum)

void setListenerGain(Ogre::Real gain)
Ogre::Real getListenerGain()const

void setGamePaused()
void resetGamePaused()
bool isGamePaused()const

//multiplayer
void setMultiplayerEnabled(bool option)
bool isMultiplayerEnabled()const

void setMultiplayerMaster(bool option)
bool isMultiplayerMaster()const

void setMultiplayerRoomName(std::string option)
std::string getMultiplayerRoomName()const

void setMultiplayerUserName(std::string option)
std::string getMultiplayerUserName()const

void setMultiplayerServerIP(std::string option)
std::string getMultiplayerServerIP()const

void setMultiplayerServerPort(size_t option)
size_t getMultiplayerServerPort()const

void setMultiplayerPlayersLimits(size_t option)
size_t getMultiplayerPlayersLimits()const

void setMultiplayerBroadcastInterval(size_t option)
size_t getMultiplayerBroadcastInterval()const

int getMaxMultiplayerAI()const
PSMultiplayerCar&amp; getMultiplayerCarAI(size_t index)
void setMultiplayerCountAI(size_t multiplayerAmountAI)
size_t getMultiplayerCountAI()const

int getMaxMultiplayerHumans()const
std::vector&lt;std::string&gt; getMultiplayerCarHumanNames() const
PSMultiplayerCar&amp; getMultiplayerCarHuman(size_t index)
PSMultiplayerCar&amp; getMultiplayerCarHuman(const std::string&amp; playerName)
void addMultiplayerCarHuman(const std::string&amp; playerName)
void clearMultiplayerCarsHuman()
void removeMultiplayerCarHuman(const std::string&amp; playerName)

private:

std::string mVersion

std::string mTrackName

bool mOriginalDataInited
PFLoader mPFLoaderData
PFLoader mPFLoaderGameshell
PFLoader mPFLoaderStore
STRPowerslide mSTRPowerslide
STRRacecrud mSTRRacecrud

static const int mAIMax = 11

PSPlayerCar mPSPlayerCar
size_t mAiOpponentsAmount
PSAICar mPSCar[mAIMax]
Ogre::Vector3 mPlayerCarPrevVel

Ogre::ManualObject* mLLTObject

std::vector&lt;LightEclusion&gt; mLightExclusions

std::vector&lt;Ogre::Matrix4&gt; mTrackPositions

HierarchyNode mBaseHierarchyNode

std::vector&lt;Particle&gt; mParticles

Ogre::Light* mGlobalLight
Ogre::Light* mShadowLight

bool mIsRaceStarted
PausedTimer mBeforeStartTimer

Ogre::SceneNode* mArrowNode

Ogre::ColourValue mBackgroundColor

bool mIsMirrorEnabled

size_t mLapsCount

Ogre::Real mListenerGain; //master volume

bool mIsGamePaused

//multiplayer
bool mIsMultiplayerEnabled
bool mIsMultiplayerMaster
std::string mMultiplayerRoomName
std::string mMultiplayerUserName
std::string mMultiplayerServerIP
size_t mMultiplayerServerPort
size_t mMultiplayerPlayersLimits
size_t mMultiplayerBroadcastInterval

static const int mMultiplayerMaxAI = 11

size_t mMultiplayerAmountAI
PSMultiplayerCar mMultiplayerCarAI[mMultiplayerMaxAI]

static const int mMultiplayerMaxHumans = 11
PSMultiplayerCar mMultiplayerCarHuman[mMultiplayerMaxHumans]
std::map&lt;std::string, size_t&gt; mMultiplayerCarHumanIndexes</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n19">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="267.00008119470385" width="237.44183709857998" x="12001.27908145071" y="-8323.500040597351"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="268.62109375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="224.810546875" x="6.315645111790218" y="-0.8105062776485283">&lt;&lt;PausedTimer.h&gt;&gt;

PausedTimer

public:

void pause()
void resume()

unsigned long getMilliseconds()
void reset()

private:

Ogre::Timer mTimer
unsigned long mTimeLengthBeforePause
unsigned long mPauseLength
bool mIsPaused</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n20">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="85.29148043919304" width="182.67338922266129" x="12028.663305388669" y="-7902.6457402195965"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.103515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="97.36328125" x="42.65505398633104" y="18.59398240709652">PSPlayerCar
PSAICar
PSMultiplayerCar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n21">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="325.5948367660958" width="282.9321891114173" x="15278.53390544429" y="-3942.7974183830506"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="312.724609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="284.798828125" x="-0.9333195067920315" y="6.435113695547898">&lt;&lt;LapController.h&gt;&gt;

LapController

public:

void addCar(PSBaseCar * car)
void removeCar(PSBaseCar * car)

size_t getTotalCars() const

void calculateLapPositions()

size_t getTotalPosition(size_t index)const;//0 - player

void clear()

private:

std::vector&lt;size_t&gt; mLapPositions
std::vector&lt;PSBaseCar *&gt; mCars</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n22">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="31.579756583974813" width="133.7009351193766" x="15623.14953244031" y="-3795.789878291989"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="66.6953125" x="33.502811309688695" y="6.4392923544874066">PSBaseCar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n23">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="316.81597721165326" width="367.92133847822106" x="15236.039330760888" y="-3548.407988605828"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="298.0234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="358.80859375" x="4.556372364109848" y="9.396269855826631">&lt;&lt;ModelsPool.h&gt;&gt;

ModelsPool

public:

void initModels(Ogre::SceneManager* sceneMgr)

Ogre::Entity* getCopyOfWarthog(const Ogre::String&amp; modelName)

Ogre::Entity* getArrow()

private:

Ogre::SceneManager* mSceneMgr

Ogre::Entity* mWarthogModel
Ogre::Entity* mArrowModel

static Ogre::NameGenerator nameGenMeshes</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n24">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1710.4154565810131" width="869.3089261662258" x="12615.345536916888" y="-4635.207728290507"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1694.634765625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="784.955078125" x="42.176924020612205" y="7.890345478006566">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

StaticMeshProcesser

public:

void initParts( lua_State * pipeline, 
                    Ogre::SceneManager* sceneMgr, 
                    Ogre::SceneNode* mainNode,
                    bool isGlobalReset,
                    GameState&amp; gameState, 
                    PFLoader&amp; pfloader,
                    OgreBulletDynamics::DynamicsWorld * world)

void queryLights()

bool isRigidBodyStatic(const btCollisionObject * object, std::pair&lt;int, int&gt;&amp; address) const

void deinit()

void checkIsVertexArraySupported()

void loadTerrainMaps()

const DE2SingleBatch&amp; getBatchByAddress(std::pair&lt;int, int&gt; address)const
const DE2Part&amp; getPartAddress(std::pair&lt;int, int&gt; address)const

unsigned char getTerrainType(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

Ogre::Real getLatitudeFriction(unsigned char terrainType)
Ogre::Real getLongtitudeFriction(unsigned char terrainType)

void setFrictionRemapArray(const std::vector&lt;size_t&gt;&amp; remap)
void setLatutuideFrictionArray(const std::vector&lt;float&gt;&amp; frictions)
void setLongtitudeFrictionArray(const std::vector&lt;float&gt;&amp; frictions)

private:

void loadTextures(const std::vector&lt;MSHData&gt;&amp; mergedMSH, const PFLoader&amp; pfloader, const std::string&amp; trackName)

void createLights(lua_State * pipeline, Ogre::SceneManager* sceneMgr, const DE2::DE2_File&amp; de2, GameState&amp; gameState)

void addStaticTrimesh(   OgreBulletDynamics::DynamicsWorld * world,
                                                        const Ogre::Vector3&amp; offset,
                                                        const Ogre::Real bodyRestitution, 
                                                        const Ogre::Real bodyFriction,
                                                        const Ogre::Real bodyRollingFriction,
                                                        const MSHData&amp; mshData)

void initPart(  lua_State * pipeline, 
                    Ogre::SceneManager* sceneMgr, 
                    Ogre::SceneNode* mainNode,
                    bool isGlobalReset,
                    GameState&amp; gameState,
                    Ogre::Entity* terrain,
                    Ogre::SceneNode*&amp; terrainNode,
                    const Ogre::Vector3&amp; centroid)

void mergeMSH(const MSHData&amp; mshData, std::map&lt;std::string, size_t&gt;&amp; mapTexturesToMSHIndex, std::vector&lt;MSHData&gt;&amp; mergedMSH)const

Ogre::Vector2 getTextureCoordinateInTriangle(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

std::vector&lt;Ogre::Entity*&gt; mTerrainNodes
Ogre::NameGenerator mNameGenMaterials
Ogre::NameGenerator mNameGenNodes
Ogre::NameGenerator mNameGenTextures
bool mIsMaskLight

Ogre::Entity* createMesh(   lua_State * pipeline, 
                                Ogre::SceneManager* sceneMgr, 
                                const Ogre::String&amp; entityName, 
                                const Ogre::Vector3&amp; centroid,
                                const Ogre::Vector3&amp; min, 
                                const Ogre::Vector3&amp; max,
                                MSHData&amp; mshData)

std::vector&lt;std::string&gt; loadWithVertexArray(   lua_State * pipeline,
                                                    bool isOverrideDefault, 
                                                    std::string defaultTextureName, 
                                                    const std::vector&lt;std::string&gt;&amp; noLightTextures,
                                                    const Ogre::String&amp; ovverideMaterialName,
                                                    const Ogre::String&amp; ovverideMaterialArrayName,
                                                    MSHData&amp; mshData)

std::vector&lt;std::string&gt; loadWithoutVertexArray(    lua_State * pipeline,
                                                        bool isOverrideDefault, 
                                                        std::string defaultTextureName, 
                                                        const std::vector&lt;std::string&gt;&amp; noLightTextures,
                                                        const Ogre::String&amp; ovverideMaterialName,
                                                        MSHData&amp; mshData)

typedef std::map&lt;const btCollisionObject *, std::pair&lt;int, int&gt; &gt; bodies
bodies mBodies

static Ogre::NameGenerator nameGenRigidBodies

size_t mPlainIndices

std::vector&lt;DE2Part&gt; mParts
std::set&lt;std::string&gt; mTerrainMapsNames
std::map&lt;std::string, CommonIncludes::shared_ptr&lt;Ogre::Image&gt; &gt; mTerrainMaps

void prepareBuffers(const MSHData&amp; mshData)

OgreBulletCollisions::TriangleMeshCollisionShape * createTrimesh(DE2Part&amp; part, DE2SingleBatch&amp; batch)

btVoronoiSimplexSolver mSimplexSolver

Ogre::Vector3 getBarycentric(std::pair&lt;int, int&gt; address, int triIndex, const btVector3&amp; ptB)

std::vector&lt;size_t&gt; mFrictionRemap
std::vector&lt;float&gt; mLatitudeFrictions
std::vector&lt;float&gt; mLongtitudeFrictions

bool mIsVertexArraySupported</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n25">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="121.5123985933451" width="252.8089192692164" x="12203.595540365392" y="-4110.756199296675"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="212.787109375" x="20.01090494710843" y="14.652683671673003">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

DE2SingleBatch

std::vector&lt;unsigned int&gt; mIndexBuffer
std::string mTerrainMap</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n26">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="170.4848526966316" width="262.28745877307983" x="12198.85627061346" y="-3865.2424263483167"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="151.01171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="252.103515625" x="5.091971574040144" y="9.736566973315803">&lt;&lt;StaticMeshProcesser.h&gt;&gt;

DE2Part

std::vector&lt;DE2SingleBatch&gt; mBatches;

std::vector&lt;Ogre::Vector3&gt; mVertexBuffer
std::vector&lt;Ogre::Vector3&gt; mTexCoordsBuffer

Ogre::Vector3 offset</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n27">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1632.9583948926665" width="1013.939961076228" x="16263.030019461887" y="-6576.479197446333"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1635.830078125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="925.75" x="44.094980538113305" y="-1.4358416161667265">&lt;&lt;UIRace.h&gt;&gt;

UIRace

public:

void load(CustomTrayManager* trayMgr)

void showBeforeStart1()
void showBeforeStart2()
void showBeforeStart3()
void hideAllStart()

void setEngineRPM(Ogre::Real rpm)
void setCarSpeed(Ogre::Real speed)

void setCurrentLap(unsigned short lap, unsigned short totallap)
void setCarGear(unsigned char gear)

void setCarPos(unsigned char pos, unsigned char totalcars)

void hideAIDashboardCars()
void setPlayerDashBoardSkin(GameCars carEnum)
void setAIDashBoardSkin(size_t aiDashIndex, GameCars carEnum)
void setDashCarPos(size_t aiDashIndex, size_t playerLap, Ogre::Real playerLapPos, size_t aiLap, Ogre::Real aiLapPos)

void setRaceTime(const std::string&amp; time)

void setShowPausedPanel(bool isShow)

void setShowMiscText(bool isShow)
void setMiscText(const std::string&amp; text, const Ogre::ColourValue&amp; col = Ogre::ColourValue::White)
void setShowMiscTextRight(bool isShow)
void setMiscTextRight(const std::string&amp; text)
void addMiscPanelText(const std::string&amp; text, const Ogre::ColourValue&amp; col = Ogre::ColourValue::White)

void destroy(CustomTrayManager* trayMgr)

void createRearViewMirrorPanelTexture(Ogre::Root * root, int width, int height)
void rearViewMirrorPanelTextureRemoveAllViewports()
Ogre::Viewport * rearViewMirrorPanelTextureAddViewport(Ogre::Camera* camera)

void createRearViewMirrorPanel(CustomTrayManager* trayMgr, bool isPanelEnabled)
void setRearViewMirrorPanelMaterial(const Ogre::String&amp; material)
void setRearViewMirrorPanelShow(bool isShow)

static Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top, const Ogre::String&amp; material)
static Ogre::TextAreaOverlayElement* createTextArea(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top)

void reloadTextures()

private:

bool mLoaded

void loadDashboardCars()
void loadMisc()

Ogre::PanelOverlayElement* mBeforeStartPanel1
Ogre::PanelOverlayElement* mBeforeStartPanel2
Ogre::PanelOverlayElement* mBeforeStartPanel3

Ogre::PanelOverlayElement* mPlayerDashboardCar
static const int mDashboardCarsCount = 11
Ogre::PanelOverlayElement* mDashboardCars[mDashboardCarsCount]

Ogre::Overlay* mNeedleLayer
LinearController&lt;float&gt; mEngineRPMToRotation
LinearController&lt;float&gt; mNeedleScaleCorrection

Ogre::PanelOverlayElement* mTachoLamps

Ogre::PanelOverlayElement* mTachoSpeedDigit1
Ogre::PanelOverlayElement* mTachoSpeedDigit2
Ogre::PanelOverlayElement* mTachoSpeedDigit3

Ogre::PanelOverlayElement* mTachoTotalCarsDigit1
Ogre::PanelOverlayElement* mTachoTotalCarsDigit2
Ogre::PanelOverlayElement* mTachoPosDigit1
Ogre::PanelOverlayElement* mTachoPosDigit2
Ogre::Real mDashDigitLeftTotalCars1

Ogre::PanelOverlayElement* mDashLap1
Ogre::PanelOverlayElement* mDashLap2
Ogre::PanelOverlayElement* mDashTotalLap1
Ogre::PanelOverlayElement* mDashTotalLap2
Ogre::Real mDashDigitLeftTotalLap1

Ogre::PanelOverlayElement* mDashLapTime1
Ogre::PanelOverlayElement* mDashLapTime2
Ogre::PanelOverlayElement* mDashLapTime3
Ogre::PanelOverlayElement* mDashLapTime4
Ogre::PanelOverlayElement* mDashLapTime5
Ogre::PanelOverlayElement* mDashLapTime6

Ogre::PanelOverlayElement* mDashGear
    

std::pair&lt;Ogre::Real, Ogre::Real&gt; getTachoDigitOffset(unsigned char digit)const
std::pair&lt;Ogre::Real, Ogre::Real&gt; getDashDigitOffsetX(unsigned char digit)const
std::pair&lt;Ogre::Real, Ogre::Real&gt; getDashDigitOffsetY(unsigned char digit)const

Ogre::RenderTexture *mRearCamTexture
Ogre::PanelOverlayElement* mRearViewMirrorPanel

Ogre::PanelOverlayElement* mPausedPanel

Ogre::TextAreaOverlayElement * mMiscText
Ogre::TextAreaOverlayElement * mMiscTextRight
static const int mMiscTextArraySize = 5
Ogre::TextAreaOverlayElement * mMiscTextArray[mMiscTextArraySize]</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n28">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="914.6242548396594" width="680.3243738838223" x="10069.83781305809" y="-4657.312127419829"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="886.0703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="604.9609375" x="37.68171819191048" y="14.276971169829267">&lt;&lt;SoundsProcesser.h&gt;&gt;

SoundsProcesser

public:

void initSoundSystem();
void deInitSoundSystem()

void setListenerPos(const Ogre::Vector3&amp; pos)
void setListenerGain(ALfloat gain)

void setRemappers(const std::vector&lt;size_t&gt;&amp; remapSounds, const std::vector&lt;size_t&gt;&amp; remapSoundsCollision)

void initSounds()
void deinitSounds()
void stopSounds()
void stopSoundSurfaces()

void playCrash1()
void playCrash2()

void playBeforeStart1()
void playBeforeStart2()
void playBeforeStart3()

void playSurface(size_t surfaceNumber, Ogre::Real lateralVel)
void playSurfaceCrash(size_t surfaceNumber)

private:


void updatePosition(const Ogre::Vector3&amp; pos)

void resetInternalStatus()

OpenALState mState

CommonIncludes::shared_ptr&lt;OpenALSource&gt; mCrash1
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mCrash2

static const int mSurfacesCount = 7
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mSurface[mSurfacesCount]
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mSurfaceCrash[mSurfacesCount]

std::vector&lt;size_t&gt; mRemapSounds
std::vector&lt;size_t&gt; mRemapSoundsCollision

size_t mPrevSurface

LinearController&lt;float&gt; mSurfaceSoundGain


CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart1
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart2
CommonIncludes::shared_ptr&lt;OpenALSource&gt; mBeforeStart3

bool mBeforeStartPlayedOnce1
bool mBeforeStartPlayedOnce2
bool mBeforeStartPlayedOnce3</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n29">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1006.1758688958967" width="1040.9607797438198" x="15529.519610128085" y="-2543.0879344479486"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="959.576171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="930.0859375" x="55.43742112190921" y="23.299848510448555">&lt;&lt;MultiplayerController.h&gt;&gt;

MultiplayerController

public:

void setEvents(MultiplayerControllerEvents* events)

void clearSession()
void clearLobby()

virtual bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version) = 0
virtual bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName) = 0

bool sendLobbyMessage(const MultiplayerLobbyData&amp; multiplayerLobbyData, bool sendToSelf = true, size_t attemptsAmount = 1)

void receiveData()

void updateSessionData(const MultiplayerSessionData&amp; dataHuman, const std::vector&lt;MultiplayerSessionData&gt;&amp; dataAI, float spf)

bool getReadySent()const

bool getStartHappen()const

size_t getSessionPing()const

void setBroadcastInterval(size_t interval)

protected:

// Lobby callback
void onJoined(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room)override{}
void onLeft(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, uint8_t flags)override{}

// Session callback
void onStart(multislider::Session* session)override
void onUpdate(multislider::Session* session, const multislider::SessionData &amp; data, const multislider::PlayerData &amp; sharedData)override
void onQuit(multislider::Session* session, const std::string &amp; playerName, bool byTimeout) throw ()override

static bool parseLobbyReadyMessage(const std::string&amp; message, GameCars&amp; playerSkin)
static std::string fillLobbyReadyMessage(const GameCars&amp; playerSkin)

MultiplayerControllerEvents* mEvents

multislider::shared_ptr&lt;multislider::Lobby&gt; mLobby
multislider::SessionPtr mSession

bool mSessionStarted

playerToData mOtherPlayersSessionData

std::vector&lt;MultiplayerSessionData&gt; mAIPlayersSessionData

private:

static void parseDataPacket(MultiplayerSessionData&amp; data, const jsonxx::Object&amp; jsonObject)
jsonxx::Object fillDataPacket(const MultiplayerSessionData&amp; data)

bool mStartHappened;//to synchronize race events

Ogre::Timer mBroadcastTimer

Ogre::Timer mStartSessionTimer

size_t mBroadcastInterval</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n30">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="55.671044489625274" width="204.88871618483893" x="15947.555641907578" y="-2757.8355222448135"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="153.390625" x="25.74904559241986" y="11.134350369812637">multislider::Lobby::Callback
multislider::SessionCallback</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n31">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="351.05675917123017" width="918.9162973508874" x="16880.541851324553" y="-2215.528379585615"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="312.724609375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="867.431640625" x="25.742328362943226" y="19.166074898114857">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerControllerEvents

public:

virtual void onRoomEnter(const std::string&amp; roomName, const std::string&amp; player, const std::vector&lt;std::string&gt;&amp; players) = 0
virtual void onPlayerEjected(const std::string&amp; player) = 0
virtual void onPlayerJoined(const std::string&amp; player) = 0
virtual void onPlayerLeft(const std::string&amp; player) = 0
virtual void onNewHost(const std::string&amp; player) = 0
virtual void onReconfigure(const std::string&amp; player) = 0
virtual void onReconfigureFailed(const std::string&amp; player) = 0
virtual void onRoomClosed(const std::string&amp; player) = 0
virtual void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data) = 0
virtual void onPlayerAddedToSession(const std::string&amp; player) = 0
virtual void onPlayerQuitSession(const std::string&amp; player, bool isHost) = 0
virtual void onSessionReadyToStart() = 0
virtual void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo) = 0
virtual void onSessionUpdate(const playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost) = 0
virtual void onError(const std::string&amp; message) = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n32">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="281.27145407217085" width="273.1359434396013" x="16783.432028280193" y="-2603.3748863538312"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="253.919921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="266.125" x="3.5054717197999707" y="13.675766098585427">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerSessionData

Ogre::Vector3 pos
Ogre::Quaternion rot
Ogre::Vector3 vel
Ogre::Vector3 velang
bool isAcc
bool isBrake
bool isLeft
bool isRight

uint64_t dataUpdateTimestamp;//server side time

size_t currentLap
Ogre::Real lapPosition</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n33">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="153.58870974598676" width="196.10560797422204" x="4941.9471960128885" y="-3196.7943548729936"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="171.759765625" x="12.172921174611474" y="23.34025331049361">&lt;&lt;LapUtils.h&gt;&gt;

LapUtils::class Events

public:

virtual void onLapFinished() = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n34">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="112.75813126190315" width="370.7611527875665" x="12144.619423606217" y="-4436.379065630952"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="351.501953125" x="9.629599831283485" y="2.9249640684520273">&lt;&lt;DE2Loader.h&gt;&gt;

DE2Loader

public:

bool load(std::vector&lt;MSHData&gt;&amp; parts, FILE * fileToLoad) const</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n35">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="31.579756583974813" width="133.7009351193766" x="13553.149532440311" y="-3615.7898782919874"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="56.69921875" x="38.500858184688695" y="6.4392923544874066">PFLoader</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n36">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="439.001597538464" width="571.0431467421781" x="12194.478426628912" y="-7663.500040597352"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="415.6328125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="490.861328125" x="40.09090930858838" y="11.68439251923246">&lt;&lt;PFLoader.h&gt;&gt;

PFLoader

public:

void init(const std::string&amp; path, const std::string&amp; file)

FILE * getFile(const std::string&amp; relativeDir, const std::string&amp; file) const

size_t getFileSize(const std::string&amp; relativeDir, const std::string&amp; file) const

private:

typedef unsigned int DWORD

std::string mPath
std::string mFileName
bool mIsPathCorrect

std::vector&lt;PackedFileItem&gt; mFileSystem

bool checkPathCorrect(const std::string&amp; path, const std::string&amp; file) const

size_t findFile(const std::string&amp; relativeDir, const std::string&amp; file, size_t&amp; fileSize) const

static std::string readString(FILE * f, DWORD&amp; FilePos)
static std::vector&lt;std::string&gt; splitpath(const std::string&amp; str, const std::set&lt;char&gt; delimiters)</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n37">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="186.04934675105778" width="178.4833695639113" x="12390.758315218045" y="-7207.023915203649"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="165.712890625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="164.740234375" x="6.871567594454973" y="10.168228063029346">&lt;&lt;PFLoader.h&gt;&gt;

PackedFileItem

typedef unsigned int DWORD;

std::string Name
DWORD Next
DWORD FileFolder
DWORD Offset
DWORD Length</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n38">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="535.3609709024449" width="807.9384596111427" x="12376.03077019443" y="-6207.680485451223"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="518.541015625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="797.6640625" x="5.137198555570649" y="8.409977638722921">&lt;&lt;GameModeSwitcher.h&gt;&gt;

GameModeSwitcher

public:

void frameStarted(const Ogre::FrameEvent &amp;evt)
void frameRenderingQueued(const Ogre::FrameEvent &amp;evt)
void frameEnded()

void switchMode()

void restartRace()

void tabPressed()

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)

GameMode getMode()const


private:

ModeContext mContext

GameMode mGameMode
GameMode mGameModeNext
bool mIsSwitchMode


CommonIncludes::shared_ptr&lt;BaseMenuMode&gt; mMenuMode
CommonIncludes::shared_ptr&lt;MenuMultiMode&gt; mMenuMultiMode
CommonIncludes::shared_ptr&lt;BaseRaceMode&gt; mPlayerMode

void clear()
</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n39">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="320.6928825262544" width="420.48941532423214" x="14458.752269457724" y="-8140.346441263127"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="283.322265625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="379.84375" x="20.322832662115616" y="18.685308450627417">&lt;&lt;BaseMode.h&gt;&gt;

BaseMode

public:

virtual void initData() = 0
virtual void clearData() = 0

virtual void frameStarted(const Ogre::FrameEvent &amp;evt) = 0
virtual void frameRenderingQueued(const Ogre::FrameEvent&amp; evt) = 0

protected:

ModeContext mModeContext

Ogre::SceneManager* mSceneMgr
Ogre::SceneNode* mMainNode
Ogre::Camera* mCamera</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n40">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="247.97426934819396" width="440.92708914224704" x="13549.536455428877" y="-6753.439451514756"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="239.21875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="343.462890625" x="48.73209925862284" y="4.377759674096524">&lt;&lt;MenuMode.h&gt;&gt;

MenuMode

public:

virtual void frameStarted(const Ogre::FrameEvent &amp;evt)override

protected:

void doInitData()override
void doClearData()override

private:

CommonIncludes::shared_ptr&lt;UIMainMenu&gt; mUIMainMenu</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n41">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="1142.2539939183798" width="930.2499573032924" x="14204.875021348353" y="-4351.126996959191"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="1135.990234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="873.015625" x="28.617166151645506" y="3.131879771689455">&lt;&lt;BaseRaceMode.h&gt;&gt;

BaseRaceMode

public:

virtual void initData()override
virtual void clearData()override

void restart()

void frameStarted(const Ogre::FrameEvent &amp;evt)override
void frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

void processCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)

void onLapFinished()override

void preRenderTargetUpdate(const Ogre::RenderTargetEvent&amp; evt)override
void postRenderTargetUpdate(const Ogre::RenderTargetEvent&amp; evt)override

protected:

StaticMeshProcesser mStaticMeshProcesser
ModelsPool mModelsPool

LapController mLapController

CommonIncludes::shared_ptr&lt;CameraMan&gt; mCameraMan

CommonIncludes::shared_ptr&lt;OgreBulletDynamics::DynamicsWorld&gt; mWorld

CommonIncludes::shared_ptr&lt;UIRace&gt; mUIRace

virtual void clearScene()
virtual void initMisc()

//used in multiplayer mode
virtual void customInitScene()
virtual void customClearScene()
virtual void customInitUI(){}
virtual void customClearUI(){}
virtual void customProcessCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)
virtual void customUnloadResources()
virtual void customFrameStartedDoProcessFrameBeforePhysics(const Ogre::FrameEvent &amp;evt)
virtual void customFrameStartedDoProcessFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)
virtual void customFrameRenderingQueuedDoBegining()
virtual void customFrameRenderingQueuedDoRaceStarted()
virtual void customFrameRenderingQueuedDo2DUI()

private:

bool mIsGlobalReset

DMLuaManager mLuaManager

Ogre::Camera* mRearCamera

Ogre::SceneManager* mSceneMgrCarUI

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::DebugDrawer&gt; mDebugDrawer

void initScene()
void initTerrain()
void initModel()

void initLightLists()


void initWorld(const Ogre::Vector3 &amp;gravityVector = Ogre::Vector3(0.0f, -59.81f, 0.0f),
                   const Ogre::AxisAlignedBox &amp;bounds = Ogre::AxisAlignedBox(   Ogre::Vector3 (-10000.0f, -10000.0f, -10000.0f),
                   Ogre::Vector3 (10000.0f,  10000.0f,  10000.0f)))

void deInitWorld()

void loadResources()
void unloadResources()</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n42">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="42.828676372586415" width="182.67338922266129" x="14788.663305388667" y="-4521.414338186295"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="33.40234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="154.076171875" x="14.29860867383104" y="4.713166311293207">LapUtils::Events
Ogre::RenderTargetListener</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n43">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="434.5806668488958" width="399.02319879457855" x="14980.488400602711" y="-8197.290333424447"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="430.333984375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="384.818359375" x="7.102419709788592" y="2.1233412369474536">&lt;&lt;ModeContext.h&gt;&gt;

ModeContext

public:

void setGameModeSwitcher(GameModeSwitcher* gameModeSwitcher)
GameModeSwitcher* getGameModeSwitcher()const

GameState&amp; getGameState()

private:

ModeContext&amp; operator=(const ModeContext&amp;)

Ogre::Root* mRoot
Ogre::RenderWindow* mWindow

InputHandler* mInputHandler

CustomTrayManager* mTrayMgr
CustomOverlaySystem* mOverlaySystem

lua_State * mPipeline

GameModeSwitcher* mGameModeSwitcher

GameState&amp; mGameState
SoundsProcesser&amp; mSoundsProcesser</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n44">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="26.610244263811182" width="114.85085494960651" x="12722.574572525196" y="-5623.305122131904"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="75.373046875" x="19.738904037303655" y="3.9545361944055912">ModeContext</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n45">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="988.3090455396791" width="1021.9078593826357" x="14159.04607030868" y="-2534.1545227698407"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="944.875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="971.798828125" x="25.05451562881717" y="21.717022769839787">&lt;&lt;MultiPlayerMode.h&gt;&gt;

MultiPlayerMode

public:

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; getMultiplayerController()

void onLapFinished()override

void onPlayerEjected(const std::string&amp; player)override
void onPlayerJoined(const std::string&amp; player)override
void onPlayerLeft(const std::string&amp; player)override
void onNewHost(const std::string&amp; player)override
void onReconfigure(const std::string&amp; player)override{}
void onReconfigureFailed(const std::string&amp; player)override{}
void onRoomClosed(const std::string&amp; player)override
void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data)override
void onPlayerAddedToSession(const std::string&amp; player)override
void onPlayerQuitSession(const std::string&amp; player, bool isHost)override
void onSessionReadyToStart()override{}
void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo)override{}
void onSessionUpdate(const MultiplayerController::playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost)override
void onError(const std::string&amp; message)override

void prepareDataForSession(const MultiplayerSessionStartInfo&amp; sessionStartInfo)

void tabPressed()

protected:

virtual void customInitScene()override
virtual void customClearScene()override
virtual void customInitUI()override
virtual void customClearUI()override
virtual void customProcessCollision(btManifoldPoint&amp; cp, const btCollisionObjectWrapper* colObj0Wrap, const btCollisionObjectWrapper* colObj1Wrap, int triIndex)override
virtual void customUnloadResources()override
virtual void customFrameStartedDoProcessFrameBeforePhysics(const Ogre::FrameEvent &amp;evt)override
virtual void customFrameStartedDoProcessFrameAfterPhysics(const Ogre::FrameEvent &amp;evt)override
virtual void customFrameRenderingQueuedDoBegining()override
virtual void customFrameRenderingQueuedDoRaceStarted()override
virtual void customFrameRenderingQueuedDo2DUI()override

private:

friend class MultiplayerAILapFinishController

void onRaceFinishedByAI(PSAICar&amp; aiCar)

void checkRaceFinished()

bool mIsSessionStarted

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; mMultiplayerController

CommonIncludes::shared_ptr&lt;UIRaceMulti&gt; mUIRaceMulti

std::vector&lt;CommonIncludes::shared_ptr&lt;MultiplayerAILapFinishController&gt; &gt; mAILapsController

bool mIsSelfFinished
Ogre::Real mSelfTotalRaceTime
std::map&lt;std::string, bool&gt; mIsRaceFinishedByHuman
std::map&lt;std::string, Ogre::Real&gt; mRaceTimeByHuman
std::vector&lt;Ogre::Real&gt; mRaceTimeByAI</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n46">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="109.16405801239489" width="219.7756503365904" x="13510.112174831705" y="-2094.5820290061984"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="92.20703125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="139.427734375" x="40.17395798079451" y="8.478513381197445">&lt;&lt;SinglePlayerMode.h&gt;&gt;

SinglePlayerMode

public:

</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n47">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="26.610244263811182" width="114.85085494960651" x="11072.574572525196" y="-5833.305122131906"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="75.373046875" x="19.738904037303655" y="3.9545361944055912">ModeContext</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n48">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="269.07666112608695" width="918.357184344271" x="15620.821407827865" y="-7034.538330563044"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="894.408203125" x="11.974490609634813" y="22.279541500543928">&lt;&lt;UIBase.h&gt;&gt;

UIBase

public:

Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top, const Ogre::String&amp; material)
Ogre::PanelOverlayElement* createPanel(const Ogre::String&amp; name, const Ogre::Vector4&amp; pos, const Ogre::String&amp; material)
Ogre::TextAreaOverlayElement* createTextArea(const Ogre::String&amp; name, Ogre::Real width, Ogre::Real height, Ogre::Real left, Ogre::Real top)

void destroy(CustomTrayManager* trayMgr)

private:

std::vector&lt;Ogre::OverlayElement*&gt; mCreatedElements</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n49">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="482.7484143565607" width="489.36695375394766" x="15385.316523123027" y="-6661.37420717828"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="474.4375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="483.525390625" x="2.9207815644731454" y="4.155457178279903">&lt;&lt;UIMainMenu.h&gt;&gt;

UIMainMenu

public:

void load(CustomTrayManager* trayMgr, const GameState&amp; gameState)

void processButtonClick(MyGUI::Widget* sender)
void processKeyPress(MyGUI::Widget* sender, MyGUI::KeyCode key, unsigned int _char)
void processItemSelected(MyGUI::Widget* sender, size_t index)
void processChangeComboBox(MyGUI::Widget* sender, size_t index)

private:

ModeContext mModeContext

void loadMisc(const PFLoader&amp; pfLoaderData, const PFLoader&amp; pfLoaderGameshell)

MenuMode * mMenuMode

MyGUI::ComboBox* mWidgetTrack
MyGUI::ComboBox* mWidgetCar
MyGUI::ComboBox* mWidgetCharacter
MyGUI::ComboBox* mWidgetAICount
MyGUI::ComboBox* mWidgetAIStrength

MyGUI::EditBox* mWidgetIP
MyGUI::EditBox* mWidgetRoom
MyGUI::EditBox* mWidgetUserName
MyGUI::ListBox* mWidgetRooms
MyGUI::ListBox* mWidgetRoomPlayers</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n50">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="13716.260579822643" y="-6822.020237513076"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="72.02734375" x="17.725748302356806" y="3.2173347349162214">UIMainMenu</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n51">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="15366.260579822641" y="-4092.567920672417"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="44.013671875" x="31.732584239856806" y="3.2173347349162214">UIRace</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n52">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="26.610244263811182" width="173.38367984003628" x="12693.308160079981" y="-6275.405065361787"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="151.392578125" x="10.995550857518538" y="3.9545361944055912">OgreBites::SdkTrayListener</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n53">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="640.1202740237177" width="507.18188568847245" x="15586.409057155764" y="-6050.060137011858"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="606.748046875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="483.525390625" x="11.828247531735542" y="16.686113574358387">&lt;&lt;UIMainMenuMulti.h&gt;&gt;

UIMainMenuMulti

public:

void load(MyGUI::Gui* gui, const GameState&amp; gameState)

void processButtonClick(MyGUI::Widget* sender)
void processChangeComboBox(MyGUI::Widget* sender, size_t index)
void processKeyPress(MyGUI::Widget* sender, MyGUI::KeyCode key, unsigned int _char)

void onStartPossible()
void onStartNotPossible()

void addEvent(const std::string&amp; eventItem, bool isMessage = false)

private:

ModeContext mModeContext

void loadMisc(const PFLoader&amp; pfLoaderData, const PFLoader&amp; pfLoaderGameshell)

void updateRoomState(const std::string&amp; playerMessage = "")const

MenuMultiMode * mMenuMultiMode

MyGUI::Button* mWidgetJoin
MyGUI::Button* mWidgetStart
MyGUI::ComboBox* mWidgetTrack
MyGUI::ComboBox* mWidgetCar
MyGUI::ComboBox* mWidgetCharacter
MyGUI::ComboBox* mWidgetAICount
MyGUI::ComboBox* mWidgetAIStrength
MyGUI::ComboBox* mWidgetLapsCount
MyGUI::ComboBox* mWidgetBroadcast

MyGUI::EditBox* mWidgetMessage
MyGUI::Button* mWidgetSendMessage

MyGUI::ListBox* mWidgetEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n54">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="672.0205068555979" width="980.3836661963628" x="13579.80816690182" y="-6276.010253427799"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="650.8515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="979.814453125" x="0.284606535680723" y="10.584472177799398">&lt;&lt;MenuMultiMode.h&gt;&gt;

MenuMultiMode

public:

virtual void frameStarted(const Ogre::FrameEvent &amp;evt)override

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; getMultiplayerController()

void onPlayerEjected(const std::string&amp; player)override
void onPlayerJoined(const std::string&amp; player)override
void onPlayerLeft(const std::string&amp; player)override
void onNewHost(const std::string&amp; player)override
void onReconfigure(const std::string&amp; player)override
void onReconfigureFailed(const std::string&amp; player)override
void onRoomClosed(const std::string&amp; player)override
void onLobbyMessage(const std::string&amp; player, const MultiplayerLobbyData&amp; data)override
void onPlayerAddedToSession(const std::string&amp; player)override{}
void onPlayerQuitSession(const std::string&amp; player, bool isHost)override{}
void onSessionReadyToStart()override;
void onSessionStart(const MultiplayerSessionStartInfo&amp; multiplayerSessionStartInfo)override;
void onSessionUpdate(const MultiplayerController::playerToData&amp; otherPlayersSessionData, const std::vector&lt;MultiplayerSessionData&gt;&amp; aiPlayersSessionData, bool isHost)override{}
void onError(const std::string&amp; message)override{}

MultiplayerSessionStartInfo getMultiplayerSessionStartInfo()const

bool getIsLobbyEntered()const

protected:

void doInitData()override
void doClearData()override

private:

MultiplayerSessionStartInfo mMultiplayerSessionStartInfo

CommonIncludes::shared_ptr&lt;MultiplayerController&gt; mMultiplayerController
CommonIncludes::shared_ptr&lt;UIMainMenuMulti&gt; mUIMainMenuMulti

bool mIsEnterFromBaseMenu

bool mIsLobbyEntered</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n55">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="65.52349051922829" width="162.20703162726488" x="13988.896484186367" y="-5582.761745259614"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="48.103515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.068359375" x="6.069336126132839" y="8.709987447114145">MultiplayerController
UIMainMenuMulti
MultiplayerSessionStartInfo</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n56">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="215.4220260704392" width="273.1359434396013" x="17143.4320282802" y="-1817.7110130352212"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="195.115234375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="257.4296875" x="7.853127969799971" y="10.153395847719594">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerSessionStartInfo

std::vector&lt;std::string&gt; mPlayers
size_t mPlayerIndex
bool mIsHost
std::vector&lt;std::string&gt; mAISkins
std::map&lt;std::string, std::string&gt; mPlayersSkins

std::string mTrackName
size_t mAIStrength
size_t mLapsCount</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n57">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="32.25791453345391" width="204.88871618483893" x="14807.555641907578" y="-2626.128957266727"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.724609375" x="27.08205340491986" y="6.778371329226957">MultiplayerControllerEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n58">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="32.25791453345391" width="204.88871618483893" x="14177.55564190758" y="-6376.128957266727"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="150.724609375" x="27.08205340491986" y="6.7783713292274115">MultiplayerControllerEvents</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n59">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="284.62202918752837" width="457.29192897408666" x="13841.354035512957" y="-7492.311014593764"/>
          <y:Fill color="#CC99FF" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="253.919921875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="448.181640625" x="4.555144174542875" y="15.351053656264412">&lt;&lt;BaseMenuMode.h&gt;&gt;

BaseMenuMode

public:

virtual void initData()override
virtual void clearData()override

virtual void frameRenderingQueued(const Ogre::FrameEvent&amp; evt)override

void recalculateCharacterNames(const std::vector&lt;std::string&gt;&amp; playersCharacters)

protected:

virtual void doInitData() = 0
virtual void doClearData() = 0</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n60">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="512.0640110752847" width="941.0184105842977" x="15039.49079470785" y="-1276.0320055376444"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="474.4375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="917.74609375" x="11.63615841714818" y="18.813255537642362">&lt;&lt;MultiplayerControllerMaster.h&gt;&gt;

MultiplayerControllerMaster

public:

bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version)override
bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName)override

void setAISkins(const std::vector&lt;std::string&gt;&amp; aiSkins)
std::vector&lt;std::string&gt; getAllPlayersSkins()const

void onMessage(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, const std::string &amp; message)override
void onRoomUpdate(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, uint8_t flags)override
void onSessionStart(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, multislider::SessionPtr session, const std::string &amp; sessionData)override

void startSession(const std::string&amp; trackName, size_t aiStrength, size_t lapsCount)

private:

void addPlayer(const std::string&amp; playerName)
void removePlayer(const std::string&amp; playerName)
void setPlayerReady(const std::string&amp; playerName, const std::string&amp; characterName)
void resetPlayerReady(const std::string&amp; playerName)
void resetPlayersReady()
bool checkAllPlayersReady()const
void checkAllPlayersReadyOrNot()const

std::map&lt;std::string, bool&gt; mReadyPlayers
std::map&lt;std::string, std::string&gt; mAllPlayers

std::vector&lt;std::string&gt; mAISkins</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n61">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="318.9939311716612" width="929.3182762144147" x="16005.340861892793" y="-1179.4969655858326"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="917.74609375" x="5.786091232206672" y="47.238176523330594">&lt;&lt;MultiplayerControllerSlave.h&gt;&gt;

MultiplayerControllerSlave

public:

bool startLobbyMaster(std::string ip, uint16_t port, std::string userName, std::string roomName, uint32_t playersLimits, uint32_t aiAmount, const std::string&amp; version)override
bool startLobbySlave(std::string ip, uint16_t port, std::string userName, std::string roomName)override

void onMessage(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, const std::string &amp; message)override
void onRoomUpdate(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, const std::string &amp; sender, uint8_t flags)override
void onSessionStart(multislider::Lobby* lobby, const multislider::RoomInfo &amp; room, multislider::SessionPtr session, const std::string &amp; sessionData)override

private:

</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n62">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="336.61465817732915" width="250.15214712623992" x="16824.92392643688" y="-1668.3073290886646"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="268.62109375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="212.095703125" x="19.02822200061928" y="33.996782213664574">&lt;&lt;MultiplayerData.h&gt;&gt;

MultiplayerLobbyData

MultiplayerLobbyDataType mDataType

//master &amp; slave data
bool mIsReady
std::string mCharacterName
std::string mPlayerMessage

//master data only
std::string mTrackName
size_t mAICount
size_t mAIStrength
size_t mLapsCount

Ogre::Real mRaceTotalTime</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n63">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="464.20539942905543" width="600.4139445734068" x="10049.283554875077" y="-8812.102699714527"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="445.03515625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="582.267578125" x="9.073183224203603" y="9.585121589527262">&lt;&lt;OriginalSettings.h&gt;&gt;

STRSettings

public:

void parse(const PFLoader&amp; pfLoaderStore, const std::string&amp; relativeDir, const std::string&amp; fileName)

std::string getValue(const std::string&amp; section, const std::string&amp; key, const std::string&amp; defaultVal = "") const

std::vector&lt;std::string&gt; getArrayValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
std::vector&lt;std::string&gt; getArrayValue(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector4 getArray4Value(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
Ogre::Vector4 getArray4Value(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector3 getArray3Value(const std::string&amp; section, const std::string&amp; key) const

Ogre::Vector2 getArray2Value(const std::string&amp; section, const std::string&amp; key) const

float getFloatValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
float getFloatValue(const std::string&amp; section, const std::string&amp; key) const

int getIntValue(const std::string&amp; section, const std::string&amp; key, bool&amp; isFound) const
int getIntValue(const std::string&amp; section, const std::string&amp; key) const

protected:

CSimpleIniA mSTR
bool mIsSTRLoaded</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n64">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="431.7379731226456" width="653.4593171303563" x="10022.760868596602" y="-8075.868986561323"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="415.6328125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="629.59375" x="11.932783565178397" y="8.052580311323254">&lt;&lt;OriginalSettings.h&gt;&gt;

STRPowerslide

public:

void parse(const PFLoader&amp; pfLoaderStore)

std::string getBaseCarFromCar(const std::string&amp; car) const
std::string getCarFromCharacter(const std::string&amp; character) const
std::vector&lt;std::string&gt; getCharactersByBaseCar(const std::string&amp; car)const
std::string getTrackTitle(const std::string&amp; car)const
std::string getCarTitle(const std::string&amp; car)const
std::string getCharacterTitle(const std::string&amp; character)const

Ogre::ColourValue getTrackSkyColor(const std::string&amp; trackName) const
Ogre::ColourValue getTrackAmbientColor(const std::string&amp; trackName) const
Ogre::ColourValue getTrackTimeTrialColor(const std::string&amp; trackName) const
Ogre::ColourValue getCharacterSpecularColor(const std::string&amp; trackName, const std::string&amp; characterName) const
std::string getExclusionFile(const std::string&amp; trackName) const
std::string getBaseDir(const std::string&amp; trackName) const
std::string getDataSubDir(const std::string&amp; trackName) const
size_t getLapsCount(const std::string&amp; trackName) const
Ogre::Vector3 getFinishCameraPos(const std::string&amp; trackName) const

private:

Ogre::ColourValue parseColor(const std::string&amp; val) const</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n65">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="146.50477370542194" width="281.9130653844727" x="10775.260484102959" y="-8053.252386852711"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="106.908203125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="239.46484375" x="21.22411081723658" y="19.798285290211425">&lt;&lt;OriginalSettings.h&gt;&gt;

STRRacecrud

public:

void parse(const PFLoader&amp; pfLoaderStore)</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n66">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="37.27627252126149" width="91.21585033136864" x="9884.392074834315" y="-8598.63813626063"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="70.0234375" x="10.596206415684719" y="9.287550323129835">CSimpleIniA</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n67">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="260.46854910861293" width="243.12797396348242" x="14548.436013018254" y="-1480.2342745543065"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="224.517578125" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="204.068359375" x="19.529807294240527" y="17.975485491806467">&lt;&lt;MultiPlayerMode.cpp&gt;&gt;

MultiplayerAILapFinishController

public:

void onLapFinished()override

private:

GameState&amp; mGameState

MultiPlayerMode * mMultiPlayerMode

PSAICar&amp; mAICar</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n68">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="99.25540900083922" width="395.22605608423464" x="6642.386971957882" y="-229.6277045004196"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="77.505859375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="359.857421875" x="17.68431710461755" y="10.874774812919611">&lt;&lt;MovableText.h&gt;&gt;

MovableText

http://www.ogre3d.org/tikiwiki/tiki-editpage.php?page=MovableText</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n69">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="788.4836915201113" width="894.8936264315575" x="5882.553186784221" y="-7204.241845760056"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="739.05859375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="871.1171875" x="11.888219465779002" y="24.712548885056094">&lt;&lt;PSBaseVehicle.h&gt;&gt;

PSBaseVehicle

public:

virtual void clear()

protected:

void initPhysicalModel(OgreBulletDynamics::DynamicsWorld * world, 
    Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4], 
    const InitialVehicleSetup&amp; initialVehicleSetup)

void repositionVehicle(const Ogre::Vector3&amp; chassisPos, const Ogre::Quaternion&amp; chassisRot, Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])

OgreBulletDynamics::DynamicsWorld * mWorld

CommonIncludes::shared_ptr&lt;OgreBulletDynamics::RigidBody&gt; mCarChassis
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelFrontL
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelFrontR
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelBackL
CommonIncludes::shared_ptr&lt;CustomRigidBodyWheel&gt; mCarWheelBackR

CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringFrontL
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringFrontR
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringBackL
CommonIncludes::shared_ptr&lt;OgreBulletDynamics::SixDofSpring2Constraint&gt; mSixDofSpringBackR

InitialVehicleSetup mInitialVehicleSetup

static Ogre::NameGenerator nameGenNodes

private:

void removeFromWorld()
void addToWorld(Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])

void addRigidsToWorld(Ogre::SceneNode* modelNode, Ogre::SceneNode *wheelNodes[4])
void addSpringsToWorld()

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::CompoundCollisionShape&gt; mCompoundShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofBackRShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofBackLShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofFrontRShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mRoofFrontLShape
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mChassisBodyShape

CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mWheelShapeFront
CommonIncludes::shared_ptr&lt;OgreBulletCollisions::SphereCollisionShape&gt; mWheelShapeBack</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n70">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="733.3753734265165" width="370.78469139349863" x="6894.6076543032505" y="-7176.687686713258"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="665.552734375" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="231.4375" x="69.67359569674954" y="33.91131952575779">&lt;&lt;PSBaseVehicle.h&gt;&gt;

InitialVehicleSetup

Ogre::Vector3 mChassisPos
Ogre::Quaternion mChassisRot
Ogre::Vector3 mConnectionPointRRWheel
Ogre::Vector3 mConnectionPointRLWheel
Ogre::Vector3 mConnectionPointFRWheel
Ogre::Vector3 mConnectionPointFLWheel

float mRoofBackRadius
Ogre::Vector3 mRoofBackPos

float mRoofFrontRadius
Ogre::Vector3 mRoofFrontPos

float mBodyRadius
Ogre::Vector3 mBodyBasePos

Ogre::Vector2 mWheelRadius

Ogre::Vector3 mAnisotropicFriction
Ogre::Real mRollingFriction

Ogre::Real mMaxTravel

Ogre::Real mWheelsFSpringStiffness
Ogre::Real mWheelsFSpringDamping
Ogre::Real mWheelsRSpringStiffness
Ogre::Real mWheelsRSpringDamping
bool mLimitSpringParamsF
bool mLimitSpringParamsR

Ogre::Real mAirDensityLinear
Ogre::Real mAirDensityAngular

Ogre::Real mChassisMass
Ogre::Real mChassisRestitution
Ogre::Real mChassisFriction

Ogre::Real mWheelsFMass
Ogre::Real mWheelsRMass
Ogre::Real mWheelsRestitution
Ogre::Real mWheelsFriction</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n71">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="25.135841344832443" width="107.47884035471282" x="14916.260579822643" y="-1457.6801154742502"/>
          <y:Fill color="#00FF00" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="18.701171875" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="69.349609375" x="19.064615489856806" y="3.2173347349162214">UIRaceMulti</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <node id="n72">
      <data key="d6">
        <y:ShapeNode>
          <y:Geometry height="327.9348001234566" width="519.624060372907" x="17380.187969813545" y="-5983.967400061729"/>
          <y:Fill color="#C0C0C0" transparent="false"/>
          <y:BorderStyle color="#000000" type="line" width="1.0"/>
          <y:NodeLabel alignment="left" autoSizePolicy="content" fontFamily="Dialog" fontSize="12" fontStyle="plain" hasBackgroundColor="false" hasLineColor="false" height="283.322265625" modelName="internal" modelPosition="c" textColor="#000000" visible="true" width="483.525390625" x="18.04933487395465" y="22.306267249228767">&lt;&lt;UIRaceMulti.h&gt;&gt;

UIRaceMulti

public:

void load(MyGUI::Gui* gui, const GameState&amp; gameState)

void processKeyPress(MyGUI::Widget* sender, MyGUI::KeyCode key, unsigned int _char)

void switchVisibleMessageWidget()

private:

ModeContext mModeContext

MultiPlayerMode * mMultiPlayerMode

MyGUI::EditBox* mWidgetMessage</y:NodeLabel>
          <y:Shape type="rectangle"/>
        </y:ShapeNode>
      </data>
    </node>
    <edge id="n0::e0" source="n0::n0" target="n0::n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_delta" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e1" source="n0::n2" target="n0::n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e2" source="n0::n4" target="n0::n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e3" source="n0::n6" target="n0::n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e4" source="n0::n19" target="n0::n20">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="n0::e5" source="n0::n23" target="n0::n24">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="white_delta" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e0" source="n1" target="n3">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e1" source="n4" target="n5">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e2" source="n6" target="n1">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e3" source="n6" target="n7">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e4" source="n7" target="n8">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e5" source="n6" target="n9">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e6" source="n6" target="n10">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e7" source="n11" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e8" source="n11" target="n12">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e9" source="n13" target="n6">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e10" source="n13" target="n14">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e11" source="n14" target="n15">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e12" source="n14" target="n16">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e13" source="n17" target="n13">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e14" source="n4" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e15" source="n18" target="n19">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e16" source="n18" target="n20">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e17" source="n21" target="n22">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="white_diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e18" source="n24" target="n26">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e19" source="n24" target="n25">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e20" source="n4" target="n28">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e21" source="n29" target="n30">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e22" source="n29" target="n31">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e23" source="n29" target="n32">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e24" source="n7" target="n33">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e25" source="n24" target="n34">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e26" source="n24" target="n35">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e27" source="n18" target="n36">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="diamond" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e28" source="n36" target="n37">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e29" source="n38" target="n4">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e30" source="n40" target="n59">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e31" source="n41" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e32" source="n40" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e33" source="n41" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e34" source="n41" target="n42">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e35" source="n43" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e36" source="n44" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e37" source="n45" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e38" source="n46" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e39" source="n4" target="n47">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="dashed" width="1.0"/>
          <y:Arrows source="none" target="standard"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e40" source="n29" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e41" source="n24" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e42" source="n21" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e43" source="n23" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e44" source="n49" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e45" source="n27" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e46" source="n50" target="n40">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e47" source="n51" target="n41">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e48" source="n38" target="n52">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e49" source="n53" target="n48">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e50" source="n55" target="n54">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e51" source="n54" target="n59">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e52" source="n54" target="n38">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e53" source="n56" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e54" source="n45" target="n57">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e55" source="n54" target="n58">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e56" source="n59" target="n39">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e57" source="n61" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e58" source="n60" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e59" source="n62" target="n29">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="none"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e60" source="n64" target="n63">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e61" source="n65" target="n63">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e62" source="n65" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e63" source="n64" target="n18">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e64" source="n66" target="n63">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e65" source="n67" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e66" source="n68" target="n17">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e67" source="n1" target="n69">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="white_delta"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e68" source="n70" target="n69">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
    <edge id="e69" source="n71" target="n45">
      <data key="d10">
        <y:PolyLineEdge>
          <y:Path sx="0.0" sy="0.0" tx="0.0" ty="0.0"/>
          <y:LineStyle color="#000000" type="line" width="1.0"/>
          <y:Arrows source="none" target="diamond"/>
          <y:BendStyle smoothed="false"/>
        </y:PolyLineEdge>
      </data>
    </edge>
  </graph>
  <data key="d0">
    <y:Resources/>
  </data>
</graphml>
